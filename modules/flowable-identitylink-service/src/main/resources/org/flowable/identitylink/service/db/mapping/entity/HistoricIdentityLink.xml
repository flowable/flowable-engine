<?xml version="1.0" encoding="UTF-8" ?>

<!--
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.flowable.identitylink.service.impl.persistence.entity.HistoricIdentityLinkEntityImpl">
  
   <!-- INSERT HISTORIC IDENTITY LINK -->
  
  <insert id="insertHistoricIdentityLink" parameterType="org.flowable.identitylink.service.impl.persistence.entity.HistoricIdentityLinkEntityImpl">
    insert into ${prefix}ACT_HI_IDENTITYLINK (ID_, TYPE_, USER_ID_, GROUP_ID_, TASK_ID_, PROC_INST_ID_, SCOPE_ID_, SUB_SCOPE_ID_, SCOPE_TYPE_, SCOPE_DEFINITION_ID_, CREATE_TIME_)
    values (#{id, jdbcType=NVARCHAR},
            #{type, jdbcType=NVARCHAR},
            #{userId, jdbcType=NVARCHAR},
            #{groupId, jdbcType=NVARCHAR},
            #{taskId, jdbcType=NVARCHAR},
            #{processInstanceId, jdbcType=NVARCHAR},
            #{scopeId, jdbcType=NVARCHAR},
            #{subScopeId, jdbcType=NVARCHAR},
            #{scopeType, jdbcType=NVARCHAR},
            #{scopeDefinitionId, jdbcType=NVARCHAR},
            #{createTime, jdbcType=TIMESTAMP})
  </insert>
  
  <insert id="bulkInsertHistoricIdentityLink" parameterType="java.util.List">
    insert into ${prefix}ACT_HI_IDENTITYLINK (ID_, TYPE_, USER_ID_, GROUP_ID_, TASK_ID_, PROC_INST_ID_, SCOPE_ID_, SUB_SCOPE_ID_, SCOPE_TYPE_, SCOPE_DEFINITION_ID_, CREATE_TIME_)
    values 
      <foreach collection="list" item="historicIdentityLink" index="index" separator=",">
        (#{historicIdentityLink.id, jdbcType=NVARCHAR},
         #{historicIdentityLink.type, jdbcType=NVARCHAR},
         #{historicIdentityLink.userId, jdbcType=NVARCHAR},
         #{historicIdentityLink.groupId, jdbcType=NVARCHAR},
         #{historicIdentityLink.taskId, jdbcType=NVARCHAR},
         #{historicIdentityLink.processInstanceId, jdbcType=NVARCHAR},
         #{historicIdentityLink.scopeId, jdbcType=NVARCHAR},
         #{historicIdentityLink.subScopeId, jdbcType=NVARCHAR},
         #{historicIdentityLink.scopeType, jdbcType=NVARCHAR},
         #{historicIdentityLink.scopeDefinitionId, jdbcType=NVARCHAR},
         #{historicIdentityLink.createTime, jdbcType=TIMESTAMP})
      </foreach>
  </insert>
  
  <insert id="bulkInsertHistoricIdentityLink" databaseId="oracle" parameterType="java.util.List">
    INSERT ALL 
      <foreach collection="list" item="historicIdentityLink" index="index">
        INTO ${prefix}ACT_HI_IDENTITYLINK (ID_, TYPE_, USER_ID_, GROUP_ID_, TASK_ID_, PROC_INST_ID_, SCOPE_ID_, SUB_SCOPE_ID_, SCOPE_TYPE_, SCOPE_DEFINITION_ID_, CREATE_TIME_) VALUES 
          (#{historicIdentityLink.id, jdbcType=NVARCHAR},
           #{historicIdentityLink.type, jdbcType=NVARCHAR},
           #{historicIdentityLink.userId, jdbcType=NVARCHAR},
           #{historicIdentityLink.groupId, jdbcType=NVARCHAR},
           #{historicIdentityLink.taskId, jdbcType=NVARCHAR},
           #{historicIdentityLink.processInstanceId, jdbcType=NVARCHAR},
           #{historicIdentityLink.scopeId, jdbcType=NVARCHAR},
           #{historicIdentityLink.subScopeId, jdbcType=NVARCHAR},
           #{historicIdentityLink.scopeType, jdbcType=NVARCHAR},
           #{historicIdentityLink.scopeDefinitionId, jdbcType=NVARCHAR},
           #{historicIdentityLink.createTime, jdbcType=TIMESTAMP})
      </foreach>
    SELECT * FROM dual
  </insert>
  
  <!-- HISTORIC IDENTITY LINK DELETE -->
  
  <delete id="deleteHistoricIdentityLink" parameterType="string">
    delete from ${prefix}ACT_HI_IDENTITYLINK where ID_ = #{id, jdbcType=NVARCHAR}
  </delete>
  
  <delete id="bulkDeleteHistoricIdentityLink" parameterType="java.util.Collection">
    delete from ${prefix}ACT_HI_IDENTITYLINK where  
    <foreach item="identityLink" collection="list" index="index" separator=" or ">
        ID_ = #{identityLink.id, jdbcType=NVARCHAR}
    </foreach>
  </delete>
  
  <delete id="deleteHistoricIdentityLinksByScopeIdAndScopeType" parameterType="java.util.Map">
    delete from ${prefix}ACT_HI_IDENTITYLINK where SCOPE_ID_ = #{scopeId, jdbcType=NVARCHAR} and SCOPE_TYPE_ = #{scopeType, jdbcType=NVARCHAR}
  </delete>
  
  <delete id="deleteHistoricIdentityLinksByScopeDefinitionIdAndScopeType" parameterType="java.util.Map">
    delete from ${prefix}ACT_HI_IDENTITYLINK where SCOPE_DEFINITION_ID_ = #{scopeDefinitionId, jdbcType=NVARCHAR} and SCOPE_TYPE_ = #{scopeType, jdbcType=NVARCHAR}
  </delete>
  
  <delete id="bulkDeleteHistoricIdentityLinksForProcessInstanceIds" parameterType="java.util.Collection">
    delete from ${prefix}ACT_HI_IDENTITYLINK where 
    <foreach item="listItem" index="listIndex" collection="collection">
        <if test="listIndex &gt; 0">
        or
        </if>
        PROC_INST_ID_ in 
        <foreach item="processInstanceId" index="index" collection="listItem" open="(" separator="," close=")">
          #{processInstanceId, jdbcType=NVARCHAR}
        </foreach>
    </foreach>
  </delete>
  
  <delete id="bulkDeleteHistoricIdentityLinksForTaskIds" parameterType="java.util.Collection">
    delete from ${prefix}ACT_HI_IDENTITYLINK where 
    <foreach item="listItem" index="listIndex" collection="collection">
        <if test="listIndex &gt; 0">
        or
        </if>
        TASK_ID_ in 
        <foreach item="taskId" index="index" collection="listItem" open="(" separator="," close=")">
          #{taskId, jdbcType=NVARCHAR}
        </foreach>
    </foreach>
  </delete>
  
  <delete id="bulkDeleteHistoricIdentityLinksForScopeIdsAndScopeType" parameterType="map">
    delete from ${prefix}ACT_HI_IDENTITYLINK where 
    (<foreach item="listItem" index="listIndex" collection="scopeIds">
        <if test="listIndex &gt; 0">
        or
        </if>
        SCOPE_ID_ in 
        <foreach item="scopeId" index="index" collection="listItem" open="(" separator="," close=")">
          #{scopeId, jdbcType=NVARCHAR}
        </foreach>
    </foreach>)
    and SCOPE_TYPE_ = #{scopeType, jdbcType=NVARCHAR}
  </delete>
  
  <delete id="bulkDeleteHistoricProcessIdentityLinks" parameterType="java.util.Map">
    delete <if test="_databaseId != 'postgres' and _databaseId != 'cockroachdb' and _databaseId != 'db2'"> LINK </if> from ${prefix}ACT_HI_IDENTITYLINK LINK where LINK.PROC_INST_ID_ is not null and LINK.PROC_INST_ID_ != '' and
    NOT EXISTS (select PROCINST.ID_ from ${prefix}ACT_HI_PROCINST PROCINST where LINK.PROC_INST_ID_ = PROCINST.ID_)
  </delete>
  
  <delete id="bulkDeleteHistoricProcessIdentityLinks" parameterType="java.util.Map" databaseId="oracle">
    delete from ${prefix}ACT_HI_IDENTITYLINK LINK where LINK.PROC_INST_ID_ is not null and
    NOT EXISTS (select PROCINST.ID_ from ${prefix}ACT_HI_PROCINST PROCINST where LINK.PROC_INST_ID_ = PROCINST.ID_)
  </delete>

  <delete id="bulkDeleteHistoricProcessIdentityLinks" databaseId="h2" parameterType="java.util.Map">
    delete from ${prefix}ACT_HI_IDENTITYLINK where PROC_INST_ID_ is not null and PROC_INST_ID_ != '' and 
    PROC_INST_ID_ NOT IN (select PROCINST.ID_ from ${prefix}ACT_HI_PROCINST PROCINST)
  </delete>

  <delete id="bulkDeleteHistoricProcessIdentityLinks" databaseId="hsql" parameterType="java.util.Map">
    delete from ${prefix}ACT_HI_IDENTITYLINK where PROC_INST_ID_ is not null and PROC_INST_ID_ != '' and
    PROC_INST_ID_ NOT IN (select PROCINST.ID_ from ${prefix}ACT_HI_PROCINST PROCINST)
  </delete>

  <delete id="bulkDeleteHistoricCaseIdentityLinks" parameterType="java.util.Map">
    delete <if test="_databaseId != 'postgres' and _databaseId != 'cockroachdb' and _databaseId != 'db2'"> LINK </if> from ${prefix}ACT_HI_IDENTITYLINK LINK where LINK.SCOPE_ID_ is not null and LINK.SCOPE_ID_ != '' and LINK.SCOPE_TYPE_ = 'cmmn' and
    NOT EXISTS (select CASEINST.ID_ from ${prefix}ACT_CMMN_HI_CASE_INST CASEINST where LINK.SCOPE_ID_ = CASEINST.ID_)
  </delete>
  
  <delete id="bulkDeleteHistoricCaseIdentityLinks" parameterType="java.util.Map" databaseId="oracle">
    delete from ${prefix}ACT_HI_IDENTITYLINK LINK where LINK.SCOPE_ID_ is not null and LINK.SCOPE_TYPE_ = 'cmmn' and
    NOT EXISTS (select CASEINST.ID_ from ${prefix}ACT_CMMN_HI_CASE_INST CASEINST where LINK.SCOPE_ID_ = CASEINST.ID_)
  </delete>

  <delete id="bulkDeleteHistoricCaseIdentityLinks" databaseId="h2" parameterType="java.util.Map">
    delete from ${prefix}ACT_HI_IDENTITYLINK where SCOPE_ID_ is not null and SCOPE_ID_ != '' and SCOPE_TYPE_ = 'cmmn' and
    SCOPE_ID_ NOT IN (select CASEINST.ID_ from ${prefix}ACT_CMMN_HI_CASE_INST CASEINST)
  </delete>

  <delete id="bulkDeleteHistoricCaseIdentityLinks" databaseId="hsql" parameterType="java.util.Map">
    delete from ${prefix}ACT_HI_IDENTITYLINK where SCOPE_ID_ is not null and SCOPE_ID_ != '' and SCOPE_TYPE_ = 'cmmn' and
    SCOPE_ID_ NOT IN (select CASEINST.ID_ from ${prefix}ACT_CMMN_HI_CASE_INST CASEINST)
  </delete>

  <delete id="bulkDeleteHistoricTaskIdentityLinks" parameterType="java.util.Map">
    delete <if test="_databaseId != 'postgres' and _databaseId != 'cockroachdb' and _databaseId != 'db2'"> LINK </if> from ${prefix}ACT_HI_IDENTITYLINK LINK where LINK.TASK_ID_ is not null and LINK.TASK_ID_ != '' and
    NOT EXISTS (select TASK.ID_ from ${prefix}ACT_HI_TASKINST TASK where LINK.TASK_ID_ = TASK.ID_)
  </delete>
  
  <delete id="bulkDeleteHistoricTaskIdentityLinks" parameterType="java.util.Map" databaseId="oracle">
    delete from ${prefix}ACT_HI_IDENTITYLINK LINK where LINK.TASK_ID_ is not null and
    NOT EXISTS (select TASK.ID_ from ${prefix}ACT_HI_TASKINST TASK where LINK.TASK_ID_ = TASK.ID_)
  </delete>

  <delete id="bulkDeleteHistoricTaskIdentityLinks" databaseId="h2"  parameterType="java.util.Map">
    delete from ${prefix}ACT_HI_IDENTITYLINK where TASK_ID_ is not null and TASK_ID_ != '' and 
    TASK_ID_ NOT IN (select TASK.ID_ from ${prefix}ACT_HI_TASKINST TASK)
  </delete>
  
  <delete id="bulkDeleteHistoricTaskIdentityLinks" databaseId="hsql"  parameterType="java.util.Map">
    delete from ${prefix}ACT_HI_IDENTITYLINK where TASK_ID_ is not null and TASK_ID_ != '' and
    TASK_ID_ NOT IN (select TASK.ID_ from ${prefix}ACT_HI_TASKINST TASK)
  </delete>

  <!-- HISTORIC IDENTITY LINK RESULTMAP -->
  <resultMap id="historicIdentityLinkResultMap" type="org.flowable.identitylink.service.impl.persistence.entity.HistoricIdentityLinkEntityImpl">
    <id property="id" column="ID_" jdbcType="NVARCHAR" />
    <result property="type" column="TYPE_" jdbcType="NVARCHAR" />
    <result property="userId" column="USER_ID_" jdbcType="NVARCHAR" />
    <result property="groupId" column="GROUP_ID_" jdbcType="NVARCHAR" />
    <result property="taskId" column="TASK_ID_" jdbcType="NVARCHAR" />
    <result property="processInstanceId" column="PROC_INST_ID_" jdbcType="NVARCHAR" />
    <result property="scopeId" column="SCOPE_ID_" jdbcType="NVARCHAR"/>
    <result property="subScopeId" column="SUB_SCOPE_ID_" jdbcType="NVARCHAR"/>
    <result property="scopeType" column="SCOPE_TYPE_" jdbcType="NVARCHAR"/>
    <result property="scopeDefinitionId" column="SCOPE_DEFINITION_ID_" jdbcType="NVARCHAR"/>
    <result property="createTime" column="CREATE_TIME_" jdbcType="TIMESTAMP" />       
  </resultMap>

  <!-- HISTORIC IDENTITY LINK SELECT -->

  <select id="selectHistoricIdentityLink" parameterType="string" resultMap="historicIdentityLinkResultMap">
    select * from ${prefix}ACT_HI_IDENTITYLINK where ID_ = #{id, jdbcType=NVARCHAR}
  </select>
  
  <select id="selectHistoricIdentityLinksByTask" parameterType="string" resultMap="historicIdentityLinkResultMap">
    select * from ${prefix}ACT_HI_IDENTITYLINK where TASK_ID_ = #{parameter, jdbcType=NVARCHAR}
  </select>
  
  <select id="selectHistoricIdentityLinksByProcessInstance" parameterType="string" resultMap="historicIdentityLinkResultMap">
    select * from ${prefix}ACT_HI_IDENTITYLINK where PROC_INST_ID_ = #{parameter, jdbcType=NVARCHAR}
  </select>
  
  <select id="selectHistoricIdentityLinksByScopeIdAndType" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject" resultMap="historicIdentityLinkResultMap">
    select * from ${prefix}ACT_HI_IDENTITYLINK where SCOPE_ID_ = #{parameter.scopeId, jdbcType=NVARCHAR} and SCOPE_TYPE_ = #{parameter.scopeType, jdbcType=NVARCHAR}
  </select>
  
  <select id="selectHistoricIdentityLinksBySubScopeIdAndType" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject" resultMap="historicIdentityLinkResultMap">
    select * from ${prefix}ACT_HI_IDENTITYLINK where SUB_SCOPE_ID_ = #{parameter.subScopeId, jdbcType=NVARCHAR} and SCOPE_TYPE_ = #{parameter.scopeType, jdbcType=NVARCHAR}
  </select>
  
 <select id="selectIdentityLinks" resultMap="historicIdentityLinkResultMap">
    select * from ${prefix}ACT_HI_IDENTITYLINK
  </select>
  
  <select id="selectHistoricIdentityLinkByTaskUserGroupAndType" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject" resultMap="historicIdentityLinkResultMap">
    select * 
    from ${prefix}ACT_HI_IDENTITYLINK 
    where TASK_ID_ = #{parameter.taskId, jdbcType=NVARCHAR}
      <if test="parameter.userId != null">
        and USER_ID_ = #{parameter.userId, jdbcType=NVARCHAR}
      </if>
      <if test="parameter.groupId != null">
        and GROUP_ID_ = #{parameter.groupId, jdbcType=NVARCHAR}
      </if>
      <if test="parameter.type != null">
        and TYPE_ = #{parameter.type, jdbcType=NVARCHAR}
      </if>
  </select>
</mapper>
