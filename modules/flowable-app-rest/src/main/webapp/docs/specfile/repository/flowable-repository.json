{
  "swagger" : "2.0",
  "info" : {
    "description" : "# flowable / flowəb(ə)l /\r\n\r\n- a compact and highly efficient workflow and Business Process Management (BPM) platform for developers, system admins and business users.\r\n- a lightning fast, tried and tested BPMN 2 process engine written in Java. It is Apache 2.0 licensed open source, with a committed community.\r\n- can run embedded in a Java application, or as a service on a server, a cluster, and in the cloud. It integrates perfectly with Spring. With a rich Java and REST API, it is the ideal engine for orchestrating human or system activities.",
    "version" : "v1",
    "title" : "Flowable REST API",
    "contact" : {
      "name" : "Flowable",
      "url" : "http://www.flowable.org/"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host" : "localhost:8080",
  "basePath" : "/flowable-rest/service",
  "tags" : [ {
    "name" : "Deployment"
  }, {
    "name" : "Models"
  }, {
    "name" : "Process Definitions"
  } ],
  "schemes" : [ "http", "https" ],
  "paths" : {
    "/repository/deployments" : {
      "get" : {
        "tags" : [ "Deployment" ],
        "summary" : "List of Deployments",
        "description" : "",
        "operationId" : "getDeployments",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "Only return deployments with the given name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nameLike",
          "in" : "query",
          "description" : "Only return deployments with a name like the given name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Only return deployments with the given category.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "categoryNotEquals",
          "in" : "query",
          "description" : "Only return deployments which don’t have the given category.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tenantId",
          "in" : "query",
          "description" : "Only return deployments with the given tenantId.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tenantIdLike",
          "in" : "query",
          "description" : "Only return deployments with a tenantId like the given value.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withoutTenantId",
          "in" : "query",
          "description" : "If true, only returns deployments without a tenantId set. If false, the withoutTenantId parameter is ignored.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Property to sort on, to be used together with the order.",
          "required" : false,
          "type" : "string",
          "enum" : [ "id", "name", "deployTime", "tenantId" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates the request was successful.",
            "schema" : {
              "$ref" : "#/definitions/DataResponse"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Deployment" ],
        "summary" : "Create a new deployment",
        "description" : "The request body should contain data of type multipart/form-data. There should be exactly one file in the request, any additional files will be ignored. The deployment name is the name of the file-field passed in. If multiple resources need to be deployed in a single deployment, compress the resources in a zip and make sure the file-name ends with .bar or .zip.\n\nAn additional parameter (form-field) can be passed in the request body with name tenantId. The value of this field will be used as the id of the tenant this deployment is done in.",
        "operationId" : "uploadDeployment",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "tenantId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates the deployment was created.",
            "schema" : {
              "$ref" : "#/definitions/DeploymentResponse"
            }
          },
          "400" : {
            "description" : "Indicates there was no content present in the request body or the content mime-type is not supported for deployment. The status-description contains additional information."
          }
        }
      }
    },
    "/repository/deployments/{deploymentId}" : {
      "get" : {
        "tags" : [ "Deployment" ],
        "summary" : "Get a deployment",
        "description" : "",
        "operationId" : "getDeployment",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "deploymentId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates the deployment was found and returned.",
            "schema" : {
              "$ref" : "#/definitions/DeploymentResponse"
            }
          },
          "404" : {
            "description" : "Indicates the requested deployment was not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "Deployment" ],
        "summary" : "Delete a deployment",
        "description" : "",
        "operationId" : "deleteDeployment",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "deploymentId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "cascade",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "204" : {
            "description" : "Indicates the deployment was found and has been deleted. Response-body is intentionally empty."
          },
          "404" : {
            "description" : "Indicates the requested deployment was not found."
          }
        }
      }
    },
    "/repository/deployments/{deploymentId}/resourcedata/{resourceId}" : {
      "get" : {
        "tags" : [ "Deployment" ],
        "summary" : "Get a deployment resource content",
        "description" : "The response body will contain the binary resource-content for the requested resource. The response content-type will be the same as the type returned in the resources mimeType property. Also, a content-disposition header is set, allowing browsers to download the file instead of displaying it.",
        "operationId" : "getDeploymentResourceData",
        "parameters" : [ {
          "name" : "deploymentId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "resourceId",
          "in" : "path",
          "description" : "The id of the resource to get. Make sure you URL-encode the resourceId in case it contains forward slashes. Eg: use diagrams%2Fmy-process.bpmn20.xml instead of diagrams/Fmy-process.bpmn20.xml.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates both deployment and resource have been found and the resource data has been returned.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "format" : "byte"
              }
            }
          },
          "404" : {
            "description" : "Indicates the requested deployment was not found or there is no resource with the given id present in the deployment. The status-description contains additional information."
          }
        }
      }
    },
    "/repository/deployments/{deploymentId}/resources" : {
      "get" : {
        "tags" : [ "Deployment" ],
        "summary" : "List resources in a deployment",
        "description" : "The dataUrl property in the resulting JSON for a single resource contains the actual URL to use for retrieving the binary resource.",
        "operationId" : "getDeploymentResources",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "deploymentId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates the deployment was found and the resource list has been returned.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/DeploymentResourceResponse"
              }
            }
          },
          "404" : {
            "description" : "Indicates the requested deployment was not found."
          }
        }
      }
    },
    "/repository/deployments/{deploymentId}/resources/**" : {
      "get" : {
        "tags" : [ "Deployment" ],
        "summary" : "Get a deployment resource",
        "description" : "Replace ** by ResourceId",
        "operationId" : "getDeploymentResource",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "deploymentId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates both deployment and resource have been found and the resource has been returned.",
            "schema" : {
              "$ref" : "#/definitions/DeploymentResourceResponse"
            }
          },
          "404" : {
            "description" : "Indicates the requested deployment was not found or there is no resource with the given id present in the deployment. The status-description contains additional information."
          }
        }
      }
    },
    "/repository/models" : {
      "get" : {
        "tags" : [ "Models" ],
        "summary" : "Get a list of models",
        "description" : "",
        "operationId" : "getModels",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "description" : "Only return models with the given version.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Only return models with the given category.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "categoryLike",
          "in" : "query",
          "description" : "Only return models with a category like the given name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "categoryNotEquals",
          "in" : "query",
          "description" : "Only return models which don’t have the given category.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Only return models with the given name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nameLike",
          "in" : "query",
          "description" : "Only return models with a name like the given name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "key",
          "in" : "query",
          "description" : "Only return models with the given key.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "deploymentId",
          "in" : "query",
          "description" : "Only return models with the given category.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "query",
          "description" : "Only return models with the given version.",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "latestVersion",
          "in" : "query",
          "description" : "If true, only return models which are the latest version. Best used in combination with key. If false is passed in as value, this is ignored and all versions are returned.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "deployed",
          "in" : "query",
          "description" : "If true, only deployed models are returned. If false, only undeployed models are returned (deploymentId is null).",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "tenantId",
          "in" : "query",
          "description" : "Only return models with the given tenantId.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "tenantIdLike",
          "in" : "query",
          "description" : "Only return models with a tenantId like the given value.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "withoutTenantId",
          "in" : "query",
          "description" : "If true, only returns models without a tenantId set. If false, the withoutTenantId parameter is ignored.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Property to sort on, to be used together with the order.",
          "required" : false,
          "type" : "string",
          "enum" : [ "id", "category", "createTime", "key", "lastUpdateTime", "name", "version", "tenantId" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates request was successful and the models are returned",
            "schema" : {
              "$ref" : "#/definitions/DataResponse"
            }
          },
          "400" : {
            "description" : "Indicates a parameter was passed in the wrong format. The status-message contains additional information."
          }
        }
      },
      "post" : {
        "tags" : [ "Models" ],
        "summary" : "Create a model",
        "description" : "All request values are optional. For example, you can only include the name attribute in the request body JSON-object, only setting the name of the model, leaving all other fields null.",
        "operationId" : "createModel",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ModelRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates the model was created.",
            "schema" : {
              "$ref" : "#/definitions/ModelResponse"
            }
          }
        }
      }
    },
    "/repository/models/{modelId}" : {
      "get" : {
        "tags" : [ "Models" ],
        "summary" : "Get a model",
        "description" : "",
        "operationId" : "getModel",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates the model was found and returned.",
            "schema" : {
              "$ref" : "#/definitions/ModelResponse"
            }
          },
          "404" : {
            "description" : "Indicates the requested model was not found."
          }
        }
      },
      "put" : {
        "tags" : [ "Models" ],
        "summary" : "Update a model",
        "description" : "All request values are optional. For example, you can only include the name attribute in the request body JSON-object, only updating the name of the model, leaving all other fields unaffected. When an attribute is explicitly included and is set to null, the model-value will be updated to null. Example: ```JSON \n{\"metaInfo\" : null}``` will clear the metaInfo of the model).",
        "operationId" : "updateModel",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ModelRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates the model was found and updated.",
            "schema" : {
              "$ref" : "#/definitions/ModelResponse"
            }
          },
          "404" : {
            "description" : "Indicates the requested model was not found."
          }
        }
      },
      "delete" : {
        "tags" : [ "Models" ],
        "summary" : "Delete a model",
        "description" : "",
        "operationId" : "deleteModel",
        "parameters" : [ {
          "name" : "modelId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Indicates the model was found and has been deleted. Response-body is intentionally empty."
          },
          "404" : {
            "description" : "Indicates the requested model was not found."
          }
        }
      }
    },
    "/repository/process-definitions" : {
      "get" : {
        "tags" : [ "Process Definitions" ],
        "summary" : "List of process definitions",
        "description" : "",
        "operationId" : "getProcessDefinitions",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "version",
          "in" : "query",
          "description" : "Only return process definitions with the given version.",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "name",
          "in" : "query",
          "description" : "Only return process definitions with the given name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nameLike",
          "in" : "query",
          "description" : "Only return process definitions with a name like the given name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "key",
          "in" : "query",
          "description" : "Only return process definitions with the given key.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "keyLike",
          "in" : "query",
          "description" : "Only return process definitions with a name like the given key.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceName",
          "in" : "query",
          "description" : "Only return process definitions with the given resource name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "resourceNameLike",
          "in" : "query",
          "description" : "Only return process definitions with a name like the given resource name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "category",
          "in" : "query",
          "description" : "Only return process definitions with the given category.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "categoryLike",
          "in" : "query",
          "description" : "Only return process definitions with a category like the given name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "categoryNotEquals",
          "in" : "query",
          "description" : "Only return process definitions which don’t have the given category.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "deploymentId",
          "in" : "query",
          "description" : "Only return process definitions with the given category.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "startableByUser",
          "in" : "query",
          "description" : "Only return process definitions which are part of a deployment with the given id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "latest",
          "in" : "query",
          "description" : "Only return the latest process definition versions. Can only be used together with key and keyLike parameters, using any other parameter will result in a 400-response.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "suspended",
          "in" : "query",
          "description" : "If true, only returns process definitions which are suspended. If false, only active process definitions (which are not suspended) are returned.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Property to sort on, to be used together with the order.",
          "required" : false,
          "type" : "string",
          "enum" : [ "name", "id", "key", "category", "deploymentId", "version" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates request was successful and the process-definitions are returned",
            "schema" : {
              "$ref" : "#/definitions/DataResponse"
            }
          },
          "400" : {
            "description" : "Indicates a parameter was passed in the wrong format or that latest is used with other parameters other than key and keyLike. The status-message contains additional information."
          }
        }
      }
    },
    "/repository/process-definitions/{processDefinitionId}" : {
      "get" : {
        "tags" : [ "Process Definitions" ],
        "summary" : "Get a process definition",
        "description" : "",
        "operationId" : "getProcessDefinition",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "processDefinitionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates request was successful and the process-definitions are returned",
            "schema" : {
              "$ref" : "#/definitions/ProcessDefinitionResponse"
            }
          },
          "404" : {
            "description" : "Indicates the requested process definition was not found."
          }
        }
      },
      "put" : {
        "tags" : [ "Process Definitions" ],
        "summary" : "Execute actions for a process definition (Update category, Suspend or Activate)",
        "description" : "## Update category for a process definition\n\n ```JSON\n{\n  \"category\" : \"updatedcategory\"\n} ```\n\n\n## Suspend a process definition\n\n```JSON\n {\n  \"action\" : \"suspend\",\n  \"includeProcessInstances\" : \"false\",\n  \"date\" : \"2013-04-15T00:42:12Z\"\n} ```\n\n\n## Activate a process definition\n\n```JSON\n {\n  \"action\" : \"activate\",\n  \"includeProcessInstances\" : \"true\",\n  \"date\" : \"2013-04-15T00:42:12Z\"\n} ```",
        "operationId" : "executeProcessDefinitionAction",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "processDefinitionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ProcessDefinitionActionRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates action has been executed for the specified process. (category altered, activate or suspend)",
            "schema" : {
              "$ref" : "#/definitions/ProcessDefinitionResponse"
            }
          },
          "400" : {
            "description" : "Indicates no category was defined in the request body."
          },
          "404" : {
            "description" : "Indicates the requested process definition was not found."
          },
          "409" : {
            "description" : "Indicates the requested process definition is already suspended or active."
          }
        }
      }
    },
    "/repository/process-definitions/{processDefinitionId}/decision-tables" : {
      "get" : {
        "tags" : [ "Process Definitions" ],
        "summary" : "Get all decision tables for a process-definition",
        "description" : "",
        "operationId" : "getDecisionTablesForProcessDefinition",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "processDefinitionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates the process definition was found and the decision tables are returned.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/DecisionTable"
              }
            }
          },
          "404" : {
            "description" : "Indicates the requested process definition was not found."
          }
        }
      }
    },
    "/repository/process-definitions/{processDefinitionId}/form-definitions" : {
      "get" : {
        "tags" : [ "Process Definitions" ],
        "summary" : "Get all form definitions for a process-definition",
        "description" : "",
        "operationId" : "getFormDefinitionsForProcessDefinition",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "processDefinitionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates the process definition was found and the form definitions are returned.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/FormDefinition"
              }
            }
          },
          "404" : {
            "description" : "Indicates the requested process definition was not found."
          }
        }
      }
    },
    "/repository/process-definitions/{processDefinitionId}/identitylinks" : {
      "get" : {
        "tags" : [ "Process Definitions" ],
        "summary" : "Get all candidate starters for a process-definition",
        "description" : "",
        "operationId" : "getIdentityLinks",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "processDefinitionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates the process definition was found and the requested identity links are returned.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/RestIdentityLink"
              }
            }
          },
          "404" : {
            "description" : "Indicates the requested process definition was not found."
          }
        }
      },
      "post" : {
        "tags" : [ "Process Definitions" ],
        "summary" : "Add a candidate starter to a process definition",
        "description" : "## For a User\n\n ```JSON\n{\n  \"user\" : \"kermit\"\n} ```\n\n## For a Group\n\n ```JSON\n{\n  \"groupId\" : \"sales\"\n} ```",
        "operationId" : "createIdentityLink",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "processDefinitionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/RestIdentityLink"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestIdentityLink"
            }
          },
          "201" : {
            "description" : "Indicates the process definition was found and the identity link was created."
          },
          "400" : {
            "description" : "Indicates the body doesn't contains the correct information."
          },
          "404" : {
            "description" : "Indicates the requested process definition was not found."
          }
        }
      }
    },
    "/repository/process-definitions/{processDefinitionId}/identitylinks/{family}/{identityId}" : {
      "get" : {
        "tags" : [ "Process Definitions" ],
        "summary" : "Get a candidate starter from a process definition",
        "description" : "",
        "operationId" : "getIdentityLink",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "processDefinitionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "family",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "identityId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RestIdentityLink"
            }
          },
          "204" : {
            "description" : "Indicates the process definition was found and the identity link was returned."
          },
          "404" : {
            "description" : "Indicates the requested process definition was not found or the process definition doesn’t have an identity-link that matches the url."
          }
        }
      },
      "delete" : {
        "tags" : [ "Process Definitions" ],
        "summary" : "Delete a candidate starter from a process definition",
        "description" : "",
        "operationId" : "deleteIdentityLink",
        "parameters" : [ {
          "name" : "processDefinitionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "family",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "identityId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Indicates the process definition was found and the identity link was removed. The response body is intentionally empty."
          },
          "404" : {
            "description" : "Indicates the requested process definition was not found or the process definition doesn’t have an identity-link that matches the url."
          }
        }
      }
    },
    "/repository/process-definitions/{processDefinitionId}/image" : {
      "get" : {
        "tags" : [ "Process Definitions" ],
        "summary" : "Get a process definition image",
        "description" : "",
        "operationId" : "getModelResource",
        "parameters" : [ {
          "name" : "processDefinitionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates request was successful and the process-definitions are returned",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "format" : "byte"
              }
            }
          },
          "404" : {
            "description" : "Indicates the requested process definition was not found."
          }
        }
      }
    },
    "/repository/process-definitions/{processDefinitionId}/model" : {
      "get" : {
        "tags" : [ "Process Definitions" ],
        "summary" : "Get a process definition BPMN model",
        "description" : "",
        "operationId" : "getBpmnModelResource",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "processDefinitionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates the process definition was found and the model is returned. The response contains the full process definition model.",
            "schema" : {
              "$ref" : "#/definitions/BpmnModel"
            }
          },
          "404" : {
            "description" : "Indicates the requested process definition was not found."
          }
        }
      }
    },
    "/repository/process-definitions/{processDefinitionId}/resourcedata" : {
      "get" : {
        "tags" : [ "Process Definitions" ],
        "summary" : "Get a process definition resource content",
        "description" : "",
        "operationId" : "getProcessDefinitionResource",
        "parameters" : [ {
          "name" : "processDefinitionId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Indicates both process definition and resource have been found and the resource data has been returned.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "format" : "byte"
              }
            }
          },
          "404" : {
            "description" : "Indicates the requested process definition was not found or there is no resource with the given id present in the process definition. The status-description contains additional information."
          }
        }
      }
    }
  },
  "securityDefinitions" : {
    "basicAuth" : {
      "type" : "basic"
    }
  },
  "definitions" : {
    "ActivitiListener" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "xmlRowNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "xmlColumnNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "extensionElements" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionElement"
            }
          }
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionAttribute"
            }
          }
        },
        "event" : {
          "type" : "string"
        },
        "implementationType" : {
          "type" : "string"
        },
        "implementation" : {
          "type" : "string"
        },
        "fieldExtensions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FieldExtension"
          }
        },
        "onTransaction" : {
          "type" : "string"
        },
        "customPropertiesResolverImplementationType" : {
          "type" : "string"
        },
        "customPropertiesResolverImplementation" : {
          "type" : "string"
        }
      }
    },
    "Artifact" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "xmlRowNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "xmlColumnNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "extensionElements" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionElement"
            }
          }
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionAttribute"
            }
          }
        }
      }
    },
    "BaseElement" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "xmlRowNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "xmlColumnNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "extensionElements" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionElement"
            }
          }
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionAttribute"
            }
          }
        }
      }
    },
    "BpmnModel" : {
      "type" : "object",
      "properties" : {
        "definitionsAttributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionAttribute"
            }
          }
        },
        "processes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Process"
          }
        },
        "locationMap" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/GraphicInfo"
          }
        },
        "labelLocationMap" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/GraphicInfo"
          }
        },
        "flowLocationMap" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/GraphicInfo"
            }
          }
        },
        "signals" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Signal"
          }
        },
        "pools" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Pool"
          }
        },
        "imports" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Import"
          }
        },
        "interfaces" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Interface"
          }
        },
        "globalArtifacts" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Artifact"
          }
        },
        "resources" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Resource"
          }
        },
        "targetNamespace" : {
          "type" : "string"
        },
        "sourceSystemId" : {
          "type" : "string"
        },
        "userTaskFormTypes" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "startEventFormTypes" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "messages" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Message"
          }
        },
        "errors" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "mainProcess" : {
          "$ref" : "#/definitions/Process"
        },
        "messageFlows" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/MessageFlow"
          }
        },
        "itemDefinitions" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/ItemDefinition"
          }
        },
        "dataStores" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/DataStore"
          }
        },
        "namespaces" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "DataResponse" : {
      "type" : "object",
      "properties" : {
        "data" : {
          "type" : "object"
        },
        "total" : {
          "type" : "integer",
          "format" : "int64"
        },
        "start" : {
          "type" : "integer",
          "format" : "int32"
        },
        "sort" : {
          "type" : "string"
        },
        "order" : {
          "type" : "string"
        },
        "size" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "DataSpec" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "xmlRowNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "xmlColumnNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "extensionElements" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionElement"
            }
          }
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionAttribute"
            }
          }
        },
        "name" : {
          "type" : "string"
        },
        "itemSubjectRef" : {
          "type" : "string"
        },
        "collection" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "DataStore" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "xmlRowNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "xmlColumnNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "extensionElements" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionElement"
            }
          }
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionAttribute"
            }
          }
        },
        "name" : {
          "type" : "string"
        },
        "dataState" : {
          "type" : "string"
        },
        "itemSubjectRef" : {
          "type" : "string"
        }
      }
    },
    "DecisionTable" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "key" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "resourceName" : {
          "type" : "string"
        },
        "parentDeploymentId" : {
          "type" : "string"
        },
        "deploymentId" : {
          "type" : "string"
        },
        "category" : {
          "type" : "string"
        },
        "tenantId" : {
          "type" : "string"
        },
        "version" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "DeploymentResourceResponse" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "url" : {
          "type" : "string"
        },
        "contentUrl" : {
          "type" : "string"
        },
        "mediaType" : {
          "type" : "string",
          "description" : "Contains the media-type the resource has. This is resolved using a (pluggable) MediaTypeResolver and contains, by default, a limited number of mime-type mappings."
        },
        "type" : {
          "type" : "string",
          "description" : "Type of resource",
          "enum" : [ "resource", "processDefinition", "processImage" ]
        }
      }
    },
    "DeploymentResponse" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "deploymentTime" : {
          "type" : "string",
          "format" : "date-time"
        },
        "category" : {
          "type" : "string"
        },
        "url" : {
          "type" : "string"
        },
        "tenantId" : {
          "type" : "string"
        }
      }
    },
    "EventListener" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "xmlRowNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "xmlColumnNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "extensionElements" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionElement"
            }
          }
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionAttribute"
            }
          }
        },
        "events" : {
          "type" : "string"
        },
        "implementationType" : {
          "type" : "string"
        },
        "implementation" : {
          "type" : "string"
        },
        "entityType" : {
          "type" : "string"
        }
      }
    },
    "ExtensionAttribute" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        },
        "namespacePrefix" : {
          "type" : "string"
        },
        "namespace" : {
          "type" : "string"
        }
      }
    },
    "ExtensionElement" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "xmlRowNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "xmlColumnNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "extensionElements" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionElement"
            }
          }
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionAttribute"
            }
          }
        },
        "name" : {
          "type" : "string"
        },
        "namespacePrefix" : {
          "type" : "string"
        },
        "namespace" : {
          "type" : "string"
        },
        "elementText" : {
          "type" : "string"
        },
        "childElements" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionElement"
            }
          }
        }
      }
    },
    "FieldExtension" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "xmlRowNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "xmlColumnNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "extensionElements" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionElement"
            }
          }
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionAttribute"
            }
          }
        },
        "fieldName" : {
          "type" : "string"
        },
        "stringValue" : {
          "type" : "string"
        },
        "expression" : {
          "type" : "string"
        }
      }
    },
    "FlowElement" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "xmlRowNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "xmlColumnNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "extensionElements" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionElement"
            }
          }
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionAttribute"
            }
          }
        },
        "name" : {
          "type" : "string"
        },
        "documentation" : {
          "type" : "string"
        },
        "executionListeners" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ActivitiListener"
          }
        }
      }
    },
    "FormDefinition" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "key" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "resourceName" : {
          "type" : "string"
        },
        "parentDeploymentId" : {
          "type" : "string"
        },
        "deploymentId" : {
          "type" : "string"
        },
        "category" : {
          "type" : "string"
        },
        "tenantId" : {
          "type" : "string"
        },
        "version" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "GraphicInfo" : {
      "type" : "object",
      "properties" : {
        "x" : {
          "type" : "number",
          "format" : "double"
        },
        "y" : {
          "type" : "number",
          "format" : "double"
        },
        "height" : {
          "type" : "number",
          "format" : "double"
        },
        "width" : {
          "type" : "number",
          "format" : "double"
        },
        "element" : {
          "$ref" : "#/definitions/BaseElement"
        },
        "expanded" : {
          "type" : "boolean",
          "default" : false
        },
        "xmlRowNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "xmlColumnNumber" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "IOSpecification" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "xmlRowNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "xmlColumnNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "extensionElements" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionElement"
            }
          }
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionAttribute"
            }
          }
        },
        "dataInputs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DataSpec"
          }
        },
        "dataOutputs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DataSpec"
          }
        },
        "dataInputRefs" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "dataOutputRefs" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "Import" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "xmlRowNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "xmlColumnNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "extensionElements" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionElement"
            }
          }
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionAttribute"
            }
          }
        },
        "importType" : {
          "type" : "string"
        },
        "location" : {
          "type" : "string"
        },
        "namespace" : {
          "type" : "string"
        }
      }
    },
    "Interface" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "xmlRowNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "xmlColumnNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "extensionElements" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionElement"
            }
          }
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionAttribute"
            }
          }
        },
        "name" : {
          "type" : "string"
        },
        "implementationRef" : {
          "type" : "string"
        },
        "operations" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Operation"
          }
        }
      }
    },
    "ItemDefinition" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "xmlRowNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "xmlColumnNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "extensionElements" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionElement"
            }
          }
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionAttribute"
            }
          }
        },
        "structureRef" : {
          "type" : "string"
        },
        "itemKind" : {
          "type" : "string"
        }
      }
    },
    "Lane" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "xmlRowNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "xmlColumnNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "extensionElements" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionElement"
            }
          }
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionAttribute"
            }
          }
        },
        "name" : {
          "type" : "string"
        },
        "parentProcess" : {
          "$ref" : "#/definitions/Process"
        },
        "flowReferences" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "Message" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "xmlRowNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "xmlColumnNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "extensionElements" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionElement"
            }
          }
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionAttribute"
            }
          }
        },
        "name" : {
          "type" : "string"
        },
        "itemRef" : {
          "type" : "string"
        }
      }
    },
    "MessageFlow" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "xmlRowNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "xmlColumnNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "extensionElements" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionElement"
            }
          }
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionAttribute"
            }
          }
        },
        "name" : {
          "type" : "string"
        },
        "sourceRef" : {
          "type" : "string"
        },
        "targetRef" : {
          "type" : "string"
        },
        "messageRef" : {
          "type" : "string"
        }
      }
    },
    "ModelRequest" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "key" : {
          "type" : "string"
        },
        "category" : {
          "type" : "string"
        },
        "version" : {
          "type" : "integer",
          "format" : "int32"
        },
        "metaInfo" : {
          "type" : "string"
        },
        "deploymentId" : {
          "type" : "string"
        },
        "tenantId" : {
          "type" : "string"
        }
      }
    },
    "ModelResponse" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "key" : {
          "type" : "string"
        },
        "category" : {
          "type" : "string"
        },
        "version" : {
          "type" : "integer",
          "format" : "int32"
        },
        "metaInfo" : {
          "type" : "string"
        },
        "deploymentId" : {
          "type" : "string"
        },
        "tenantId" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        },
        "url" : {
          "type" : "string"
        },
        "createTime" : {
          "type" : "string",
          "format" : "date-time"
        },
        "lastUpdateTime" : {
          "type" : "string",
          "format" : "date-time"
        },
        "deploymentUrl" : {
          "type" : "string"
        },
        "sourceUrl" : {
          "type" : "string"
        },
        "sourceExtraUrl" : {
          "type" : "string"
        }
      }
    },
    "Operation" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "xmlRowNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "xmlColumnNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "extensionElements" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionElement"
            }
          }
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionAttribute"
            }
          }
        },
        "name" : {
          "type" : "string"
        },
        "implementationRef" : {
          "type" : "string"
        },
        "inMessageRef" : {
          "type" : "string"
        },
        "outMessageRef" : {
          "type" : "string"
        },
        "errorMessageRef" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "Pool" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "xmlRowNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "xmlColumnNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "extensionElements" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionElement"
            }
          }
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionAttribute"
            }
          }
        },
        "name" : {
          "type" : "string"
        },
        "processRef" : {
          "type" : "string"
        },
        "executable" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "Process" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "xmlRowNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "xmlColumnNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "extensionElements" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionElement"
            }
          }
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionAttribute"
            }
          }
        },
        "name" : {
          "type" : "string"
        },
        "executable" : {
          "type" : "boolean",
          "default" : false
        },
        "documentation" : {
          "type" : "string"
        },
        "ioSpecification" : {
          "$ref" : "#/definitions/IOSpecification"
        },
        "executionListeners" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ActivitiListener"
          }
        },
        "lanes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Lane"
          }
        },
        "dataObjects" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ValuedDataObject"
          }
        },
        "candidateStarterUsers" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "candidateStarterGroups" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "eventListeners" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/EventListener"
          }
        },
        "flowElementMap" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/FlowElement"
          }
        },
        "initialFlowElement" : {
          "$ref" : "#/definitions/FlowElement"
        },
        "artifacts" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Artifact"
          }
        },
        "flowElements" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FlowElement"
          }
        }
      }
    },
    "ProcessDefinitionActionRequest" : {
      "type" : "object",
      "properties" : {
        "action" : {
          "type" : "string",
          "description" : "Action to perform"
        },
        "includeProcessInstances" : {
          "type" : "boolean",
          "description" : "Whether or not to suspend/activate running process-instances for this process-definition. If omitted, the process-instances are left in the state they are",
          "default" : false
        },
        "date" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date (ISO-8601) when the suspension/activation should be executed. If omitted, the suspend/activation is effective immediately."
        },
        "category" : {
          "type" : "string"
        }
      }
    },
    "ProcessDefinitionResponse" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "url" : {
          "type" : "string"
        },
        "key" : {
          "type" : "string"
        },
        "version" : {
          "type" : "integer",
          "format" : "int32"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "tenantId" : {
          "type" : "string"
        },
        "deploymentId" : {
          "type" : "string"
        },
        "deploymentUrl" : {
          "type" : "string"
        },
        "resource" : {
          "type" : "string",
          "description" : "Contains the actual deployed BPMN 2.0 xml."
        },
        "diagramResource" : {
          "type" : "string",
          "description" : "Contains a graphical representation of the process, null when no diagram is available."
        },
        "category" : {
          "type" : "string"
        },
        "graphicalNotationDefined" : {
          "type" : "boolean",
          "description" : "Indicates the process definition contains graphical information (BPMN DI).",
          "default" : false
        },
        "suspended" : {
          "type" : "boolean",
          "default" : false
        },
        "startFormDefined" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "Resource" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "xmlRowNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "xmlColumnNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "extensionElements" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionElement"
            }
          }
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionAttribute"
            }
          }
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "RestIdentityLink" : {
      "type" : "object",
      "properties" : {
        "url" : {
          "type" : "string"
        },
        "user" : {
          "type" : "string"
        },
        "group" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        }
      }
    },
    "Signal" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "xmlRowNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "xmlColumnNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "extensionElements" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionElement"
            }
          }
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionAttribute"
            }
          }
        },
        "name" : {
          "type" : "string"
        },
        "scope" : {
          "type" : "string"
        }
      }
    },
    "ValuedDataObject" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "xmlRowNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "xmlColumnNumber" : {
          "type" : "integer",
          "format" : "int32"
        },
        "extensionElements" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionElement"
            }
          }
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ExtensionAttribute"
            }
          }
        },
        "name" : {
          "type" : "string"
        },
        "documentation" : {
          "type" : "string"
        },
        "executionListeners" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ActivitiListener"
          }
        },
        "itemSubjectRef" : {
          "$ref" : "#/definitions/ItemDefinition"
        },
        "value" : {
          "type" : "object"
        },
        "type" : {
          "type" : "string"
        }
      }
    }
  }
}