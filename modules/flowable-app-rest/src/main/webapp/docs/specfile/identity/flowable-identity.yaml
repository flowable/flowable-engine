---
swagger: "2.0"
info:
  description: "# flowable / flowəb(ə)l /\r\n\r\n- a compact and highly efficient\
    \ workflow and Business Process Management (BPM) platform for developers, system\
    \ admins and business users.\r\n- a lightning fast, tried and tested BPMN 2 process\
    \ engine written in Java. It is Apache 2.0 licensed open source, with a committed\
    \ community.\r\n- can run embedded in a Java application, or as a service on a\
    \ server, a cluster, and in the cloud. It integrates perfectly with Spring. With\
    \ a rich Java and REST API, it is the ideal engine for orchestrating human or\
    \ system activities."
  version: "v1"
  title: "Flowable REST API"
  contact:
    name: "Flowable"
    url: "http://www.flowable.org/"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/flowable-rest/service"
tags:
- name: "Groups"
- name: "Users"
schemes:
- "http"
- "https"
paths:
  /identity/groups:
    get:
      tags:
      - "Groups"
      summary: "Get a list of groups"
      description: ""
      operationId: "getGroups"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        description: "Only return group with the given id"
        required: false
        type: "string"
      - name: "name"
        in: "query"
        description: "Only return groups with the given name"
        required: false
        type: "string"
      - name: "type"
        in: "query"
        description: "Only return groups with the given type"
        required: false
        type: "string"
      - name: "nameLike"
        in: "query"
        description: "Only return groups with a name like the given value. Use % as\
          \ wildcard-character."
        required: false
        type: "string"
      - name: "member"
        in: "query"
        description: "Only return groups which have a member with the given username."
        required: false
        type: "string"
      - name: "potentialStarter"
        in: "query"
        description: "Only return groups which members are potential starters for\
          \ a process-definition with the given id."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "Property to sort on, to be used together with the order."
        required: false
        type: "string"
        enum:
        - "id"
        - "name"
        - "type"
      responses:
        200:
          description: "Indicates the requested groups were returned."
          schema:
            $ref: "#/definitions/DataResponse"
    post:
      tags:
      - "Groups"
      summary: "Create a group"
      description: ""
      operationId: "createGroup"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/GroupRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GroupResponse"
        201:
          description: "Indicates the group was created."
        400:
          description: "Indicates the id of the group was missing."
  /identity/groups/{groupId}:
    get:
      tags:
      - "Groups"
      summary: "Get a single group"
      description: ""
      operationId: "getGroup"
      produces:
      - "application/json"
      parameters:
      - name: "groupId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Indicates the group exists and is returned."
          schema:
            $ref: "#/definitions/GroupResponse"
        404:
          description: "Indicates the requested group does not exist."
    put:
      tags:
      - "Groups"
      summary: "Update a group"
      description: "All request values are optional. For example, you can only include\
        \ the name attribute in the request body JSON-object, only updating the name\
        \ of the group, leaving all other fields unaffected. When an attribute is\
        \ explicitly included and is set to null, the group-value will be updated\
        \ to null."
      operationId: "updateGroup"
      produces:
      - "application/json"
      parameters:
      - name: "groupId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/GroupRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/GroupResponse"
        201:
          description: "Indicates the group was updated."
        404:
          description: "Indicates the requested group was not found."
        409:
          description: "Indicates the requested group was updated simultaneously."
    delete:
      tags:
      - "Groups"
      summary: "Delete a group"
      description: ""
      operationId: "deleteGroup"
      parameters:
      - name: "groupId"
        in: "path"
        required: true
        type: "string"
      responses:
        204:
          description: "Indicates the group was found and  has been deleted. Response-body\
            \ is intentionally empty."
        404:
          description: "Indicates the requested group does not exist."
  /identity/groups/{groupId}/members:
    post:
      tags:
      - "Groups"
      summary: "Add a member to a group"
      description: ""
      operationId: "createMembership"
      produces:
      - "application/json"
      parameters:
      - name: "groupId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/MembershipRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/MembershipResponse"
        201:
          description: "Indicates the group was found and the member has been added."
        400:
          description: "Indicates the userId was not included in the request body."
        404:
          description: "Indicates the requested group was not found."
        409:
          description: "Indicates the requested user is already a member of the group."
  /identity/groups/{groupId}/members/{userId}:
    delete:
      tags:
      - "Groups"
      summary: "Delete a member from a group"
      description: ""
      operationId: "deleteMembership"
      parameters:
      - name: "groupId"
        in: "path"
        required: true
        type: "string"
      - name: "userId"
        in: "path"
        required: true
        type: "string"
      responses:
        204:
          description: "Indicates the group was found and the member has been deleted.\
            \ The response body is left empty intentionally."
        404:
          description: "Indicates the requested group was not found or that the user\
            \ is not a member of the group. The status description contains additional\
            \ information about the error."
  /identity/users:
    get:
      tags:
      - "Users"
      summary: "Get a list of users"
      description: ""
      operationId: "getUsers"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        description: "Only return group with the given id"
        required: false
        type: "string"
      - name: "firstName"
        in: "query"
        description: "Only return users with the given firstname"
        required: false
        type: "string"
      - name: "lastName"
        in: "query"
        description: "Only return users with the given lastname"
        required: false
        type: "string"
      - name: "email"
        in: "query"
        description: "Only return users with the given email"
        required: false
        type: "string"
      - name: "firstNameLike"
        in: "query"
        description: "Only return userswith a firstname like the given value. Use\
          \ % as wildcard-character."
        required: false
        type: "string"
      - name: "lastNameLike"
        in: "query"
        description: "Only return users with a lastname like the given value. Use\
          \ % as wildcard-character."
        required: false
        type: "string"
      - name: "emailLike"
        in: "query"
        description: "Only return users with an email like the given value. Use %\
          \ as wildcard-character."
        required: false
        type: "string"
      - name: "memberOfGroup"
        in: "query"
        description: "Only return users which are a member of the given group."
        required: false
        type: "string"
      - name: "potentialStarter"
        in: "query"
        description: "Only return users  which members are potential starters for\
          \ a process-definition with the given id."
        required: false
        type: "string"
      - name: "sort"
        in: "query"
        description: "Property to sort on, to be used together with the order."
        required: false
        type: "string"
        enum:
        - "id"
        - "firstName"
        - "lastname"
        - "email"
      responses:
        200:
          description: "Indicates the group exists and is returned."
          schema:
            $ref: "#/definitions/DataResponse"
    post:
      tags:
      - "Users"
      summary: "Create a user"
      description: ""
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UserRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserResponse"
        201:
          description: "Indicates the user was created."
        400:
          description: "Indicates the id of the user was missing."
  /identity/users/{userId}:
    get:
      tags:
      - "Users"
      summary: "Get a single user"
      description: ""
      operationId: "getUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Indicates the user exists and is returned."
          schema:
            $ref: "#/definitions/UserResponse"
        404:
          description: "Indicates the requested user does not exist."
    put:
      tags:
      - "Users"
      summary: "Update a user"
      description: "All request values are optional. For example, you can only include\
        \ the firstName attribute in the request body JSON-object, only updating the\
        \ firstName of the user, leaving all other fields unaffected. When an attribute\
        \ is explicitly included and is set to null, the user-value will be updated\
        \ to null. Example: {\"firstName\" : null} will clear the firstName of the\
        \ user)."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UserRequest"
      responses:
        200:
          description: "Indicates the user was updated."
          schema:
            $ref: "#/definitions/UserResponse"
        404:
          description: "Indicates the requested user was not found."
        409:
          description: "Indicates the requested user was updated simultaneously."
    delete:
      tags:
      - "Users"
      summary: "Delete a user"
      description: ""
      operationId: "deleteUser"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        type: "string"
      responses:
        204:
          description: "Indicates the user was found and  has been deleted. Response-body\
            \ is intentionally empty."
        404:
          description: "Indicates the requested user was not found."
  /identity/users/{userId}/info:
    get:
      tags:
      - "Users"
      summary: "List a user’s info"
      description: ""
      operationId: "listUsersInfo"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Indicates the user was found and list of info (key and url)\
            \ is returned."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserInfoResponse"
        404:
          description: "Indicates the requested user was not found."
    post:
      tags:
      - "Users"
      summary: "Create a new user’s info entry"
      description: ""
      operationId: "createUserInfo"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UserInfoRequest"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserInfoResponse"
        201:
          description: "Indicates the user was found and the info has been created."
        400:
          description: "Indicates the key or value was missing from the request body.\
            \ Status description contains additional information about the error."
        404:
          description: "Indicates the requested user was not found."
        409:
          description: "Indicates there is already an info-entry with the given key\
            \ for the user, update the resource instance (PUT)."
  /identity/users/{userId}/info/{key}:
    get:
      tags:
      - "Users"
      summary: "Get a user’s info"
      description: ""
      operationId: "getUserInfo"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        type: "string"
      - name: "key"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Indicates the user was found and the user has info for the\
            \ given key."
          schema:
            $ref: "#/definitions/UserInfoResponse"
        404:
          description: "Indicates the requested user was not found or the user doesn’\
            t have info for the given key. Status description contains additional\
            \ information about the error."
    put:
      tags:
      - "Users"
      summary: "Update a user’s info"
      description: ""
      operationId: "updateUserInfo"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        type: "string"
      - name: "key"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/UserInfoRequest"
      responses:
        200:
          description: "Indicates the user was found and the info has been updated."
          schema:
            $ref: "#/definitions/UserInfoResponse"
        400:
          description: "Indicates the value was missing from the request body."
        404:
          description: "Indicates the requested user was not found or the user doesn’\
            t have info for the given key. Status description contains additional\
            \ information about the error."
    delete:
      tags:
      - "Users"
      summary: "Delete a user’s info"
      description: ""
      operationId: "deleteUserInfo"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        type: "string"
      - name: "key"
        in: "path"
        required: true
        type: "string"
      responses:
        204:
          description: "Indicates the user was found and the info for the given key\
            \ has been deleted. Response body is left empty intentionally."
        404:
          description: "Indicates the requested user was not found or the user doesn’\
            t have info for the given key. Status description contains additional\
            \ information about the error."
  /identity/users/{userId}/picture:
    get:
      tags:
      - "Users"
      summary: "Get a user’s picture"
      description: "The response body contains the raw picture data, representing\
        \ the user’s picture. The Content-type of the response corresponds to the\
        \ mimeType that was set when creating the picture."
      operationId: "getUserPicture"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Indicates the user was found and has a picture, which is returned\
            \ in the body."
          schema:
            type: "array"
            items:
              type: "string"
              format: "byte"
        404:
          description: "Indicates the requested user was not found or the user does\
            \ not have a profile picture. Status-description contains additional information\
            \ about the error."
    put:
      tags:
      - "Users"
      summary: "Updating a user’s picture"
      description: "The request should be of type multipart/form-data. There should\
        \ be a single file-part included with the binary value of the picture. On\
        \ top of that, the following additional form-fields can be present:\n\nmimeType:\
        \ Optional mime-type for the uploaded picture. If omitted, the default of\
        \ image/jpeg is used as a mime-type for the picture."
      operationId: "updateUserPicture"
      parameters:
      - name: "userId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Indicates the user was found and the picture has been updated.\
            \ The response-body is left empty intentionally."
        404:
          description: "Indicates the requested user was not found."
securityDefinitions:
  basicAuth:
    type: "basic"
definitions:
  DataResponse:
    type: "object"
    properties:
      data:
        type: "object"
      total:
        type: "integer"
        format: "int64"
      start:
        type: "integer"
        format: "int32"
      sort:
        type: "string"
      order:
        type: "string"
      size:
        type: "integer"
        format: "int32"
  GroupRequest:
    type: "object"
    properties:
      id:
        type: "string"
      url:
        type: "string"
      name:
        type: "string"
      type:
        type: "string"
      nameChanged:
        type: "boolean"
        default: false
      typeChanged:
        type: "boolean"
        default: false
  GroupResponse:
    type: "object"
    properties:
      id:
        type: "string"
      url:
        type: "string"
      name:
        type: "string"
      type:
        type: "string"
  MembershipRequest:
    type: "object"
    properties:
      userId:
        type: "string"
  MembershipResponse:
    type: "object"
    properties:
      userId:
        type: "string"
      url:
        type: "string"
      groupId:
        type: "string"
  UserInfoRequest:
    type: "object"
    properties:
      key:
        type: "string"
      value:
        type: "string"
  UserInfoResponse:
    type: "object"
    properties:
      key:
        type: "string"
      value:
        type: "string"
      url:
        type: "string"
  UserRequest:
    type: "object"
    properties:
      id:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      url:
        type: "string"
      email:
        type: "string"
      pictureUrl:
        type: "string"
      password:
        type: "string"
  UserResponse:
    type: "object"
    properties:
      id:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      url:
        type: "string"
      email:
        type: "string"
      pictureUrl:
        type: "string"
      password:
        type: "string"
