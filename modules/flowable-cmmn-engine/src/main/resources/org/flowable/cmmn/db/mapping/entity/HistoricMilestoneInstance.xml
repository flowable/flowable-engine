<?xml version="1.0" encoding="UTF-8" ?> 

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
  
<mapper namespace="org.flowable.cmmn.engine.impl.persistence.entity.HistoricMilestoneInstanceEntityImpl">

    <insert id="insertHistoricMilestoneInstance" parameterType="org.flowable.cmmn.engine.impl.persistence.entity.HistoricMilestoneInstanceEntityImpl">
        insert into ${prefix}ACT_CMMN_HI_MIL_INST (ID_, REV_, NAME_, TIME_STAMP_, CASE_INST_ID_, CASE_DEF_ID_, ELEMENT_ID_, TENANT_ID_) 
        values (
            #{id, jdbcType=VARCHAR},
            1, #{name, jdbcType=NVARCHAR},
            #{timeStamp, jdbcType=TIMESTAMP},
            #{caseInstanceId, jdbcType=VARCHAR},
            #{caseDefinitionId, jdbcType=VARCHAR},
            #{elementId, jdbcType=VARCHAR},
            #{tenantId, jdbcType=VARCHAR}
        )
        
    </insert>
    
  <insert id="bulkInsertHistoricMilestoneInstance" parameterType="java.util.List">
    insert into ${prefix}ACT_CMMN_HI_MIL_INST (ID_, REV_, NAME_, TIME_STAMP_, CASE_INST_ID_, CASE_DEF_ID_, ELEMENT_ID_, TENANT_ID_) 
    values 
      <foreach collection="list" item="historicMilestoneInstance" index="index" separator=",">
        (
            #{historicMilestoneInstance.id, jdbcType=VARCHAR},
            1, #{historicMilestoneInstance.name, jdbcType=NVARCHAR},
            #{historicMilestoneInstance.timeStamp, jdbcType=TIMESTAMP},
            #{historicMilestoneInstance.caseInstanceId, jdbcType=VARCHAR},
            #{historicMilestoneInstance.caseDefinitionId, jdbcType=VARCHAR},
            #{historicMilestoneInstance.elementId, jdbcType=VARCHAR},
            #{historicMilestoneInstance.tenantId, jdbcType=VARCHAR}
        )
      </foreach>
  </insert>

  <insert id="bulkInsertHistoricMilestoneInstance" databaseId="oracle" parameterType="java.util.List">
    INSERT ALL 
      <foreach collection="list" item="historicMilestoneInstance" index="index">
        into ${prefix}ACT_CMMN_HI_MIL_INST (ID_, REV_, NAME_, TIME_STAMP_, CASE_INST_ID_, CASE_DEF_ID_, ELEMENT_ID_, TENANT_ID_) VALUES
            (
                #{historicMilestoneInstance.id, jdbcType=VARCHAR},
                1, #{historicMilestoneInstance.name, jdbcType=NVARCHAR},
                #{historicMilestoneInstance.timeStamp, jdbcType=TIMESTAMP},
                #{historicMilestoneInstance.caseInstanceId, jdbcType=VARCHAR},
                #{historicMilestoneInstance.caseDefinitionId, jdbcType=VARCHAR},
                #{historicMilestoneInstance.elementId, jdbcType=VARCHAR},
                #{historicMilestoneInstance.tenantId, jdbcType=VARCHAR}
            )
      </foreach>
    SELECT * FROM dual
  </insert>

  <update id="updateHistoricMilestoneInstance" parameterType="org.flowable.cmmn.engine.impl.persistence.entity.HistoricMilestoneInstanceEntityImpl">
    update ${prefix}ACT_CMMN_HI_MIL_INST
    <set>
        REV_ = #{revisionNext, jdbcType=INTEGER}, 
        <if test="originalPersistentState.caseDefinitionId != caseDefinitionId">
            CASE_DEF_ID_ = #{caseDefinitionId, jdbcType=VARCHAR},
        </if>
        <if test="originalPersistentState.name != name">
            NAME_ = #{name, jdbcType=NVARCHAR},
        </if>
        <if test="originalPersistentState.elementId != elementId">
            ELEMENT_ID_ = #{elementId, jdbcType=VARCHAR},
        </if>
    </set>
    where ID_ = #{id, jdbcType=VARCHAR}
  </update>
  
  <delete id="deleteHistoricMilestoneInstance" parameterType="org.flowable.cmmn.engine.impl.persistence.entity.HistoricMilestoneInstanceEntityImpl">
    delete from ${prefix}ACT_CMMN_HI_MIL_INST where ID_ = #{id, jdbcType=VARCHAR} and REV_ = #{revision, jdbcType=INTEGER}
  </delete>
  
  <delete id="deleteHistoricMilestoneInstanceByCaseDefinitionId" parameterType="string">
    delete from ${prefix}ACT_CMMN_HI_MIL_INST where CASE_DEF_ID_ = #{caseDefinitionId, jdbcType=VARCHAR}
  </delete>
  
  <delete id="bulkDeleteHistoricMilestoneInstancesByCaseInstanceIds" parameterType="java.util.Collection">
    delete from ${prefix}ACT_CMMN_HI_MIL_INST where 
    <foreach item="listItem" index="listIndex" collection="collection">
        <if test="listIndex &gt; 0">
        or
        </if>
        CASE_INST_ID_ in
        <foreach item="caseInstanceId" index="index" collection="listItem" open="(" separator="," close=")">
          #{caseInstanceId, jdbcType=VARCHAR}
        </foreach>
    </foreach>
  </delete>
  
  <delete id="bulkDeleteHistoricMilestoneInstancesForNonExistingCaseInstances" parameterType="java.util.Map">
    delete <if test="_databaseId != 'postgres' and _databaseId != 'cockroachdb' and _databaseId != 'db2'"> MILINST </if> from ${prefix}ACT_CMMN_HI_MIL_INST MILINST where MILINST.CASE_INST_ID_ is not null and MILINST.CASE_INST_ID_ != '' and
    NOT EXISTS (select CASEINST.ID_ from ${prefix}ACT_CMMN_HI_CASE_INST CASEINST where MILINST.CASE_INST_ID_ = CASEINST.ID_)
  </delete>

  <delete id="bulkDeleteHistoricMilestoneInstancesForNonExistingCaseInstances" parameterType="java.util.Map" databaseId="oracle">
    delete from ${prefix}ACT_CMMN_HI_MIL_INST MILINST where MILINST.CASE_INST_ID_ is not null and
    NOT EXISTS (select CASEINST.ID_ from ${prefix}ACT_CMMN_HI_CASE_INST CASEINST where MILINST.CASE_INST_ID_ = CASEINST.ID_)
  </delete>

  <delete id="bulkDeleteHistoricMilestoneInstancesForNonExistingCaseInstances" databaseId="h2" parameterType="java.util.Map">
    delete from ${prefix}ACT_CMMN_HI_MIL_INST where CASE_INST_ID_ is not null and CASE_INST_ID_ != '' and
    CASE_INST_ID_ NOT IN (select CASEINST.ID_ from ${prefix}ACT_CMMN_HI_CASE_INST CASEINST)
  </delete>
  
  <resultMap id="historicMileStoneInstanceResultMap" type="org.flowable.cmmn.engine.impl.persistence.entity.HistoricMilestoneInstanceEntityImpl">
    <id property="id" column="ID_" jdbcType="VARCHAR" />
    <result property="revision" column="REV_" jdbcType="INTEGER" />
    <result property="name" column="NAME_" jdbcType="NVARCHAR" />
    <result property="timeStamp" column="TIME_STAMP_" jdbcType="TIMESTAMP" />
    <result property="caseInstanceId" column="CASE_INST_ID_" jdbcType="VARCHAR" />
    <result property="caseDefinitionId" column="CASE_DEF_ID_" jdbcType="VARCHAR" />
    <result property="elementId" column="ELEMENT_ID_" jdbcType="VARCHAR" />
    <result property="tenantId" column="TENANT_ID_" jdbcType="VARCHAR" />
  </resultMap>
  
  <select id="selectHistoricMilestoneInstance" parameterType="string" resultMap="historicMileStoneInstanceResultMap">
      select * from ${prefix}ACT_CMMN_HI_MIL_INST where ID_ = #{id, jdbcType=VARCHAR}
  </select>
  
  <select id="selectHistoricMilestoneInstancesByQueryCriteria" parameterType="org.flowable.cmmn.engine.impl.history.HistoricMilestoneInstanceQueryImpl" resultMap="historicMileStoneInstanceResultMap">
        <if test="needsPaging">${limitBefore}</if>
        SELECT RES.* <if test="needsPaging">${limitBetween}</if>
        <include refid="selectHistoricMilestoneInstancesByQueryCriteriaSql"/>
        ${orderBy}
        <if test="needsPaging">${limitAfter}</if>
  </select>
  
  <select id="selectHistoricMilestoneInstanceCountByQueryCriteria" parameterType="org.flowable.cmmn.engine.impl.history.HistoricMilestoneInstanceQueryImpl" resultType="long">
        select count(RES.ID_)
        <include refid="selectHistoricMilestoneInstancesByQueryCriteriaSql"/>
  </select>
  
  <sql id="selectHistoricMilestoneInstancesByQueryCriteriaSql">
    from ${prefix}ACT_CMMN_HI_MIL_INST RES
    <where>
        <if test="id != null">
            RES.ID_ = #{id, jdbcType=VARCHAR}
        </if>
        <if test="name != null">
            RES.NAME_ = #{name, jdbcType=NVARCHAR}
        </if>
        <if test="caseInstanceId != null">
            and RES.CASE_INST_ID_ = #{caseInstanceId, jdbcType=VARCHAR}
        </if>
        <if test="caseDefinitionId != null">
            and RES.CASE_DEF_ID_ = #{caseDefinitionId, jdbcType=VARCHAR}
        </if>
        <if test="reachedBefore != null">
            and RES.TIME_STAMP_ &lt;= #{reachedBefore, jdbcType=TIMESTAMP}
        </if>
        <if test="reachedAfter != null">
            and RES.TIME_STAMP_ &gt;= #{reachedAfter, jdbcType=TIMESTAMP}
        </if>
        <if test="tenantId != null">
            and RES.TENANT_ID_ = #{tenantId, jdbcType=VARCHAR}
        </if>
        <if test="tenantIdLike != null">
            and RES.TENANT_ID_ like #{tenantIdLike, jdbcType=VARCHAR}
        </if>
        <if test="withoutTenantId">
            and (RES.TENANT_ID_ is null or RES.TENANT_ID_ = '')
        </if>
    </where>
  </sql>
  
</mapper>
