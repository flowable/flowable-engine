<?xml version="1.0" encoding="UTF-8" ?>

<!--
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.flowable.engine.impl.persistence.entity.AttachmentEntityImpl">

  <!-- ATTACHMENT INSERT -->

  <insert id="insertAttachment" parameterType="org.flowable.engine.impl.persistence.entity.AttachmentEntityImpl">
    insert into ${prefix}ACT_HI_ATTACHMENT (ID_, REV_, USER_ID_, NAME_, DESCRIPTION_, TYPE_, TASK_ID_, PROC_INST_ID_, URL_, CONTENT_ID_, TIME_)
    values (
      #{id, jdbcType=NVARCHAR},
      1, #{userId, jdbcType=NVARCHAR},
      #{name, jdbcType=NVARCHAR},
      #{description, jdbcType=NVARCHAR},
      #{type, jdbcType=NVARCHAR},
      #{taskId, jdbcType=NVARCHAR},
      #{processInstanceId, jdbcType=NVARCHAR},
      #{url, jdbcType=NVARCHAR},
      #{contentId, jdbcType=NVARCHAR},
      #{time, jdbcType=TIMESTAMP}
    )
  </insert>

  <insert id="bulkInsertAttachment" parameterType="java.util.List">
    insert into ${prefix}ACT_HI_ATTACHMENT (ID_, REV_, USER_ID_, NAME_, DESCRIPTION_, TYPE_, TASK_ID_, PROC_INST_ID_, URL_, CONTENT_ID_, TIME_)
    values 
      <foreach collection="list" item="attachment" index="index" separator=","> 
        (#{attachment.id, jdbcType=NVARCHAR},
         1, #{attachment.userId, jdbcType=NVARCHAR},
         #{attachment.name, jdbcType=NVARCHAR},
         #{attachment.description, jdbcType=NVARCHAR},
         #{attachment.type, jdbcType=NVARCHAR},
         #{attachment.taskId, jdbcType=NVARCHAR},
         #{attachment.processInstanceId, jdbcType=NVARCHAR},
         #{attachment.url, jdbcType=NVARCHAR},
         #{attachment.contentId, jdbcType=NVARCHAR},
         #{attachment.time, jdbcType=TIMESTAMP})
      </foreach>
  </insert>

  <insert id="bulkInsertAttachment" databaseId="oracle" parameterType="java.util.List">
    INSERT ALL 
      <foreach collection="list" item="attachment" index="index"> 
        INTO ${prefix}ACT_HI_ATTACHMENT (ID_, REV_, USER_ID_, NAME_, DESCRIPTION_, TYPE_, TASK_ID_, PROC_INST_ID_, URL_, CONTENT_ID_, TIME_) VALUES 
          (#{attachment.id, jdbcType=NVARCHAR},
           1, #{attachment.userId, jdbcType=NVARCHAR},
           #{attachment.name, jdbcType=NVARCHAR},
           #{attachment.description, jdbcType=NVARCHAR},
           #{attachment.type, jdbcType=NVARCHAR},
           #{attachment.taskId, jdbcType=NVARCHAR},
           #{attachment.processInstanceId, jdbcType=NVARCHAR},
           #{attachment.url, jdbcType=NVARCHAR},
           #{attachment.contentId, jdbcType=NVARCHAR},
           #{attachment.time, jdbcType=TIMESTAMP})
      </foreach>
    SELECT * FROM dual
  </insert>

  <!-- ATTACHMENT UPDATE -->

  <update id="updateAttachment" parameterType="org.flowable.engine.impl.persistence.entity.AttachmentEntityImpl">
    update ${prefix}ACT_HI_ATTACHMENT 
    <set>
        REV_ = #{revisionNext, jdbcType=INTEGER},
        <if test="originalPersistentState.name != name">
          NAME_ = #{name, jdbcType=NVARCHAR},
        </if>
        <if test="originalPersistentState.description != description">
          DESCRIPTION_ = #{description, jdbcType=NVARCHAR},
        </if>
    </set>
    where ID_ = #{id, jdbcType=NVARCHAR}
      and REV_ = #{revision, jdbcType=INTEGER}
  </update>

  <!-- ATTACHMENT DELETE -->

  <delete id="deleteAttachment" parameterType="org.flowable.engine.impl.persistence.entity.AttachmentEntityImpl">
    delete from ${prefix}ACT_HI_ATTACHMENT 
    where ID_ = #{id, jdbcType=NVARCHAR} and REV_ = #{revision, jdbcType=INTEGER}
  </delete>
  
  <!-- ATTACHMENT RESULTMAP -->

  <resultMap id="attachmentResultMap" type="org.flowable.engine.impl.persistence.entity.AttachmentEntityImpl">
    <id property="id" column="ID_" jdbcType="NVARCHAR" />
    <result property="revision" column="REV_" jdbcType="INTEGER" />
    <result property="name" column="NAME_" jdbcType="NVARCHAR" />
    <result property="description" column="DESCRIPTION_" jdbcType="NVARCHAR" />
    <result property="type" column="TYPE_" jdbcType="NVARCHAR" />
    <result property="taskId" column="TASK_ID_" jdbcType="NVARCHAR" />
    <result property="processInstanceId" column="PROC_INST_ID_" jdbcType="NVARCHAR" />
    <result property="url" column="URL_" jdbcType="NVARCHAR" />
    <result property="contentId" column="CONTENT_ID_" jdbcType="NVARCHAR" />
    <result property="userId" column="USER_ID_" jdbcType="NVARCHAR" />
    <result property="time" column="TIME_" jdbcType="TIMESTAMP" />
  </resultMap>
  
  <!-- ATTACHMENT SELECT -->

  <select id="selectAttachment" parameterType="string" resultMap="attachmentResultMap">
    select *
    from ${prefix}ACT_HI_ATTACHMENT
    where ID_ = #{id, jdbcType=NVARCHAR}
  </select>
  
  <select id="selectAttachmentsByTaskId" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject" resultMap="attachmentResultMap">
    select *
    from ${prefix}ACT_HI_ATTACHMENT
    where TASK_ID_ = #{parameter, jdbcType=NVARCHAR}
    order by TIME_ desc
  </select>
  
  <select id="selectAttachmentsByProcessInstanceId" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject" resultMap="attachmentResultMap">
    select *
    from ${prefix}ACT_HI_ATTACHMENT
    where PROC_INST_ID_ = #{parameter, jdbcType=NVARCHAR}
    order by TIME_ desc
  </select>

  <delete id="bulkDeleteBytesForAttachmentsForTaskIds" parameterType="java.util.Collection">
    delete <if test="_databaseId == 'mysql' or _databaseId == 'mssql'"> BYTES_ </if> from ${prefix}ACT_GE_BYTEARRAY BYTES_
    where BYTES_.ID_ in (
        select ATTACHMENT_.CONTENT_ID_
        from ${prefix}ACT_HI_ATTACHMENT ATTACHMENT_
        where 
        <foreach item="listItem" index="listIndex" collection="collection">
            <if test="listIndex &gt; 0">
            or
            </if>
            ATTACHMENT_.TASK_ID_ in 
            <foreach item="taskId" index="index" collection="listItem" open="(" separator="," close=")">
              #{taskId, jdbcType=NVARCHAR}
            </foreach>
        </foreach>
    )
  </delete>
    
  <delete id="bulkDeleteAttachmentsForTaskIds" parameterType="java.util.Collection">
    delete from ${prefix}ACT_HI_ATTACHMENT where 
    <foreach item="listItem" index="listIndex" collection="collection">
        <if test="listIndex &gt; 0">
        or
        </if>
        TASK_ID_ in 
        <foreach item="taskId" index="index" collection="listItem" open="(" separator="," close=")">
          #{taskId, jdbcType=NVARCHAR}
        </foreach>
    </foreach>
  </delete>

</mapper>
