<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:flowable="http://flowable.org/bpmn" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI"
             xmlns:omgdc="http://www.omg.org/spec/DD/20100524/DC" xmlns:omgdi="http://www.omg.org/spec/DD/20100524/DI" xmlns:design="http://flowable.org/design"
             typeLanguage="http://www.w3.org/2001/XMLSchema" expressionLanguage="http://www.w3.org/1999/XPath" targetNamespace="http://flowable.org/test"
             design:palette="flowable-process-palette">
    <process id="multiInstanceTest" name="multiInstanceTest" isExecutable="true" flowable:candidateStarterGroups="flowableUser">
        <startEvent id="startnoneevent1" flowable:initiator="initiator" flowable:formFieldValidation="false"/>
        <scriptTask id="scriptTask1" name="Script task" scriptFormat="groovy" flowable:autoStoreVariables="false">
            <extensionElements>
                <flowable:executionListener type="script" event="start">
                    <flowable:script language="groovy">
                        <![CDATA[
                          execution.setVariable("startListener_element_"+execution.getVariable('element'), "executed");
                            if (execution.getVariable('throwErrorStartListener') != null && "2".equals(execution.getVariable('element'))){
                                throw new org.flowable.engine.delegate.BpmnError(execution.getVariable('throwErrorStartListener'));
                            } else {
                              execution.setVariable("startListener_element_"+execution.getVariable('element'), "executed");
                            }
                        ]]>
                    </flowable:script>
                </flowable:executionListener>
                <flowable:executionListener type="script" event="end">
                    <flowable:script language="groovy">
                        <![CDATA[
                           execution.setVariable("endListener_element_"+execution.getVariable('element'), "executed");
                            if (execution.getVariable('throwErrorEndListener') != null && "2".equals(execution.getVariable('element'))){
                                throw new org.flowable.engine.delegate.BpmnError(execution.getVariable('throwErrorEndListener'));
                            }
                            ]]>
                    </flowable:script>
                </flowable:executionListener>
            </extensionElements>
            <multiInstanceLoopCharacteristics isSequential="false" flowable:collection="${elements}" flowable:elementVariable="element"/>
            <script>
                <![CDATA[
                    def element = execution.getVariable('element');
                    execution.setVariable("element_${element}", "executed");
                    execution.getVariable("executionStack")?.add("element_${element}");
                ]]>
            </script>
        </scriptTask>
        <scriptTask id="errorHandlingTask" name="Error Handling Script Task" scriptFormat="groovy" flowable:autoStoreVariables="false">
            <script>
                <![CDATA[
                    execution.setVariable("error_handled", "true");
                ]]>
            </script>
        </scriptTask>
        <sequenceFlow id="start_to_task" sourceRef="startnoneevent1" targetRef="scriptTask1"/>
        <endEvent id="end"/>
        <sequenceFlow id="task_to_end" sourceRef="scriptTask1" targetRef="end"/>
        <boundaryEvent id="handleError" attachedToRef="scriptTask1">
            <errorEventDefinition></errorEventDefinition>
        </boundaryEvent>
        <endEvent id="errorEnd"/>
        <sequenceFlow id="handleError_to_errorHandlingTask" sourceRef="handleError" targetRef="errorHandlingTask"/>
        <sequenceFlow id="handleErrorTask_to_ErrorEnd" sourceRef="errorHandlingTask" targetRef="errorEnd"/>
    </process>
</definitions>