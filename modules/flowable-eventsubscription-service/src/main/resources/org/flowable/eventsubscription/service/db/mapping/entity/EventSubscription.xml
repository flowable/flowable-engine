<?xml version="1.0" encoding="UTF-8" ?> 

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
  
<mapper namespace="org.flowable.eventsubscription.service.impl.persistence.entity.EventSubscriptionEntityImpl">

  <!-- RESULTMAP -->

  <!--
    Note that the type here is the generic event subscription and not the EventSubScriptionEntityImpl.
    The reason is that a generic event subscription can have any value for the eventType, which doesn't
    work with the discriminator below. By putting the type as it is, it will instantiate the generic event subscription
    when none of the values in the discriminator match.
  -->
  <resultMap id="eventSubscriptionResultMap" type="org.flowable.eventsubscription.service.impl.persistence.entity.GenericEventSubscriptionEntityImpl">
    <id property="id" column="ID_" jdbcType="NVARCHAR" />
    <result property="revision" column="REV_" jdbcType="INTEGER" />
    <result property="eventType" column="EVENT_TYPE_" jdbcType="NVARCHAR" />
    <result property="eventName" column="EVENT_NAME_" jdbcType="NVARCHAR" />
    <result property="executionId" column="EXECUTION_ID_" jdbcType="NVARCHAR" />
    <result property="processInstanceId" column="PROC_INST_ID_" jdbcType="NVARCHAR" />
    <result property="activityId" column="ACTIVITY_ID_" jdbcType="NVARCHAR" />
    <result property="configuration" column="CONFIGURATION_" jdbcType="NVARCHAR" />
    <result property="created" column="CREATED_" jdbcType="TIMESTAMP" />   
    <result property="processDefinitionId" column="PROC_DEF_ID_" jdbcType="NVARCHAR" />
    <result property="subScopeId" column="SUB_SCOPE_ID_" jdbcType="NVARCHAR" />
    <result property="scopeId" column="SCOPE_ID_" jdbcType="NVARCHAR" />
    <result property="scopeDefinitionId" column="SCOPE_DEFINITION_ID_" jdbcType="NVARCHAR" />
    <result property="scopeDefinitionKey" column="SCOPE_DEFINITION_KEY_" jdbcType="NVARCHAR" />
    <result property="scopeType" column="SCOPE_TYPE_" jdbcType="NVARCHAR" />
    <result property="lockTime" column="LOCK_TIME_" jdbcType="TIMESTAMP" />
    <result property="lockOwner" column="LOCK_OWNER_" jdbcType="NVARCHAR" />
    <result property="tenantId" column="TENANT_ID_" jdbcType="NVARCHAR" />
    <discriminator javaType="string" column="EVENT_TYPE_" jdbcType="NVARCHAR">
      <case value="message" resultMap="messageResultMap"/> 
      <case value="signal" resultMap="signalResultMap"/> 
      <case value="compensate" resultMap="compensateResultMap"/>
    </discriminator>
  </resultMap>

  <resultMap id="messageResultMap" type="org.flowable.eventsubscription.service.impl.persistence.entity.MessageEventSubscriptionEntityImpl" extends="eventSubscriptionResultMap"/>
  <resultMap id="signalResultMap" type="org.flowable.eventsubscription.service.impl.persistence.entity.SignalEventSubscriptionEntityImpl" extends="eventSubscriptionResultMap"/>   
  <resultMap id="compensateResultMap" type="org.flowable.eventsubscription.service.impl.persistence.entity.CompensateEventSubscriptionEntityImpl" extends="eventSubscriptionResultMap"/>

  <!-- SELECT -->  

  <select id="selectEventSubscription" parameterType="string" resultMap="eventSubscriptionResultMap">
    select * from ${prefix}ACT_RU_EVENT_SUBSCR where ID_ = #{id, jdbcType=NVARCHAR}
  </select>

  <select id="selectEventSubscriptionByQueryCriteria" parameterType="org.flowable.eventsubscription.service.impl.EventSubscriptionQueryImpl" resultMap="eventSubscriptionResultMap">
    <if test="needsPaging">${limitBefore}</if>
    SELECT RES.* <if test="needsPaging">${limitBetween}</if>
    <include refid="selectEventSubscriptionByQueryCriteriaSql"/>
    ${orderBy}
    <if test="needsPaging">${limitAfter}</if>
  </select>

  <select id="selectEventSubscriptionCountByQueryCriteria" parameterType="org.flowable.eventsubscription.service.impl.EventSubscriptionQueryImpl" resultType="long">
    select count(RES.ID_)
    <include refid="selectEventSubscriptionByQueryCriteriaSql"/>
  </select>
  
  <sql id="selectEventSubscriptionByQueryCriteriaSql">
    from ${prefix}ACT_RU_EVENT_SUBSCR RES
    <where>
      <if test="id != null">
        RES.ID_ = #{id, jdbcType=NVARCHAR}
      </if>
      <if test="eventType != null">
        and RES.EVENT_TYPE_ = #{eventType, jdbcType=NVARCHAR}
      </if>
      <if test="eventName != null">
        and RES.EVENT_NAME_ = #{eventName, jdbcType=NVARCHAR}
      </if>
      <if test="executionId != null">
        and RES.EXECUTION_ID_ = #{executionId, jdbcType=NVARCHAR}
      </if>
      <if test="processInstanceId != null">
        and RES.PROC_INST_ID_ = #{processInstanceId, jdbcType=NVARCHAR}
      </if>
      <if test="withoutProcessInstanceId">
        and RES.PROC_INST_ID_ IS NULL
      </if>
      <if test="processDefinitionId != null">
        and RES.PROC_DEF_ID_ = #{processDefinitionId, jdbcType=NVARCHAR}
      </if>
      <if test="withoutProcessDefinitionId">
        and RES.PROC_DEF_ID_ IS NULL
      </if>
      <if test="activityId != null">
        and RES.ACTIVITY_ID_ = #{activityId, jdbcType=NVARCHAR}
      </if>
      <if test="subScopeId != null">
        and RES.SUB_SCOPE_ID_ = #{subScopeId, jdbcType=NVARCHAR}
      </if>
      <if test="scopeId != null">
        and RES.SCOPE_ID_ = #{scopeId, jdbcType=NVARCHAR}
      </if>
      <if test="withoutScopeId">
        and RES.SCOPE_ID_ IS NULL
      </if>
      <if test="scopeDefinitionId != null">
        and RES.SCOPE_DEFINITION_ID_ = #{scopeDefinitionId, jdbcType=NVARCHAR}
      </if>
      <if test="withoutScopeDefinitionId">
        and RES.SCOPE_DEFINITION_ID_ IS NULL
      </if>
      <if test="scopeDefinitionKey != null">
        and RES.SCOPE_DEFINITION_KEY_ = #{scopeDefinitionKey, jdbcType=NVARCHAR}
      </if>
      <if test="scopeType != null">
        and RES.SCOPE_TYPE_ = #{scopeType, jdbcType=NVARCHAR}
      </if>
      <if test="createdBefore != null">
		and RES.CREATED_ &lt; #{createdBefore, jdbcType=TIMESTAMP}
	  </if>
	  <if test="createdAfter != null">
		and RES.CREATED_ &gt; #{createdAfter, jdbcType=TIMESTAMP}
	  </if>
      <if test="tenantId != null">
        and RES.TENANT_ID_ = #{tenantId, jdbcType=NVARCHAR}
      </if>
      <if test="tenantIds != null and !tenantIds.empty">
        and RES.TENANT_ID_ in
        <foreach item="tenantId" index="index" collection="tenantIds" open="(" separator="," close=")">
            #{tenantId, jdbcType=NVARCHAR}
        </foreach>
      </if>
      <if test="withoutTenantId">
        and (RES.TENANT_ID_ = '' or RES.TENANT_ID_ is null)
      </if>        
      <if test="configuration != null">
          and RES.CONFIGURATION_ = #{configuration, jdbcType=NVARCHAR}
      </if>
      <if test="configurations != null and !configurations.empty">
          and RES.CONFIGURATION_ in
          <foreach item="configuration" index="index" collection="configurations" open="(" separator="," close=")">
              #{configuration, jdbcType=NVARCHAR}
          </foreach>
      </if>
      <if test="withoutConfiguration">
          and RES.CONFIGURATION_ is null
      </if>
      <foreach item="orQueryObject" index="orIndex" collection="orQueryObjects">
          and
          <trim prefix="(" prefixOverrides="OR" suffix=")">
              <if test="orQueryObject.id != null">
                  RES.ID_ = #{orQueryObject.id, jdbcType=NVARCHAR}
              </if>
              <if test="orQueryObject.eventType != null">
                  or RES.EVENT_TYPE_ = #{orQueryObject.eventType, jdbcType=NVARCHAR}
              </if>
              <if test="orQueryObject.eventName != null">
                  or RES.EVENT_NAME_ = #{orQueryObject.eventName, jdbcType=NVARCHAR}
              </if>
              <if test="orQueryObject.executionId != null">
                  or RES.EXECUTION_ID_ = #{orQueryObject.executionId, jdbcType=NVARCHAR}
              </if>
              <if test="orQueryObject.processInstanceId != null">
                  or RES.PROC_INST_ID_ = #{orQueryObject.processInstanceId, jdbcType=NVARCHAR}
              </if>
              <if test="orQueryObject.withoutProcessInstanceId">
                  or RES.PROC_INST_ID_ IS NULL
              </if>
              <if test="orQueryObject.processDefinitionId != null">
                  or RES.PROC_DEF_ID_ = #{orQueryObject.processDefinitionId, jdbcType=NVARCHAR}
              </if>
              <if test="orQueryObject.withoutProcessDefinitionId">
                  or RES.PROC_DEF_ID_ IS NULL
              </if>
              <if test="orQueryObject.activityId != null">
                  or RES.ACTIVITY_ID_ = #{orQueryObject.activityId, jdbcType=NVARCHAR}
              </if>
              <if test="orQueryObject.subScopeId != null">
                  or RES.SUB_SCOPE_ID_ = #{orQueryObject.subScopeId, jdbcType=NVARCHAR}
              </if>
              <if test="orQueryObject.scopeId != null">
                  or RES.SCOPE_ID_ = #{orQueryObject.scopeId, jdbcType=NVARCHAR}
              </if>
              <if test="orQueryObject.withoutScopeId">
                  or RES.SCOPE_ID_ IS NULL
              </if>
              <if test="orQueryObject.scopeDefinitionId != null">
                  or RES.SCOPE_DEFINITION_ID_ = #{orQueryObject.scopeDefinitionId, jdbcType=NVARCHAR}
              </if>
              <if test="orQueryObject.withoutScopeDefinitionId">
                  or RES.SCOPE_DEFINITION_ID_ IS NULL
              </if>
              <if test="orQueryObject.scopeDefinitionKey != null">
                  or RES.SCOPE_DEFINITION_KEY_ = #{orQueryObject.scopeDefinitionKey, jdbcType=NVARCHAR}
              </if>
              <if test="orQueryObject.scopeType != null">
                  or RES.SCOPE_TYPE_ = #{orQueryObject.scopeType, jdbcType=NVARCHAR}
              </if>
              <if test="orQueryObject.createdBefore != null">
                  or RES.CREATED_ &lt; #{orQueryObject.createdBefore, jdbcType=TIMESTAMP}
              </if>
              <if test="orQueryObject.createdAfter != null">
                  or RES.CREATED_ &gt; #{orQueryObject.createdAfter, jdbcType=TIMESTAMP}
              </if>
              <if test="orQueryObject.tenantId != null">
                  or RES.TENANT_ID_ = #{orQueryObject.tenantId, jdbcType=NVARCHAR}
              </if>
              <if test="orQueryObject.tenantIds != null and !orQueryObject.tenantIds.empty">
                  or RES.TENANT_ID_ in
                  <foreach item="tenantId" index="index" collection="orQueryObject.tenantIds" open="(" separator="," close=")">
                      #{tenantId, jdbcType=NVARCHAR}
                  </foreach>
              </if>
              <if test="orQueryObject.withoutTenantId">
                  or (RES.TENANT_ID_ = '' or RES.TENANT_ID_ is null)
              </if>
              <if test="orQueryObject.configuration != null">
                  or RES.CONFIGURATION_ = #{orQueryObject.configuration, jdbcType=NVARCHAR}
              </if>
              <if test="orQueryObject.configurations != null and !orQueryObject.configurations.empty">
                  or RES.CONFIGURATION_ in
                  <foreach item="configuration" index="index" collection="orQueryObject.configurations" open="(" separator="," close=")">
                      #{configuration, jdbcType=NVARCHAR}
                  </foreach>
              </if>
              <if test="orQueryObject.withoutConfiguration">
                  or RES.CONFIGURATION_ is null
              </if>
          </trim>  
      </foreach>
    </where>
  </sql>
  
  <select id="selectMessageEventSubscriptionsByProcessInstanceAndEventName" resultMap="eventSubscriptionResultMap" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject">
    select * 
    from ${prefix}ACT_RU_EVENT_SUBSCR EVT
    where (EVENT_TYPE_ = 'message')
        and EVENT_NAME_ = #{parameter.eventName, jdbcType=NVARCHAR}  
        and PROC_INST_ID_ = #{parameter.processInstanceId, jdbcType=NVARCHAR}
  </select>
  
  <select id="selectSignalEventSubscriptionsByEventName" resultMap="eventSubscriptionResultMap" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject">
    select * 
    from ${prefix}ACT_RU_EVENT_SUBSCR EVT
    left outer join ${prefix}ACT_RU_EXECUTION EXC on EVT.EXECUTION_ID_ = EXC.ID_
    where EVENT_TYPE_ = 'signal'
      and EVENT_NAME_ = #{parameter.eventName, jdbcType=NVARCHAR}
      and (
       (EVT.EXECUTION_ID_ is null) 
       or 
       (EVT.EXECUTION_ID_ is not null AND EXC.SUSPENSION_STATE_ = 1) 
      )
    <if test="parameter.tenantId != null">
        and EVT.TENANT_ID_ = #{parameter.tenantId, jdbcType=NVARCHAR}
    </if>  
    <if test="parameter.tenantId == null">
        and (EVT.TENANT_ID_ = '' or EVT.TENANT_ID_ is null)
    </if>   
  </select>
  
  <select id="selectSignalEventSubscriptionsByProcessInstanceAndEventName" resultMap="eventSubscriptionResultMap" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject">
    select * 
    from ${prefix}ACT_RU_EVENT_SUBSCR EVT
    where (EVENT_TYPE_ = 'signal')
        and EVENT_NAME_ = #{parameter.eventName, jdbcType=NVARCHAR}  
        and PROC_INST_ID_ = #{parameter.processInstanceId, jdbcType=NVARCHAR}
  </select>
  
  <select id="selectSignalEventSubscriptionsByScopeAndEventName" resultMap="eventSubscriptionResultMap" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject">
    select * 
    from ${prefix}ACT_RU_EVENT_SUBSCR EVT
    where (EVENT_TYPE_ = 'signal')
        and EVENT_NAME_ = #{parameter.eventName, jdbcType=NVARCHAR}  
        and SCOPE_ID_ = #{parameter.scopeId, jdbcType=NVARCHAR}
        and SCOPE_TYPE_ = #{parameter.scopeType, jdbcType=NVARCHAR}
  </select> 
  
  <select id="selectSignalEventSubscriptionsByNameAndExecution" resultMap="eventSubscriptionResultMap" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject">
    select * 
    from ${prefix}ACT_RU_EVENT_SUBSCR
    where (EVENT_TYPE_ = 'signal')
    	and (EXECUTION_ID_ = #{parameter.executionId, jdbcType=NVARCHAR})
    	and (EVENT_NAME_ = #{parameter.eventName, jdbcType=NVARCHAR})
  </select>
  
  <select id="selectEventSubscriptionsByExecution" resultMap="eventSubscriptionResultMap" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject">
    select * 
    from ${prefix}ACT_RU_EVENT_SUBSCR
    where (EXECUTION_ID_ = #{parameter, jdbcType=NVARCHAR})
  </select>
      
  <select id="selectEventSubscriptionsByExecutionAndType" resultMap="eventSubscriptionResultMap" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject">
    select * 
    from ${prefix}ACT_RU_EVENT_SUBSCR
    where (EVENT_TYPE_ = #{parameter.eventType, jdbcType=NVARCHAR})
    	and (EXECUTION_ID_ = #{parameter.executionId, jdbcType=NVARCHAR})
  </select>
  
  <select id="selectEventSubscriptionsByProcessInstanceAndType" resultMap="eventSubscriptionResultMap" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject">
    select * 
    from ${prefix}ACT_RU_EVENT_SUBSCR
    where (EVENT_TYPE_ = #{parameter.eventType, jdbcType=NVARCHAR})
    	and (PROC_INST_ID_ = #{parameter.processInstanceId, jdbcType=NVARCHAR})
  </select>
  
  <select id="selectEventSubscriptionsByExecutionTypeAndActivity" resultMap="eventSubscriptionResultMap" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject">
    select * 
    from ${prefix}ACT_RU_EVENT_SUBSCR
    where (EVENT_TYPE_ = #{parameter.eventType, jdbcType=NVARCHAR})
    	and (EXECUTION_ID_ = #{parameter.executionId, jdbcType=NVARCHAR})
    	and (ACTIVITY_ID_ = #{parameter.activityId, jdbcType=NVARCHAR})
  </select>
  
  <select id="selectEventSubscriptionsByProcessInstanceTypeAndActivity" resultMap="eventSubscriptionResultMap" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject">
    select * 
    from ${prefix}ACT_RU_EVENT_SUBSCR
    where (EVENT_TYPE_ = #{parameter.eventType, jdbcType=NVARCHAR})
    	and (PROC_INST_ID_ = #{parameter.processInstanceId, jdbcType=NVARCHAR})
    	and (ACTIVITY_ID_ = #{parameter.activityId, jdbcType=NVARCHAR})
  </select>
  
  <select id="selectEventSubscriptionsBySubScopeId" resultMap="eventSubscriptionResultMap" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject">
    select * 
    from ${prefix}ACT_RU_EVENT_SUBSCR
    where (SUB_SCOPE_ID_ = #{parameter, jdbcType=NVARCHAR})
  </select>
  
  <select id="selectEventSubscriptionsByTypeAndProcessDefinitionId" resultMap="eventSubscriptionResultMap" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject">
    select * 
    from ${prefix}ACT_RU_EVENT_SUBSCR
    <where>
      <if test="parameter.eventType != null">
        (EVENT_TYPE_ = #{parameter.eventType, jdbcType=NVARCHAR})
      </if>
        and PROC_DEF_ID_ = #{parameter.processDefinitionId, jdbcType=NVARCHAR}
        and EXECUTION_ID_ is null 
        and PROC_INST_ID_ is null
       <if test="parameter.tenantId != null">
          and TENANT_ID_ = #{parameter.tenantId, jdbcType=NVARCHAR}
      </if>  
      <if test="parameter.tenantId == null">
          and (TENANT_ID_ = '' or TENANT_ID_ is null)
      </if>  
    </where>   
  </select>
  
  <select id="selectEventSubscriptionsByScopeIdAndType" resultMap="eventSubscriptionResultMap" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject">
    select * 
    from ${prefix}ACT_RU_EVENT_SUBSCR
    where (EVENT_TYPE_ = #{parameter.eventType, jdbcType=NVARCHAR})
    	and (SCOPE_ID_ = #{parameter.scopeId, jdbcType=NVARCHAR})
  </select>
  
  <select id="selectEventSubscriptionsByName" resultMap="eventSubscriptionResultMap" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject">
    select * 
    from ${prefix}ACT_RU_EVENT_SUBSCR
    where (EVENT_TYPE_ = #{parameter.eventType, jdbcType=NVARCHAR})
    	and (EVENT_NAME_ = #{parameter.eventName, jdbcType=NVARCHAR})
    <if test="parameter.tenantId != null">
        and TENANT_ID_ = #{parameter.tenantId, jdbcType=NVARCHAR}
    </if>  
    <if test="parameter.tenantId == null">
        and (TENANT_ID_ = '' or TENANT_ID_ is null)
    </if>   	
  </select>
  
  <select id="selectEventSubscriptionsByNameAndExecution" resultMap="eventSubscriptionResultMap" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject">
    select * 
    from ${prefix}ACT_RU_EVENT_SUBSCR
    where (EVENT_TYPE_ = #{parameter.eventType, jdbcType=NVARCHAR})
    	and (EVENT_NAME_ = #{parameter.eventName, jdbcType=NVARCHAR})
    	and (EXECUTION_ID_ = #{parameter.executionId, jdbcType=NVARCHAR})
  </select>
  
   <select id="selectMessageStartEventSubscriptionByName" resultMap="eventSubscriptionResultMap" parameterType="map">
    select * 
    from ${prefix}ACT_RU_EVENT_SUBSCR
    where (EVENT_TYPE_ = 'message')
    	and (EVENT_NAME_ = #{eventName, jdbcType=NVARCHAR})
    	and EXECUTION_ID_ is null
    <if test="tenantId != null">
        and TENANT_ID_ = #{tenantId, jdbcType=NVARCHAR}
    </if>  
    <if test="tenantId == null">
        and (TENANT_ID_ = '' or TENANT_ID_ is null)
    </if>   	
  </select>
    
  <!-- MESSAGE INSERT -->
  
  <insert id="insertMessageEventSubscription" parameterType="org.flowable.eventsubscription.service.impl.persistence.entity.MessageEventSubscriptionEntityImpl">
 	insert into ${prefix}ACT_RU_EVENT_SUBSCR (
            ID_, 
            REV_,
            EVENT_TYPE_,
           	EVENT_NAME_,
           	EXECUTION_ID_,
           	PROC_INST_ID_,
           	ACTIVITY_ID_,
           	CONFIGURATION_,
           	CREATED_,
           	PROC_DEF_ID_,
            SUB_SCOPE_ID_,
            SCOPE_ID_,
            SCOPE_DEFINITION_ID_,
            SCOPE_DEFINITION_KEY_,
            SCOPE_TYPE_,
           	TENANT_ID_
    )
    values (#{id, jdbcType=NVARCHAR},
            1, 'message',
            #{eventName, jdbcType=NVARCHAR},
            #{executionId, jdbcType=NVARCHAR},
            #{processInstanceId, jdbcType=NVARCHAR},
            #{activityId, jdbcType=NVARCHAR},
            #{configuration, jdbcType=NVARCHAR},
            #{created, jdbcType=TIMESTAMP},
            #{processDefinitionId, jdbcType=NVARCHAR},
            #{subScopeId, jdbcType=NVARCHAR},
            #{scopeId, jdbcType=NVARCHAR},
            #{scopeDefinitionId, jdbcType=NVARCHAR},
            #{scopeDefinitionKey, jdbcType=NVARCHAR},
            #{scopeType, jdbcType=NVARCHAR},
            #{tenantId, jdbcType=NVARCHAR}
    )
  </insert>
  
  <insert id="bulkInsertMessageEventSubscription" parameterType="java.util.List">
  insert into ${prefix}ACT_RU_EVENT_SUBSCR (
            ID_, 
            REV_,
            EVENT_TYPE_,
            EVENT_NAME_,
            EXECUTION_ID_,
            PROC_INST_ID_,
            ACTIVITY_ID_,
            CONFIGURATION_,
            CREATED_,
            PROC_DEF_ID_,
            SUB_SCOPE_ID_,
            SCOPE_ID_,
            SCOPE_DEFINITION_ID_,
            SCOPE_DEFINITION_KEY_,
            SCOPE_TYPE_,
            TENANT_ID_
    )
    values 
      <foreach collection="list" item="messageEventSubscription" index="index" separator=",">
          (#{messageEventSubscription.id, jdbcType=NVARCHAR},
           1, #{messageEventSubscription.eventType, jdbcType=NVARCHAR},
           #{messageEventSubscription.eventName, jdbcType=NVARCHAR},
           #{messageEventSubscription.executionId, jdbcType=NVARCHAR},
           #{messageEventSubscription.processInstanceId, jdbcType=NVARCHAR},
           #{messageEventSubscription.activityId, jdbcType=NVARCHAR},
           #{messageEventSubscription.configuration, jdbcType=NVARCHAR},
           #{messageEventSubscription.created, jdbcType=TIMESTAMP},
           #{messageEventSubscription.processDefinitionId, jdbcType=NVARCHAR},
           #{messageEventSubscription.subScopeId, jdbcType=NVARCHAR},
           #{messageEventSubscription.scopeId, jdbcType=NVARCHAR},
           #{messageEventSubscription.scopeDefinitionId, jdbcType=NVARCHAR},
           #{messageEventSubscription.scopeDefinitionKey, jdbcType=NVARCHAR},
           #{messageEventSubscription.scopeType, jdbcType=NVARCHAR},
           #{messageEventSubscription.tenantId, jdbcType=NVARCHAR})
      </foreach>
  </insert>
  
  <insert id="bulkInsertMessageEventSubscription" databaseId="oracle" parameterType="java.util.List">
  INSERT ALL 
      <foreach collection="list" item="messageEventSubscription" index="index">
        into ${prefix}ACT_RU_EVENT_SUBSCR (
            ID_, 
            REV_,
            EVENT_TYPE_,
            EVENT_NAME_,
            EXECUTION_ID_,
            PROC_INST_ID_,
            ACTIVITY_ID_,
            CONFIGURATION_,
            CREATED_,
            PROC_DEF_ID_,
            SUB_SCOPE_ID_,
            SCOPE_ID_,
            SCOPE_DEFINITION_ID_,
            SCOPE_DEFINITION_KEY_,
            SCOPE_TYPE_,
            TENANT_ID_
          ) VALUES 
          (#{messageEventSubscription.id, jdbcType=NVARCHAR},
           1, #{messageEventSubscription.eventType, jdbcType=NVARCHAR},
           #{messageEventSubscription.eventName, jdbcType=NVARCHAR},
           #{messageEventSubscription.executionId, jdbcType=NVARCHAR},
           #{messageEventSubscription.processInstanceId, jdbcType=NVARCHAR},
           #{messageEventSubscription.activityId, jdbcType=NVARCHAR},
           #{messageEventSubscription.configuration, jdbcType=NVARCHAR},
           #{messageEventSubscription.created, jdbcType=TIMESTAMP},
           #{messageEventSubscription.processDefinitionId, jdbcType=NVARCHAR},
           #{messageEventSubscription.subScopeId, jdbcType=NVARCHAR},
           #{messageEventSubscription.scopeId, jdbcType=NVARCHAR},
           #{messageEventSubscription.scopeDefinitionId, jdbcType=NVARCHAR},
           #{messageEventSubscription.scopeDefinitionKey, jdbcType=NVARCHAR},
           #{messageEventSubscription.scopeType, jdbcType=NVARCHAR},
           #{messageEventSubscription.tenantId, jdbcType=NVARCHAR})
      </foreach>
    SELECT * FROM dual
  </insert>

  <!-- MESSAGE UPDATE -->

  <update id="updateMessageEventSubscription" parameterType="org.flowable.eventsubscription.service.impl.persistence.entity.MessageEventSubscriptionEntityImpl">
    update ${prefix}ACT_RU_EVENT_SUBSCR
    <set>
       REV_ =  #{revisionNext, jdbcType=INTEGER},
       <if test="originalPersistentState.eventName != eventName">
           EVENT_NAME_ = #{eventName, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.executionId != executionId">
           EXECUTION_ID_ = #{executionId, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.processInstanceId != processInstanceId">
           PROC_INST_ID_ = #{processInstanceId, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.activityId != activityId">
           ACTIVITY_ID_ = #{activityId, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.configuration != configuration">
           CONFIGURATION_ = #{configuration, jdbcType=NVARCHAR},  
      </if>
      <if test="originalPersistentState.created != created">
           CREATED_ = #{created, jdbcType=TIMESTAMP},
      </if>
      <if test="originalPersistentState.processDefinitionId != processDefinitionId">
           PROC_DEF_ID_ = #{processDefinitionId, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.subScopeId != subScopeId">
           SUB_SCOPE_ID_ = #{subScopeId, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.scopeId != scopeId">
           SCOPE_ID_ = #{scopeId, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.scopeDefinitionId != scopeDefinitionId">
           SCOPE_DEFINITION_ID_ = #{scopeDefinitionId, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.scopeDefinitionKey != scopeDefinitionKey">
           SCOPE_DEFINITION_KEY_ = #{scopeDefinitionKey, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.scopeType != scopeType">
           SCOPE_TYPE_ = #{scopeType, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.lockOwner != lockOwner">
           LOCK_OWNER_ = #{lockOwner, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.lockTime != lockTime">
           LOCK_TIME_ = #{lockTime, jdbcType=TIMESTAMP},
      </if>
      <if test="originalPersistentState.tenantId != tenantId">
           TENANT_ID_ = #{tenantId, jdbcType=NVARCHAR},
      </if>
    </set>
    where ID_= #{id, jdbcType=NVARCHAR}
      and REV_ = #{revision, jdbcType=INTEGER}
  </update>
  
   <!-- SIGNAL INSERT -->
  
  <insert id="insertSignalEventSubscription" parameterType="org.flowable.eventsubscription.service.impl.persistence.entity.SignalEventSubscriptionEntityImpl">
   insert into ${prefix}ACT_RU_EVENT_SUBSCR (
            ID_, 
            REV_,
            EVENT_TYPE_,
           	EVENT_NAME_,
           	EXECUTION_ID_,
           	PROC_INST_ID_,
           	ACTIVITY_ID_,
           	CONFIGURATION_,
           	CREATED_,
           	PROC_DEF_ID_,
            SUB_SCOPE_ID_,
            SCOPE_ID_,
            SCOPE_DEFINITION_ID_,
            SCOPE_DEFINITION_KEY_,
            SCOPE_TYPE_,
           	TENANT_ID_
    )
    values (#{id, jdbcType=NVARCHAR},
            1, 'signal',
            #{eventName, jdbcType=NVARCHAR},
            #{executionId, jdbcType=NVARCHAR},
            #{processInstanceId, jdbcType=NVARCHAR},
            #{activityId, jdbcType=NVARCHAR},
            #{configuration, jdbcType=NVARCHAR},
            #{created, jdbcType=TIMESTAMP},
            #{processDefinitionId, jdbcType=NVARCHAR},
            #{subScopeId, jdbcType=NVARCHAR},
            #{scopeId, jdbcType=NVARCHAR},
            #{scopeDefinitionId, jdbcType=NVARCHAR},
            #{scopeDefinitionKey, jdbcType=NVARCHAR},
            #{scopeType, jdbcType=NVARCHAR},
            #{tenantId, jdbcType=NVARCHAR}         
    )
  </insert>
  
  <insert id="bulkInsertSignalEventSubscription" parameterType="java.util.List">
   insert into ${prefix}ACT_RU_EVENT_SUBSCR (
            ID_, 
            REV_,
            EVENT_TYPE_,
            EVENT_NAME_,
            EXECUTION_ID_,
            PROC_INST_ID_,
            ACTIVITY_ID_,
            CONFIGURATION_,
            CREATED_,
            PROC_DEF_ID_,
            SUB_SCOPE_ID_,
            SCOPE_ID_,
            SCOPE_DEFINITION_ID_,
            SCOPE_DEFINITION_KEY_,
            SCOPE_TYPE_,
            TENANT_ID_
    )
    values 
      <foreach collection="list" item="signalEventSubscription" index="index" separator=",">
        (#{signalEventSubscription.id, jdbcType=NVARCHAR},
         1, #{signalEventSubscription.eventType, jdbcType=NVARCHAR},
         #{signalEventSubscription.eventName, jdbcType=NVARCHAR},
         #{signalEventSubscription.executionId, jdbcType=NVARCHAR},
         #{signalEventSubscription.processInstanceId, jdbcType=NVARCHAR},
         #{signalEventSubscription.activityId, jdbcType=NVARCHAR},
         #{signalEventSubscription.configuration, jdbcType=NVARCHAR},
         #{signalEventSubscription.created, jdbcType=TIMESTAMP},
         #{signalEventSubscription.processDefinitionId, jdbcType=NVARCHAR},
         #{signalEventSubscription.subScopeId, jdbcType=NVARCHAR},
         #{signalEventSubscription.scopeId, jdbcType=NVARCHAR},
         #{signalEventSubscription.scopeDefinitionId, jdbcType=NVARCHAR},
         #{signalEventSubscription.scopeDefinitionKey, jdbcType=NVARCHAR},
         #{signalEventSubscription.scopeType, jdbcType=NVARCHAR},
         #{signalEventSubscription.tenantId, jdbcType=NVARCHAR})
     </foreach>
  </insert>

  <insert id="bulkInsertSignalEventSubscription" databaseId="oracle" parameterType="java.util.List">
   INSERT ALL 
      <foreach collection="list" item="signalEventSubscription" index="index">
         into ${prefix}ACT_RU_EVENT_SUBSCR (
          ID_, 
          REV_,
          EVENT_TYPE_,
          EVENT_NAME_,
          EXECUTION_ID_,
          PROC_INST_ID_,
          ACTIVITY_ID_,
          CONFIGURATION_,
          CREATED_,
          PROC_DEF_ID_,
          SUB_SCOPE_ID_,
          SCOPE_ID_,
          SCOPE_DEFINITION_ID_,
          SCOPE_DEFINITION_KEY_,
          SCOPE_TYPE_,
          TENANT_ID_
          )
          VALUES 
          (#{signalEventSubscription.id, jdbcType=NVARCHAR},
           1, #{signalEventSubscription.eventType, jdbcType=NVARCHAR},
           #{signalEventSubscription.eventName, jdbcType=NVARCHAR},
           #{signalEventSubscription.executionId, jdbcType=NVARCHAR},
           #{signalEventSubscription.processInstanceId, jdbcType=NVARCHAR},
           #{signalEventSubscription.activityId, jdbcType=NVARCHAR},
           #{signalEventSubscription.configuration, jdbcType=NVARCHAR},
           #{signalEventSubscription.created, jdbcType=TIMESTAMP},
           #{signalEventSubscription.processDefinitionId, jdbcType=NVARCHAR},
           #{signalEventSubscription.subScopeId, jdbcType=NVARCHAR},
           #{signalEventSubscription.scopeId, jdbcType=NVARCHAR},
           #{signalEventSubscription.scopeDefinitionId, jdbcType=NVARCHAR},
           #{signalEventSubscription.scopeDefinitionKey, jdbcType=NVARCHAR},
           #{signalEventSubscription.scopeType, jdbcType=NVARCHAR},
           #{signalEventSubscription.tenantId, jdbcType=NVARCHAR})
     </foreach>
    SELECT * FROM dual
  </insert>

  <!-- SIGNAL UPDATE -->

  <update id="updateSignalEventSubscription" parameterType="org.flowable.eventsubscription.service.impl.persistence.entity.SignalEventSubscriptionEntityImpl">
    update ${prefix}ACT_RU_EVENT_SUBSCR
    <set>
       REV_ =  #{revisionNext, jdbcType=INTEGER},
       <if test="originalPersistentState.eventName != eventName">
           EVENT_NAME_ = #{eventName, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.executionId != executionId">
           EXECUTION_ID_ = #{executionId, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.processInstanceId != processInstanceId">
           PROC_INST_ID_ = #{processInstanceId, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.activityId != activityId">
           ACTIVITY_ID_ = #{activityId, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.configuration != configuration">
           CONFIGURATION_ = #{configuration, jdbcType=NVARCHAR},  
      </if>
      <if test="originalPersistentState.subScopeId != subScopeId">
           SUB_SCOPE_ID_ = #{subScopeId, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.scopeId != scopeId">
           SCOPE_ID_ = #{scopeId, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.scopeDefinitionId != scopeDefinitionId">
           SCOPE_DEFINITION_ID_ = #{scopeDefinitionId, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.scopeDefinitionKey != scopeDefinitionKey">
           SCOPE_DEFINITION_KEY_ = #{scopeDefinitionKey, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.scopeType != scopeType">
           SCOPE_TYPE_ = #{scopeType, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.created != created">
           CREATED_ = #{created, jdbcType=TIMESTAMP},
      </if>
      <if test="originalPersistentState.lockOwner != lockOwner">
           LOCK_OWNER_ = #{lockOwner, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.lockTime != lockTime">
           LOCK_TIME_ = #{lockTime, jdbcType=TIMESTAMP},
      </if>
      <if test="originalPersistentState.tenantId != tenantId">
           TENANT_ID_ = #{tenantId, jdbcType=NVARCHAR}
      </if>
    </set>
    where ID_= #{id, jdbcType=NVARCHAR}
      and REV_ = #{revision, jdbcType=INTEGER}
  </update>
  
   <!-- Compensate INSERT -->
  
  <insert id="insertCompensateEventSubscription" parameterType="org.flowable.eventsubscription.service.impl.persistence.entity.CompensateEventSubscriptionEntityImpl">
    insert into ${prefix}ACT_RU_EVENT_SUBSCR (
             ID_, 
            REV_,
            EVENT_TYPE_,
           	EVENT_NAME_,
           	EXECUTION_ID_,
           	PROC_INST_ID_,
           	ACTIVITY_ID_,
           	CONFIGURATION_,
           	CREATED_,
           	PROC_DEF_ID_,
            SUB_SCOPE_ID_,
            SCOPE_ID_,
            SCOPE_DEFINITION_ID_,
            SCOPE_DEFINITION_KEY_,
            SCOPE_TYPE_,
           	TENANT_ID_
    )
    values (#{id, jdbcType=NVARCHAR},
            1, 'compensate',
            #{eventName, jdbcType=NVARCHAR},
            #{executionId, jdbcType=NVARCHAR},
            #{processInstanceId, jdbcType=NVARCHAR},
            #{activityId, jdbcType=NVARCHAR},
            #{configuration, jdbcType=NVARCHAR},
            #{created, jdbcType=TIMESTAMP},
            #{processDefinitionId, jdbcType=NVARCHAR},
            #{subScopeId, jdbcType=NVARCHAR},
            #{scopeId, jdbcType=NVARCHAR},
            #{scopeDefinitionId, jdbcType=NVARCHAR},
            #{scopeDefinitionKey, jdbcType=NVARCHAR},
            #{scopeType, jdbcType=NVARCHAR},
            #{tenantId, jdbcType=NVARCHAR}
    )
  </insert>

  <insert id="bulkInsertCompensateEventSubscription" parameterType="java.util.List">
    insert into ${prefix}ACT_RU_EVENT_SUBSCR (
            ID_, 
            REV_,
            EVENT_TYPE_,
            EVENT_NAME_,
            EXECUTION_ID_,
            PROC_INST_ID_,
            ACTIVITY_ID_,
            CONFIGURATION_,
            CREATED_,
            PROC_DEF_ID_,
            SUB_SCOPE_ID_,
            SCOPE_ID_,
            SCOPE_DEFINITION_ID_,
            SCOPE_DEFINITION_KEY_,
            SCOPE_TYPE_,
            TENANT_ID_
    )
    values 
      <foreach collection="list" item="compensateEventSubscription" index="index" separator=",">
        (#{compensateEventSubscription.id, jdbcType=NVARCHAR},
         1, #{compensateEventSubscription.eventType, jdbcType=NVARCHAR},
         #{compensateEventSubscription.eventName, jdbcType=NVARCHAR},
         #{compensateEventSubscription.executionId, jdbcType=NVARCHAR},
         #{compensateEventSubscription.processInstanceId, jdbcType=NVARCHAR},
         #{compensateEventSubscription.activityId, jdbcType=NVARCHAR},
         #{compensateEventSubscription.configuration, jdbcType=NVARCHAR},
         #{compensateEventSubscription.created, jdbcType=TIMESTAMP},
         #{compensateEventSubscription.processDefinitionId, jdbcType=NVARCHAR},
         #{compensateEventSubscription.subScopeId, jdbcType=NVARCHAR},
         #{compensateEventSubscription.scopeId, jdbcType=NVARCHAR},
         #{compensateEventSubscription.scopeDefinitionId, jdbcType=NVARCHAR},
         #{compensateEventSubscription.scopeDefinitionKey, jdbcType=NVARCHAR},
         #{compensateEventSubscription.scopeType, jdbcType=NVARCHAR},
         #{compensateEventSubscription.tenantId, jdbcType=NVARCHAR})
      </foreach>
  </insert>

  <insert id="bulkInsertCompensateEventSubscription" databaseId="oracle" parameterType="java.util.List">
    INSERT ALL 
      <foreach collection="list" item="compensateEventSubscription" index="index">
        into ${prefix}ACT_RU_EVENT_SUBSCR (
          ID_, 
          REV_,
          EVENT_TYPE_,
          EVENT_NAME_,
          EXECUTION_ID_,
          PROC_INST_ID_,
          ACTIVITY_ID_,
          CONFIGURATION_,
          CREATED_,
          PROC_DEF_ID_,
          SUB_SCOPE_ID_,
          SCOPE_ID_,
          SCOPE_DEFINITION_ID_,
          SCOPE_DEFINITION_KEY_,
          SCOPE_TYPE_,
          TENANT_ID_
        )
        VALUES
        (#{compensateEventSubscription.id, jdbcType=NVARCHAR},
         1, #{compensateEventSubscription.eventType, jdbcType=NVARCHAR},
         #{compensateEventSubscription.eventName, jdbcType=NVARCHAR},
         #{compensateEventSubscription.executionId, jdbcType=NVARCHAR},
         #{compensateEventSubscription.processInstanceId, jdbcType=NVARCHAR},
         #{compensateEventSubscription.activityId, jdbcType=NVARCHAR},
         #{compensateEventSubscription.configuration, jdbcType=NVARCHAR},
         #{compensateEventSubscription.created, jdbcType=TIMESTAMP},
         #{compensateEventSubscription.processDefinitionId, jdbcType=NVARCHAR},
         #{compensateEventSubscription.subScopeId, jdbcType=NVARCHAR},
         #{compensateEventSubscription.scopeId, jdbcType=NVARCHAR},
         #{compensateEventSubscription.scopeDefinitionId, jdbcType=NVARCHAR},
         #{compensateEventSubscription.scopeDefinitionKey, jdbcType=NVARCHAR},
         #{compensateEventSubscription.scopeType, jdbcType=NVARCHAR},
         #{compensateEventSubscription.tenantId, jdbcType=NVARCHAR})
      </foreach>
    SELECT * FROM dual
  </insert>
  
  <!-- Compensate UPDATE -->

  <update id="updateCompensateEventSubscription" parameterType="org.flowable.eventsubscription.service.impl.persistence.entity.CompensateEventSubscriptionEntityImpl">
    update ${prefix}ACT_RU_EVENT_SUBSCR
    <set>
       REV_ =  #{revisionNext, jdbcType=INTEGER},
       <if test="originalPersistentState.eventName != eventName">
           EVENT_NAME_ = #{eventName, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.executionId != executionId">
           EXECUTION_ID_ = #{executionId, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.processInstanceId != processInstanceId">
           PROC_INST_ID_ = #{processInstanceId, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.activityId != activityId">
           ACTIVITY_ID_ = #{activityId, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.configuration != configuration">
           CONFIGURATION_ = #{configuration, jdbcType=NVARCHAR},  
      </if>
      <if test="originalPersistentState.subScopeId != subScopeId">
           SUB_SCOPE_ID_ = #{subScopeId, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.scopeId != scopeId">
           SCOPE_ID_ = #{scopeId, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.scopeDefinitionId != scopeDefinitionId">
           SCOPE_DEFINITION_ID_ = #{scopeDefinitionId, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.scopeDefinitionKey != scopeDefinitionKey">
           SCOPE_DEFINITION_KEY_ = #{scopeDefinitionKey, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.scopeType != scopeType">
           SCOPE_TYPE_ = #{scopeType, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.created != created">
           CREATED_ = #{created, jdbcType=TIMESTAMP},
      </if>
      <if test="originalPersistentState.lockOwner != lockOwner">
           LOCK_OWNER_ = #{lockOwner, jdbcType=NVARCHAR},
      </if>
      <if test="originalPersistentState.lockTime != lockTime">
           LOCK_TIME_ = #{lockTime, jdbcType=TIMESTAMP},
      </if>
      <if test="originalPersistentState.tenantId != tenantId">
           TENANT_ID_ = #{tenantId, jdbcType=NVARCHAR}
      </if>
    </set>
    where ID_= #{id, jdbcType=NVARCHAR}
      and REV_ = #{revision, jdbcType=INTEGER}
  </update>

    <!-- Generic INSERT -->

    <insert id="insertGenericEventSubscription" parameterType="org.flowable.eventsubscription.service.impl.persistence.entity.GenericEventSubscriptionEntityImpl">
    insert into ${prefix}ACT_RU_EVENT_SUBSCR (
            ID_,
            REV_,
            EVENT_TYPE_,
           	EVENT_NAME_,
           	EXECUTION_ID_,
           	PROC_INST_ID_,
           	ACTIVITY_ID_,
           	CONFIGURATION_,
           	CREATED_,
           	PROC_DEF_ID_,
            SUB_SCOPE_ID_,
            SCOPE_ID_,
            SCOPE_DEFINITION_ID_,
            SCOPE_DEFINITION_KEY_,
            SCOPE_TYPE_,
           	TENANT_ID_
    )
    values (#{id, jdbcType=NVARCHAR},
            1, #{eventType, jdbcType=NVARCHAR},
            #{eventName, jdbcType=NVARCHAR},
            #{executionId, jdbcType=NVARCHAR},
            #{processInstanceId, jdbcType=NVARCHAR},
            #{activityId, jdbcType=NVARCHAR},
            #{configuration, jdbcType=NVARCHAR},
            #{created, jdbcType=TIMESTAMP},
            #{processDefinitionId, jdbcType=NVARCHAR},
            #{subScopeId, jdbcType=NVARCHAR},
            #{scopeId, jdbcType=NVARCHAR},
            #{scopeDefinitionId, jdbcType=NVARCHAR},
            #{scopeDefinitionKey, jdbcType=NVARCHAR},
            #{scopeType, jdbcType=NVARCHAR},
            #{tenantId, jdbcType=NVARCHAR}
    )
  </insert>

    <insert id="bulkInsertGenericEventSubscription" parameterType="java.util.List">
        insert into ${prefix}ACT_RU_EVENT_SUBSCR (
        ID_,
        REV_,
        EVENT_TYPE_,
        EVENT_NAME_,
        EXECUTION_ID_,
        PROC_INST_ID_,
        ACTIVITY_ID_,
        CONFIGURATION_,
        CREATED_,
        PROC_DEF_ID_,
        SUB_SCOPE_ID_,
        SCOPE_ID_,
        SCOPE_DEFINITION_ID_,
        SCOPE_DEFINITION_KEY_,
        SCOPE_TYPE_,
        TENANT_ID_
        )
        values
        <foreach collection="list" item="eventSubscription" index="index" separator=",">
            (#{eventSubscription.id, jdbcType=NVARCHAR},
            1, #{eventSubscription.eventType, jdbcType=NVARCHAR},
            #{eventSubscription.eventName, jdbcType=NVARCHAR},
            #{eventSubscription.executionId, jdbcType=NVARCHAR},
            #{eventSubscription.processInstanceId, jdbcType=NVARCHAR},
            #{eventSubscription.activityId, jdbcType=NVARCHAR},
            #{eventSubscription.configuration, jdbcType=NVARCHAR},
            #{eventSubscription.created, jdbcType=TIMESTAMP},
            #{eventSubscription.processDefinitionId, jdbcType=NVARCHAR},
            #{eventSubscription.subScopeId, jdbcType=NVARCHAR},
            #{eventSubscription.scopeId, jdbcType=NVARCHAR},
            #{eventSubscription.scopeDefinitionId, jdbcType=NVARCHAR},
            #{eventSubscription.scopeDefinitionKey, jdbcType=NVARCHAR},
            #{eventSubscription.scopeType, jdbcType=NVARCHAR},
            #{eventSubscription.tenantId, jdbcType=NVARCHAR})
        </foreach>
    </insert>

    <insert id="bulkInsertGenericEventSubscription" databaseId="oracle" parameterType="java.util.List">
        INSERT ALL
        <foreach collection="list" item="eventSubscription" index="index">
            into ${prefix}ACT_RU_EVENT_SUBSCR (
            ID_,
            REV_,
            EVENT_TYPE_,
            EVENT_NAME_,
            EXECUTION_ID_,
            PROC_INST_ID_,
            ACTIVITY_ID_,
            CONFIGURATION_,
            CREATED_,
            PROC_DEF_ID_,
            SUB_SCOPE_ID_,
            SCOPE_ID_,
            SCOPE_DEFINITION_ID_,
            SCOPE_DEFINITION_KEY_,
            SCOPE_TYPE_,
            TENANT_ID_
            )
            VALUES
            (#{eventSubscription.id, jdbcType=NVARCHAR},
            1, #{eventSubscription.eventType, jdbcType=NVARCHAR},
            #{eventSubscription.eventName, jdbcType=NVARCHAR},
            #{eventSubscription.executionId, jdbcType=NVARCHAR},
            #{eventSubscription.processInstanceId, jdbcType=NVARCHAR},
            #{eventSubscription.activityId, jdbcType=NVARCHAR},
            #{eventSubscription.configuration, jdbcType=NVARCHAR},
            #{eventSubscription.created, jdbcType=TIMESTAMP},
            #{eventSubscription.processDefinitionId, jdbcType=NVARCHAR},
            #{eventSubscription.subScopeId, jdbcType=NVARCHAR},
            #{eventSubscription.scopeId, jdbcType=NVARCHAR},
            #{eventSubscription.scopeDefinitionId, jdbcType=NVARCHAR},
            #{eventSubscription.scopeDefinitionKey, jdbcType=NVARCHAR},
            #{eventSubscription.scopeType, jdbcType=NVARCHAR},
            #{eventSubscription.tenantId, jdbcType=NVARCHAR})
        </foreach>
        SELECT * FROM dual
    </insert>

    <!-- Compensate UPDATE -->

    <update id="updateGenericEventSubscription" parameterType="org.flowable.eventsubscription.service.impl.persistence.entity.GenericEventSubscriptionEntityImpl">
        update ${prefix}ACT_RU_EVENT_SUBSCR
        <set>
            REV_ =  #{revisionNext, jdbcType=INTEGER},
            <if test="originalPersistentState.eventName != eventName">
                EVENT_NAME_ = #{eventName, jdbcType=NVARCHAR},
            </if>
            <if test="originalPersistentState.eventType != eventType">
                EVENT_TYPE_ = #{eventType, jdbcType=NVARCHAR},
            </if>
            <if test="originalPersistentState.executionId != executionId">
                EXECUTION_ID_ = #{executionId, jdbcType=NVARCHAR},
            </if>
            <if test="originalPersistentState.processInstanceId != processInstanceId">
                PROC_INST_ID_ = #{processInstanceId, jdbcType=NVARCHAR},
            </if>
            <if test="originalPersistentState.activityId != activityId">
                ACTIVITY_ID_ = #{activityId, jdbcType=NVARCHAR},
            </if>
            <if test="originalPersistentState.configuration != configuration">
                CONFIGURATION_ = #{configuration, jdbcType=NVARCHAR},
            </if>
            <if test="originalPersistentState.subScopeId != subScopeId">
                SUB_SCOPE_ID_ = #{subScopeId, jdbcType=NVARCHAR},
            </if>
            <if test="originalPersistentState.scopeId != scopeId">
                SCOPE_ID_ = #{scopeId, jdbcType=NVARCHAR},
            </if>
            <if test="originalPersistentState.scopeDefinitionId != scopeDefinitionId">
                SCOPE_DEFINITION_ID_ = #{scopeDefinitionId, jdbcType=NVARCHAR},
            </if>
            <if test="originalPersistentState.scopeDefinitionKey != scopeDefinitionKey">
                SCOPE_DEFINITION_KEY_ = #{scopeDefinitionKey, jdbcType=NVARCHAR},
            </if>
            <if test="originalPersistentState.scopeType != scopeType">
                SCOPE_TYPE_ = #{scopeType, jdbcType=NVARCHAR},
            </if>
            <if test="originalPersistentState.created != created">
                CREATED_ = #{created, jdbcType=TIMESTAMP},
            </if>
            <if test="originalPersistentState.lockOwner != lockOwner">
                LOCK_OWNER_ = #{lockOwner, jdbcType=NVARCHAR},
            </if>
            <if test="originalPersistentState.lockTime != lockTime">
                LOCK_TIME_ = #{lockTime, jdbcType=TIMESTAMP},
            </if>
            <if test="originalPersistentState.tenantId != tenantId">
                TENANT_ID_ = #{tenantId, jdbcType=NVARCHAR}
            </if>
        </set>
        where ID_= #{id, jdbcType=NVARCHAR}
        and REV_ = #{revision, jdbcType=INTEGER}
    </update>

  <!--  tenantId update -->
   <update id="updateTenantIdOfEventSubscriptions" parameterType="map">
    update ${prefix}ACT_RU_EVENT_SUBSCR
    <set>
      TENANT_ID_ = #{newTenantId, jdbcType=NVARCHAR}
    </set>
    where TENANT_ID_ = #{oldTenantId, jdbcType=NVARCHAR}
  </update>

 <!-- process definition id update -->
   <update id="updateManualProcessStartEventSubscriptionWithProcessDefinitionId" parameterType="map">
    update ${prefix}ACT_RU_EVENT_SUBSCR
    set PROC_DEF_ID_ = #{newProcessDefinitionId, jdbcType=NVARCHAR}
    where PROC_DEF_ID_ = #{oldProcessDefinitionId, jdbcType=NVARCHAR}
    and EVENT_TYPE_ = #{eventType, jdbcType=NVARCHAR}
    and ACTIVITY_ID_ = #{activityId, jdbcType=NVARCHAR}
    <if test="scopeDefinitionKey != null">
        and SCOPE_DEFINITION_KEY_ = #{scopeDefinitionKey, jdbcType=NVARCHAR}
    </if>
    <if test="configuration != null">
        and CONFIGURATION_ = #{configuration, jdbcType=NVARCHAR}
    </if>
   </update> <!-- process definition id update -->

   <update id="updateManualScopeStartEventSubscriptionWithScopeDefinitionId" parameterType="map">
    update ${prefix}ACT_RU_EVENT_SUBSCR
    set SCOPE_DEFINITION_ID_ = #{newScopeDefinitionId, jdbcType=NVARCHAR}
    where SCOPE_DEFINITION_ID_ = #{oldScopeDefinitionId, jdbcType=NVARCHAR}
    and EVENT_TYPE_ = #{eventType, jdbcType=NVARCHAR}
    <if test="scopeDefinitionKey != null">
        and SCOPE_DEFINITION_KEY_ = #{scopeDefinitionKey, jdbcType=NVARCHAR}
    </if>
    <if test="configuration != null">
        and CONFIGURATION_ = #{configuration, jdbcType=NVARCHAR}
    </if>
   </update>

  <update id="updateEventSubscriptionLockTime" parameterType="java.util.Map">
    update ${prefix}ACT_RU_EVENT_SUBSCR
    set
        LOCK_TIME_ = #{lockTime, jdbcType=TIMESTAMP},
        LOCK_OWNER_ = #{lockOwner, jdbcType=NVARCHAR}
    where ID_ = #{id, jdbcType=NVARCHAR}
    and (LOCK_TIME_ is null OR LOCK_TIME_ &lt; #{currentTime, jdbcType=TIMESTAMP})
  </update>

  <update id="clearEventSubscriptionLockTime" parameterType="java.util.Map">
    update ${prefix}ACT_RU_EVENT_SUBSCR
    set
        LOCK_TIME_ = null,
        LOCK_OWNER_ = null
    where ID_ = #{id, jdbcType=NVARCHAR}
  </update>

  <!-- DELETE -->

  <delete id="deleteSignalEventSubscription" parameterType="org.flowable.eventsubscription.service.impl.persistence.entity.EventSubscriptionEntityImpl">
    delete from ${prefix}ACT_RU_EVENT_SUBSCR where ID_ = #{id, jdbcType=NVARCHAR} and REV_ = #{revision, jdbcType=INTEGER}
  </delete>
  
  <delete id="deleteCompensateEventSubscription" parameterType="org.flowable.eventsubscription.service.impl.persistence.entity.EventSubscriptionEntityImpl">
    delete from ${prefix}ACT_RU_EVENT_SUBSCR where ID_ = #{id, jdbcType=NVARCHAR} and REV_ = #{revision, jdbcType=INTEGER}
  </delete>
  
  <delete id="deleteMessageEventSubscription" parameterType="org.flowable.eventsubscription.service.impl.persistence.entity.EventSubscriptionEntityImpl">
    delete from ${prefix}ACT_RU_EVENT_SUBSCR where ID_ = #{id, jdbcType=NVARCHAR} and REV_ = #{revision, jdbcType=INTEGER}
  </delete>

  <delete id="deleteGenericEventSubscription" parameterType="org.flowable.eventsubscription.service.impl.persistence.entity.GenericEventSubscriptionEntityImpl">
    delete from ${prefix}ACT_RU_EVENT_SUBSCR where ID_ = #{id, jdbcType=NVARCHAR} and REV_ = #{revision, jdbcType=INTEGER}
  </delete>
  
  <delete id="deleteEventSubscriptionsForProcessDefinition" parameterType="string">
    delete from ${prefix}ACT_RU_EVENT_SUBSCR 
    where PROC_DEF_ID_ = #{processDefinitionId, jdbcType=NVARCHAR} 
    and EXECUTION_ID_ is null
    and PROC_INST_ID_ is null
  </delete>
  
  <delete id="deleteEventSubscriptionsByExecutionId" parameterType="string">
     delete from ${prefix}ACT_RU_EVENT_SUBSCR where EXECUTION_ID_ = #{executionId, jdbcType=NVARCHAR}
  </delete>
  
  <delete id="deleteEventSubscriptionsForScopeIdAndType" parameterType="map">
     delete from ${prefix}ACT_RU_EVENT_SUBSCR where SCOPE_ID_ = #{scopeId, jdbcType=NVARCHAR} and SCOPE_TYPE_ = #{scopeType, jdbcType=NVARCHAR}
  </delete>

  <delete id="deleteEventSubscriptionsForScopeDefinitionIdAndType" parameterType="map">
     delete from ${prefix}ACT_RU_EVENT_SUBSCR where SCOPE_DEFINITION_ID_ = #{scopeDefinitionId, jdbcType=NVARCHAR} and SCOPE_TYPE_ = #{scopeType, jdbcType=NVARCHAR}
  </delete>

  <delete id="deleteEventSubscriptionsForScopeDefinitionIdAndTypeAndNullScopeId" parameterType="map">
     delete from ${prefix}ACT_RU_EVENT_SUBSCR where
     SCOPE_DEFINITION_ID_ = #{scopeDefinitionId, jdbcType=NVARCHAR}
     and SCOPE_TYPE_ = #{scopeType, jdbcType=NVARCHAR}
     and SCOPE_ID_ is null
  </delete>

 <!-- delete manual subscriptions for process start -->
  <delete id="deleteManualProcessStartEventSubscriptions" parameterType="map">
    delete from ${prefix}ACT_RU_EVENT_SUBSCR where
    PROC_DEF_ID_ = #{processDefinitionId, jdbcType=NVARCHAR}
    and EVENT_TYPE_ = #{eventType, jdbcType=NVARCHAR}
    and ACTIVITY_ID_ = #{activityId, jdbcType=NVARCHAR}
    <if test="configuration != null">
        and CONFIGURATION_ = #{configuration, jdbcType=NVARCHAR}
    </if>
  </delete>

  <delete id="deleteManualScopeStartEventSubscriptions" parameterType="map">
    delete from ${prefix}ACT_RU_EVENT_SUBSCR where
    SCOPE_DEFINITION_ID_ = #{scopeDefinitionId, jdbcType=NVARCHAR}
    and EVENT_TYPE_ = #{eventType, jdbcType=NVARCHAR}
    <if test="configuration != null">
        and CONFIGURATION_ = #{configuration, jdbcType=NVARCHAR}
    </if>
  </delete>

</mapper>
