<?xml version="1.0" encoding="UTF-8" ?>

<!--
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->


<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.flowable.task.service.impl.persistence.entity.TaskEntityImpl">

  <!-- TASK INSERT -->

  <insert id="insertTask" parameterType="org.flowable.task.service.impl.persistence.entity.TaskEntityImpl">
    insert into ${prefix}ACT_RU_TASK (ID_, REV_, NAME_, PARENT_TASK_ID_, DESCRIPTION_, PRIORITY_, CREATE_TIME_, OWNER_, ASSIGNEE_, DELEGATION_,
                      EXECUTION_ID_, PROC_INST_ID_, PROC_DEF_ID_, TASK_DEF_ID_, SCOPE_ID_, SUB_SCOPE_ID_, SCOPE_TYPE_, SCOPE_DEFINITION_ID_,
                      PROPAGATED_STAGE_INST_ID_, TASK_DEF_KEY_, DUE_DATE_, CATEGORY_, SUSPENSION_STATE_, TENANT_ID_, FORM_KEY_, CLAIM_TIME_,
                      IS_COUNT_ENABLED_, VAR_COUNT_, ID_LINK_COUNT_, SUB_TASK_COUNT_)
    values (#{id, jdbcType=VARCHAR},
            1, #{name, jdbcType=VARCHAR},
            #{parentTaskId, jdbcType=VARCHAR},
            #{description, jdbcType=VARCHAR},
            #{priority, jdbcType=INTEGER},
            #{createTime, jdbcType=TIMESTAMP},
            #{owner, jdbcType=VARCHAR},
            #{assignee, jdbcType=VARCHAR},
            #{delegationStateString, jdbcType=VARCHAR},
            #{executionId, jdbcType=VARCHAR},
            #{processInstanceId, jdbcType=VARCHAR},
            #{processDefinitionId, jdbcType=VARCHAR},
            #{taskDefinitionId, jdbcType=VARCHAR},
            #{scopeId, jdbcType=VARCHAR},
            #{subScopeId, jdbcType=VARCHAR},
            #{scopeType, jdbcType=VARCHAR},
            #{scopeDefinitionId, jdbcType=VARCHAR},
            #{propagatedStageInstanceId, jdbcType=VARCHAR},
            #{taskDefinitionKey, jdbcType=VARCHAR},
            #{dueDate, jdbcType=TIMESTAMP},
            #{category, jdbcType=VARCHAR},
            #{suspensionState, jdbcType=INTEGER},
            #{tenantId, jdbcType=VARCHAR},
            #{formKey, jdbcType=VARCHAR},
            #{claimTime, jdbcType=TIMESTAMP},
            #{isCountEnabled, jdbcType=BOOLEAN},
            #{variableCount, jdbcType=INTEGER},
            #{identityLinkCount, jdbcType=INTEGER},
            #{subTaskCount, jdbcType=INTEGER}
           )
  </insert>

  <insert id="bulkInsertTask" parameterType="java.util.List">
    INSERT INTO ${prefix}ACT_RU_TASK (ID_, REV_, NAME_, PARENT_TASK_ID_, DESCRIPTION_, PRIORITY_, CREATE_TIME_, OWNER_, ASSIGNEE_, DELEGATION_,
        EXECUTION_ID_, PROC_INST_ID_, PROC_DEF_ID_, TASK_DEF_ID_, SCOPE_ID_, SUB_SCOPE_ID_, SCOPE_TYPE_, SCOPE_DEFINITION_ID_, PROPAGATED_STAGE_INST_ID_,
        TASK_DEF_KEY_, DUE_DATE_, CATEGORY_, SUSPENSION_STATE_, TENANT_ID_, FORM_KEY_, CLAIM_TIME_,
        IS_COUNT_ENABLED_, VAR_COUNT_, ID_LINK_COUNT_, SUB_TASK_COUNT_)
    VALUES
      <foreach collection="list" item="task" index="index" separator=",">
        (#{task.id, jdbcType=VARCHAR},
         1, #{task.name, jdbcType=VARCHAR},
         #{task.parentTaskId, jdbcType=VARCHAR},
         #{task.description, jdbcType=VARCHAR},
         #{task.priority, jdbcType=INTEGER},
         #{task.createTime, jdbcType=TIMESTAMP},
         #{task.owner, jdbcType=VARCHAR},
         #{task.assignee, jdbcType=VARCHAR},
         #{task.delegationStateString, jdbcType=VARCHAR},
         #{task.executionId, jdbcType=VARCHAR},
         #{task.processInstanceId, jdbcType=VARCHAR},
         #{task.processDefinitionId, jdbcType=VARCHAR},
         #{task.taskDefinitionId, jdbcType=VARCHAR},
         #{task.scopeId, jdbcType=VARCHAR},
         #{task.subScopeId, jdbcType=VARCHAR},
         #{task.scopeType, jdbcType=VARCHAR},
         #{task.scopeDefinitionId, jdbcType=VARCHAR},
         #{task.propagatedStageInstanceId, jdbcType=VARCHAR},
         #{task.taskDefinitionKey, jdbcType=VARCHAR},
         #{task.dueDate, jdbcType=TIMESTAMP},
         #{task.category, jdbcType=VARCHAR},
         #{task.suspensionState, jdbcType=INTEGER},
         #{task.tenantId, jdbcType=VARCHAR},
         #{task.formKey, jdbcType=VARCHAR},
         #{task.claimTime, jdbcType=TIMESTAMP},
         #{task.isCountEnabled, jdbcType=BOOLEAN},
         #{task.variableCount, jdbcType=INTEGER},
         #{task.identityLinkCount, jdbcType=INTEGER},
         #{task.subTaskCount, jdbcType=INTEGER}
         )
    </foreach>
  </insert>

  <insert id="bulkInsertTask" databaseId="oracle" parameterType="java.util.List">
    INSERT ALL
      <foreach collection="list" item="task" index="index">
        INTO ${prefix}ACT_RU_TASK (ID_, REV_, NAME_, PARENT_TASK_ID_, DESCRIPTION_, PRIORITY_, CREATE_TIME_, OWNER_, ASSIGNEE_, DELEGATION_,
              EXECUTION_ID_, PROC_INST_ID_, PROC_DEF_ID_, TASK_DEF_ID_, SCOPE_ID_, SUB_SCOPE_ID_, SCOPE_TYPE_, SCOPE_DEFINITION_ID_, PROPAGATED_STAGE_INST_ID_, TASK_DEF_KEY_,
              DUE_DATE_, CATEGORY_, SUSPENSION_STATE_, TENANT_ID_, FORM_KEY_, CLAIM_TIME_,
              IS_COUNT_ENABLED_, VAR_COUNT_, ID_LINK_COUNT_, SUB_TASK_COUNT_) VALUES
        (#{task.id, jdbcType=VARCHAR},
         1, #{task.name, jdbcType=VARCHAR},
         #{task.parentTaskId, jdbcType=VARCHAR},
         #{task.description, jdbcType=VARCHAR},
         #{task.priority, jdbcType=INTEGER},
         #{task.createTime, jdbcType=TIMESTAMP},
         #{task.owner, jdbcType=VARCHAR},
         #{task.assignee, jdbcType=VARCHAR},
         #{task.delegationStateString, jdbcType=VARCHAR},
         #{task.executionId, jdbcType=VARCHAR},
         #{task.processInstanceId, jdbcType=VARCHAR},
         #{task.processDefinitionId, jdbcType=VARCHAR},
         #{task.taskDefinitionId, jdbcType=VARCHAR},
         #{task.scopeId, jdbcType=VARCHAR},
         #{task.subScopeId, jdbcType=VARCHAR},
         #{task.scopeType, jdbcType=VARCHAR},
         #{task.scopeDefinitionId, jdbcType=VARCHAR},
         #{task.propagatedStageInstanceId, jdbcType=VARCHAR},
         #{task.taskDefinitionKey, jdbcType=VARCHAR},
         #{task.dueDate, jdbcType=TIMESTAMP},
         #{task.category, jdbcType=VARCHAR},
         #{task.suspensionState, jdbcType=INTEGER},
         #{task.tenantId, jdbcType=VARCHAR},
         #{task.formKey, jdbcType=VARCHAR},
         #{task.claimTime, jdbcType=TIMESTAMP},
         #{task.isCountEnabled, jdbcType=BOOLEAN},
         #{task.variableCount, jdbcType=INTEGER},
         #{task.identityLinkCount, jdbcType=INTEGER},
         #{task.subTaskCount, jdbcType=INTEGER}
         )
    </foreach>
    SELECT * FROM dual
  </insert>

  <!-- TASK UPDATE -->

  <update id="updateTask" parameterType="org.flowable.task.service.impl.persistence.entity.TaskEntityImpl">
    update ${prefix}ACT_RU_TASK
    <set>
      REV_ = #{revisionNext, jdbcType=INTEGER},
      <if test="originalPersistentState.name != name">
          NAME_ = #{name, jdbcType=VARCHAR},
      </if>
      <if test="originalPersistentState.parentTaskId != parentTaskId">
          PARENT_TASK_ID_ = #{parentTaskId, jdbcType=VARCHAR},
      </if>
      <if test="originalPersistentState.priority != priority">
          PRIORITY_ = #{priority, jdbcType=INTEGER},
      </if>
      <if test="originalPersistentState.createTime != createTime">
          CREATE_TIME_ = #{createTime, jdbcType=TIMESTAMP},
      </if>
      <if test="originalPersistentState.owner != owner">
          OWNER_ = #{owner, jdbcType=VARCHAR},
      </if>
      <if test="originalPersistentState.assignee != assignee">
          ASSIGNEE_ = #{assignee, jdbcType=VARCHAR},
      </if>
      <if test="originalPersistentState.delegationStateString != delegationStateString">
          DELEGATION_ = #{delegationStateString, jdbcType=VARCHAR},
      </if>
      <if test="originalPersistentState.executionId != executionId">
          EXECUTION_ID_ = #{executionId, jdbcType=VARCHAR},
      </if>
      <if test="originalPersistentState.processDefinitionId != processDefinitionId">
          PROC_DEF_ID_ = #{processDefinitionId, jdbcType=VARCHAR},
      </if>
      <if test="originalPersistentState.taskDefinitionId != taskDefinitionId">
          TASK_DEF_ID_ = #{taskDefinitionId, jdbcType=VARCHAR},
      </if>
      <if test="originalPersistentState.taskDefinitionKey != taskDefinitionKey">
          TASK_DEF_KEY_ = #{taskDefinitionKey, jdbcType=VARCHAR},
      </if>
      <if test="originalPersistentState.scopeId != scopeId">
          SCOPE_ID_ = #{scopeId, jdbcType=VARCHAR},
      </if>
      <if test="originalPersistentState.subScopeId != subScopeId">
          SUB_SCOPE_ID_ = #{subScopeId, jdbcType=VARCHAR},
      </if>
      <if test="originalPersistentState.scopeType != scopeType">
          SCOPE_TYPE_ = #{scopeType, jdbcType=VARCHAR},
      </if>
      <if test="originalPersistentState.scopeDefinitionId != scopeDefinitionId">
          SCOPE_DEFINITION_ID_ = #{scopeDefinitionId, jdbcType=VARCHAR},
      </if>
      <if test="originalPersistentState.propagatedStageInstanceId != propagatedStageInstanceId">
          PROPAGATED_STAGE_INST_ID_ = ${propagatedStageInstanceId, jdbcType=VARCHAR},
      </if>
      <if test="originalPersistentState.description != description">
          DESCRIPTION_ = #{description, jdbcType=VARCHAR},
      </if>
      <if test="originalPersistentState.dueDate != dueDate">
          DUE_DATE_ = #{dueDate, jdbcType=TIMESTAMP},
      </if>
      <if test="originalPersistentState.category != category">
          CATEGORY_ = #{category, jdbcType=VARCHAR},
      </if>
      <if test="originalPersistentState.suspensionState != suspensionState">
          SUSPENSION_STATE_ = #{suspensionState, jdbcType=INTEGER},
      </if>
      <if test="originalPersistentState.formKey != formKey">
          FORM_KEY_ = #{formKey, jdbcType=VARCHAR},
      </if>
      <if test="originalPersistentState.claimTime != claimTime">
          CLAIM_TIME_ = #{claimTime, jdbcType=TIMESTAMP},
      </if>
      <if test="originalPersistentState.isCountEnabled != isCountEnabled">
          IS_COUNT_ENABLED_ = #{isCountEnabled, jdbcType=BOOLEAN},
      </if>
      <if test="originalPersistentState.variableCount != variableCount">
          VAR_COUNT_ = #{variableCount, jdbcType=INTEGER},
      </if>
      <if test="originalPersistentState.identityLinkCount != identityLinkCount">
          ID_LINK_COUNT_ = #{identityLinkCount, jdbcType=INTEGER},
      </if>
      <if test="originalPersistentState.subTaskCount != subTaskCount">
          SUB_TASK_COUNT_ = #{subTaskCount, jdbcType=INTEGER},
      </if>
    </set>
    where ID_= #{id, jdbcType=VARCHAR}
      and REV_ = #{revision, jdbcType=INTEGER}
  </update>

  <update id="updateTaskTenantIdForDeployment" parameterType="java.util.Map">
    update ${prefix}ACT_RU_TASK set
      TENANT_ID_ = #{tenantId, jdbcType=VARCHAR}
    where
      ID_ in (
        SELECT T.ID_ from ${prefix}ACT_RU_TASK T
        inner join ${prefix}ACT_RE_PROCDEF P on T.PROC_DEF_ID_  = P.ID_
        inner join ${prefix}ACT_RE_DEPLOYMENT D on P.DEPLOYMENT_ID_ = D.ID_
        where D.ID_ = #{deploymentId, jdbcType=VARCHAR}
      )
  </update>

    <!-- See http://stackoverflow.com/questions/4429319/you-cant-specify-target-table-for-update-in-from-clause
       Tested this on MySQL 5.6: does NOT use a temporary table (so good, performance0 -->
  <update id="updateTaskTenantIdForDeployment" databaseId="mysql" parameterType="java.util.Map">
    update ${prefix}ACT_RU_TASK set
      TENANT_ID_ = #{tenantId, jdbcType=VARCHAR}
    where
      ID_ in (

          SELECT tempTask.tempId
          FROM (
                SELECT T.ID_ as tempId
                FROM  ${prefix}ACT_RU_TASK T
                inner join ${prefix}ACT_RE_PROCDEF P on T.PROC_DEF_ID_  = P.ID_
                inner join ${prefix}ACT_RE_DEPLOYMENT D on P.DEPLOYMENT_ID_ = D.ID_
                where D.ID_ = #{deploymentId, jdbcType=VARCHAR}

        ) AS tempTask

    )
  </update>


  <update id="updateTaskRelatedEntityCountEnabled" parameterType="boolean">
    update ${prefix}ACT_RU_TASK
    set IS_COUNT_ENABLED_ = #{parameter, jdbcType=BOOLEAN}
  </update>

  <!-- TASK DELETE -->
  <delete id="deleteTask" parameterType="org.flowable.task.service.impl.persistence.entity.TaskEntityImpl">
    delete from ${prefix}ACT_RU_TASK where ID_ = #{id} and REV_ = #{revision}
  </delete>

  <delete id="deleteTasksByExecutionId" parameterType="string">
    delete from ${prefix}ACT_RU_TASK where EXECUTION_ID_ = #{id}
  </delete>

  <delete id="bulkDeleteTask" parameterType="java.util.Collection">
    delete from ${prefix}ACT_RU_TASK where
    <foreach item="task" collection="list" index="index" separator=" or ">
        ID_ = #{task.id, jdbcType=VARCHAR}
    </foreach>
  </delete>

  <!-- TASK RESULTMAP -->

  <resultMap id="taskResultMap" type="org.flowable.task.service.impl.persistence.entity.TaskEntityImpl">
    <id property="id" column="ID_" jdbcType="VARCHAR"/>
    <result property="revision" column="REV_" jdbcType="INTEGER"/>
    <result property="name" column="NAME_" jdbcType="VARCHAR"/>
    <result property="parentTaskId" column="PARENT_TASK_ID_" jdbcType="VARCHAR"/>
    <result property="description" column="DESCRIPTION_" jdbcType="VARCHAR"/>
    <result property="priority" column="PRIORITY_" jdbcType="INTEGER"/>
    <result property="createTime" column="CREATE_TIME_" jdbcType="TIMESTAMP" />
    <result property="owner" column="OWNER_" jdbcType="VARCHAR"/>
    <result property="assignee" column="ASSIGNEE_" jdbcType="VARCHAR"/>
    <result property="delegationStateString" column="DELEGATION_" jdbcType="VARCHAR"/>
    <result property="executionId" column="EXECUTION_ID_" jdbcType="VARCHAR" />
    <result property="processInstanceId" column="PROC_INST_ID_" jdbcType="VARCHAR" />
    <result property="processDefinitionId" column="PROC_DEF_ID_" jdbcType="VARCHAR"/>
    <result property="taskDefinitionId" column="TASK_DEF_ID_" jdbcType="VARCHAR"/>
    <result property="scopeId" column="SCOPE_ID_" jdbcType="VARCHAR"/>
    <result property="subScopeId" column="SUB_SCOPE_ID_" jdbcType="VARCHAR"/>
    <result property="scopeType" column="SCOPE_TYPE_" jdbcType="VARCHAR"/>
    <result property="scopeDefinitionId" column="SCOPE_DEFINITION_ID_" jdbcType="VARCHAR"/>
    <result property="propagatedStageInstanceId" column="PROPAGATED_STAGE_INST_ID_" jdbcType="VARCHAR"/>
    <result property="taskDefinitionKey" column="TASK_DEF_KEY_" jdbcType="VARCHAR"/>
    <result property="dueDate" column="DUE_DATE_" jdbcType="TIMESTAMP"/>
    <result property="category" column="CATEGORY_" jdbcType="VARCHAR" />
    <result property="suspensionState" column="SUSPENSION_STATE_" jdbcType="INTEGER" />
    <result property="tenantId" column="TENANT_ID_" jdbcType="VARCHAR" />
    <result property="formKey" column="FORM_KEY_" jdbcType="VARCHAR" />
    <result property="claimTime" column="CLAIM_TIME_" jdbcType="TIMESTAMP" />
    <result property="isCountEnabled" column="IS_COUNT_ENABLED_" jdbcType="BOOLEAN" />
    <result property="variableCount" column="VAR_COUNT_" jdbcType="INTEGER" />
    <result property="identityLinkCount" column="ID_LINK_COUNT_" jdbcType="INTEGER" />
    <result property="subTaskCount" column="SUB_TASK_COUNT_" jdbcType="INTEGER" />
  </resultMap>

  <resultMap id="taskAndRelatedEntitiesResultMap" type="org.flowable.task.service.impl.persistence.entity.TaskEntityImpl">
    <id property="id" column="ID_" jdbcType="VARCHAR"/>
    <result property="revision" column="REV_" jdbcType="INTEGER"/>
    <result property="name" column="NAME_" jdbcType="VARCHAR"/>
    <result property="parentTaskId" column="PARENT_TASK_ID_" jdbcType="VARCHAR"/>
    <result property="description" column="DESCRIPTION_" jdbcType="VARCHAR"/>
    <result property="priority" column="PRIORITY_" jdbcType="INTEGER"/>
    <result property="createTime" column="CREATE_TIME_" jdbcType="TIMESTAMP" />
    <result property="owner" column="OWNER_" jdbcType="VARCHAR"/>
    <result property="assignee" column="ASSIGNEE_" jdbcType="VARCHAR"/>
    <result property="delegationStateString" column="DELEGATION_" jdbcType="VARCHAR"/>
    <result property="executionId" column="EXECUTION_ID_" jdbcType="VARCHAR" />
    <result property="processInstanceId" column="PROC_INST_ID_" jdbcType="VARCHAR" />
    <result property="processDefinitionId" column="PROC_DEF_ID_" jdbcType="VARCHAR"/>
    <result property="taskDefinitionId" column="TASK_DEF_ID_" jdbcType="VARCHAR"/>
    <result property="scopeId" column="SCOPE_ID_" jdbcType="VARCHAR"/>
    <result property="subScopeId" column="SUB_SCOPE_ID_" jdbcType="VARCHAR"/>
    <result property="scopeType" column="SCOPE_TYPE_" jdbcType="VARCHAR"/>
    <result property="scopeDefinitionId" column="SCOPE_DEFINITION_ID_" jdbcType="VARCHAR"/>
    <result property="propagatedStageInstanceId" column="PROPAGATED_STAGE_INST_ID_" jdbcType="VARCHAR"/>
    <result property="taskDefinitionKey" column="TASK_DEF_KEY_" jdbcType="VARCHAR"/>
    <result property="dueDate" column="DUE_DATE_" jdbcType="TIMESTAMP"/>
    <result property="category" column="CATEGORY_" jdbcType="VARCHAR" />
    <result property="suspensionState" column="SUSPENSION_STATE_" jdbcType="INTEGER" />
    <result property="tenantId" column="TENANT_ID_" jdbcType="VARCHAR" />
    <result property="formKey" column="FORM_KEY_" jdbcType="VARCHAR" />
    <result property="claimTime" column="CLAIM_TIME_" jdbcType="TIMESTAMP" />
    <result property="isCountEnabled" column="IS_COUNT_ENABLED_" jdbcType="BOOLEAN" />
    <result property="variableCount" column="VAR_COUNT_" jdbcType="INTEGER" />
    <result property="identityLinkCount" column="ID_LINK_COUNT_" jdbcType="INTEGER" />
    <result property="subTaskCount" column="SUB_TASK_COUNT_" jdbcType="INTEGER" />
    <collection property="queryVariables" column="TASK_ID_" javaType="ArrayList" ofType="org.flowable.variable.service.impl.persistence.entity.VariableInstanceEntityImpl">
      <id property="id" column="VAR_ID_"/>
      <result property="name" column="VAR_NAME_" javaType="String" jdbcType="VARCHAR" />
      <result property="type" column="VAR_TYPE_" javaType="org.flowable.variable.api.types.VariableType" jdbcType="VARCHAR" />
      <result property="revision" column="VAR_REV_" jdbcType="INTEGER" />
      <result property="processInstanceId" column="VAR_PROC_INST_ID_" jdbcType="VARCHAR" />
      <result property="executionId" column="VAR_EXECUTION_ID_" jdbcType="VARCHAR" />
      <result property="taskId" column="VAR_TASK_ID_" jdbcType="VARCHAR" />
      <result property="byteArrayRef" column="VAR_BYTEARRAY_ID_" typeHandler="VariableByteArrayRefTypeHandler"/>
      <result property="doubleValue" column="VAR_DOUBLE_" jdbcType="DOUBLE" />
      <result property="textValue" column="VAR_TEXT_" jdbcType="VARCHAR" />
      <result property="textValue2" column="VAR_TEXT2_" jdbcType="VARCHAR" />
      <result property="longValue" column="VAR_LONG_" jdbcType="BIGINT" />
    </collection>
    <collection property="queryIdentityLinks" column="TASK_ID_" javaType="ArrayList" ofType="org.flowable.identitylink.service.impl.persistence.entity.IdentityLinkEntityImpl">
      <id property="id" column="ILINK_ID_"/>
      <result property="type" column="ILINK_TYPE_" jdbcType="VARCHAR" />
      <result property="userId" column="ILINK_USER_ID_" jdbcType="VARCHAR" />
      <result property="groupId" column="ILINK_GROUP_ID_" jdbcType="VARCHAR" />
      <result property="taskId" column="ILINK_TASK_ID_" jdbcType="VARCHAR" />
      <result property="processInstanceId" column="ILINK_PROC_INST_ID_" jdbcType="VARCHAR" />
      <result property="processDefId" column="ILINK_PROC_DEF_ID_" jdbcType="VARCHAR" />
    </collection>
  </resultMap>

  <!-- TASK SELECT -->

  <select id="selectTask" parameterType="string" resultMap="taskResultMap">
   select * from ${prefix}ACT_RU_TASK where ID_ = #{id, jdbcType=VARCHAR}
  </select>

  <select id="selectTasksByParentTaskId" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject" resultMap="taskResultMap">
    select * from ${prefix}ACT_RU_TASK where PARENT_TASK_ID_ = #{parameter}
  </select>

  <select id="selectTasksByExecutionId" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject" resultMap="taskResultMap">
    select distinct T.*
    from ${prefix}ACT_RU_TASK T
    where T.EXECUTION_ID_ = #{parameter}
  </select>

  <select id="selectTasksByProcessInstanceId" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject" resultMap="taskResultMap">
    select T.*
    from ${prefix}ACT_RU_TASK T
    where T.PROC_INST_ID_ = #{parameter}
  </select>

  <select id="selectTasksBySubScopeIdAndScopeType" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject" resultMap="taskResultMap">
    select T.*
    from ${prefix}ACT_RU_TASK T
    where T.SUB_SCOPE_ID_ = #{parameter.subScopeId, jdbcType=VARCHAR} and T.SCOPE_TYPE_ = #{parameter.scopeType, jdbcType=VARCHAR}
  </select>

  <select id="selectTasksByScopeIdAndScopeType" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject" resultMap="taskResultMap">
    select T.*
    from ${prefix}ACT_RU_TASK T
    where T.SCOPE_ID_ = #{parameter.scopeId, jdbcType=VARCHAR} and T.SCOPE_TYPE_ = #{parameter.scopeType, jdbcType=VARCHAR}
  </select>

  <select id="selectTaskByQueryCriteria" parameterType="org.flowable.task.service.impl.TaskQueryImpl" resultMap="taskResultMap">
      <if test="needsPaging">${limitBefore}</if>
      SELECT RES.* <if test="needsPaging">${limitBetween}</if>
      <include refid="selectTaskByQueryCriteriaSql"/>
      ${orderBy}
      <if test="needsPaging">${limitAfter}</if>
  </select>

  <select id="selectTaskCountByQueryCriteria" parameterType="org.flowable.task.service.impl.TaskQueryImpl" resultType="long">
    select count(distinct RES.ID_)
    <include refid="selectTaskByQueryCriteriaSql"/>
  </select>

  <sql id="selectTaskByQueryCriteriaSql">
    from ${prefix}ACT_RU_TASK RES
    <include refid="commonSelectTaskByQueryCriteriaSql"/>
  </sql>

    <!-- The ordering and the querying is done within a sub select, and then we do a join on the related entities -->
    <select id="selectTasksWithRelatedEntitiesByQueryCriteria" parameterType="org.flowable.task.service.impl.TaskQueryImpl" resultMap="taskAndRelatedEntitiesResultMap">
      SELECT RES.*,
      <if test="includeTaskLocalVariables or includeProcessVariables">
        VAR.ID_ as VAR_ID_, VAR.NAME_ as VAR_NAME_, VAR.TYPE_ as VAR_TYPE_, VAR.REV_ as VAR_REV_,
        VAR.PROC_INST_ID_ as VAR_PROC_INST_ID_, VAR.EXECUTION_ID_ as VAR_EXECUTION_ID_, VAR.TASK_ID_ as VAR_TASK_ID_,
        VAR.BYTEARRAY_ID_ as VAR_BYTEARRAY_ID_, VAR.DOUBLE_ as VAR_DOUBLE_,
        VAR.TEXT_ as VAR_TEXT_, VAR.TEXT2_ as VAR_TEXT2_, VAR.LONG_ as VAR_LONG_
      </if>
      <if test="(includeTaskLocalVariables or includeProcessVariables) and includeIdentityLinks">
          ,
      </if>
      <if test="includeIdentityLinks">
          ILINK.ID_ as ILINK_ID_, ILINK.TYPE_ as ILINK_TYPE_, ILINK.USER_ID_ as ILINK_USER_ID_,
          ILINK.GROUP_ID_ as ILINK_GROUP_ID_, ILINK.TASK_ID_ as ILINK_TASK_ID_,
          ILINK.PROC_INST_ID_ as ILINK_PROC_INST_ID_, ILINK.PROC_DEF_ID_ as ILINK_PROC_DEF_ID_
      </if>
      FROM (
          <!-- top 100 percent is only needed when doing order by in a subselect -->
          <if test="needsPaging">${limitBefore}</if>
          SELECT <if test="_databaseId == 'mssql'">top 100 percent</if> RES.* <if test="needsPaging">${limitBetween}</if>
          <include refid="selectTaskByQueryCriteriaSql"/>
          ${orderBy}
          <if test="needsPaging">${limitAfter}</if>
      ) RES
      <choose>
          <when test="includeTaskLocalVariables &amp;&amp; includeProcessVariables">
              left outer join ${prefix}ACT_RU_VARIABLE VAR ON RES.ID_ = VAR.TASK_ID_ or RES.PROC_INST_ID_ = VAR.EXECUTION_ID_
          </when>
          <otherwise>
              <if test="includeTaskLocalVariables">
                  left outer join ${prefix}ACT_RU_VARIABLE VAR ON RES.ID_ = VAR.TASK_ID_
              </if>
              <if test="includeProcessVariables">
                  left outer join ${prefix}ACT_RU_VARIABLE VAR ON RES.PROC_INST_ID_ = VAR.EXECUTION_ID_
              </if>
          </otherwise>
      </choose>
      <if test="includeIdentityLinks">
          left outer join ${prefix}ACT_RU_IDENTITYLINK ILINK on RES.ID_ = ILINK.TASK_ID_
      </if>
      ${outerJoinOrderBy}
  </select>

  <sql id="commonSelectTaskByQueryCriteriaSql">
    <where>
      <if test="taskId != null">
        RES.ID_ = #{taskId}
      </if>
      <if test="name != null">
        and RES.NAME_ = #{name}
      </if>
      <if test="nameLike != null">
        and RES.NAME_ like #{nameLike}${wildcardEscapeClause}
      </if>
      <if test="nameLikeIgnoreCase != null">
        and lower(RES.NAME_) like #{nameLikeIgnoreCase}${wildcardEscapeClause}
      </if>
      <if test="nameList != null &amp;&amp; nameList.size() &gt; 0">
        and RES.NAME_ IN
        <foreach item="name" index="index" collection="nameList"
                 open="(" separator="," close=")">
          #{name}
        </foreach>
      </if>
      <if test="nameListIgnoreCase != null &amp;&amp; nameListIgnoreCase.size() &gt; 0">
        and lower(RES.NAME_) IN
        <foreach item="name" index="index" collection="nameListIgnoreCase"
                 open="(" separator="," close=")">
          #{name}
        </foreach>
      </if>
      <if test="description != null">
        and RES.DESCRIPTION_ = #{description}
      </if>
      <if test="descriptionLike != null">
        and RES.DESCRIPTION_ like #{descriptionLike}${wildcardEscapeClause}
      </if>
      <if test="descriptionLikeIgnoreCase != null">
        and lower(RES.DESCRIPTION_) like #{descriptionLikeIgnoreCase}${wildcardEscapeClause}
      </if>
      <if test="priority != null">
        and RES.PRIORITY_ = #{priority}
      </if>
      <if test="minPriority != null">
        and RES.PRIORITY_ &gt;= #{minPriority}
      </if>
      <if test="maxPriority != null">
        and RES.PRIORITY_ &lt;= #{maxPriority}
      </if>
      <if test="assignee != null">
        and RES.ASSIGNEE_ = #{assignee}
      </if>
      <if test="assigneeLike != null">
        and RES.ASSIGNEE_ like #{assigneeLike}${wildcardEscapeClause}
      </if>
      <if test="assigneeLikeIgnoreCase != null">
        and lower(RES.ASSIGNEE_) like #{assigneeLikeIgnoreCase}${wildcardEscapeClause}
      </if>
      <if test="assigneeIds != null &amp;&amp; assigneeIds.size() &gt; 0">
        and RES.ASSIGNEE_ IN
        <foreach item="assigneeId" index="index" collection="assigneeIds"
                 open="(" separator="," close=")">
          #{assigneeId}
        </foreach>
      </if>
      <if test="owner != null">
        and RES.OWNER_ = #{owner}
      </if>
      <if test="ownerLike != null">
        and RES.OWNER_ like #{ownerLike}${wildcardEscapeClause}
      </if>
       <if test="ownerLikeIgnoreCase != null">
        and lower(RES.OWNER_) like #{ownerLikeIgnoreCase}${wildcardEscapeClause}
      </if>
      <if test="unassigned">
        and RES.ASSIGNEE_ IS NULL
      </if>
      <if test="withAssignee">
        and RES.ASSIGNEE_ IS NOT NULL
      </if>
      <if test="noDelegationState">
        and RES.DELEGATION_ IS NULL
      </if>
      <if test="delegationState != null">
        and RES.DELEGATION_ = #{delegationStateString}
      </if>
      <if test="processInstanceId != null">
        and RES.PROC_INST_ID_ = #{processInstanceId}
      </if>
      <if test="processInstanceIds != null &amp;&amp; processInstanceIds.size() &gt; 0">
        and RES.PROC_INST_ID_ IN
        <foreach item="processInstance" index="index" collection="processInstanceIds"
                 open="(" separator="," close=")">
          #{processInstance}
        </foreach>
      </if>
      <if test="processInstanceBusinessKey != null || processInstanceBusinessKeyLike != null  || processInstanceBusinessKeyLikeIgnoreCase != null">
          and exists (
            select 1
            from ${prefix}ACT_RU_EXECUTION E
            <where>
                RES.PROC_INST_ID_ = E.ID_
                <if test="processInstanceBusinessKey != null">
                    and E.BUSINESS_KEY_ = #{processInstanceBusinessKey}
                </if>
                <if test="processInstanceBusinessKeyLike != null">
                    and E.BUSINESS_KEY_ like #{processInstanceBusinessKeyLike}${wildcardEscapeClause}
                </if>
                <if test="processInstanceBusinessKeyLikeIgnoreCase != null">
                    and lower(E.BUSINESS_KEY_) like #{processInstanceBusinessKeyLikeIgnoreCase}${wildcardEscapeClause}
                </if>
            </where>
          )
      </if>
      <if test="executionId != null">
        and RES.EXECUTION_ID_ = #{executionId}
      </if>
      <if test="scopeId != null">
        and RES.SCOPE_ID_ = #{scopeId}
      </if>
      <if test="subScopeId != null">
        and RES.SUB_SCOPE_ID_ = #{subScopeId}
      </if>
      <if test="scopeType != null">
        and RES.SCOPE_TYPE_ = #{scopeType}
      </if>
      <if test="scopeDefinitionId != null">
        and RES.SCOPE_DEFINITION_ID_ = #{scopeDefinitionId}
      </if>
      <if test="propagatedStageInstanceId != null">
        and RES.PROPAGATED_STAGE_INST_ID_ = #{propagatedStageInstanceId}
      </if>
      <if test="processInstanceIdWithChildren != null">
        and exists(select ELINK.ID_ from ${prefix}ACT_RU_ENTITYLINK ELINK where ELINK.LINK_TYPE_ = 'child' and
            ELINK.SCOPE_ID_ = #{processInstanceIdWithChildren} AND ELINK.SCOPE_TYPE_ = 'bpmn' and
            ELINK.REF_SCOPE_ID_ = RES.ID_ and ELINK.REF_SCOPE_TYPE_ = 'task')
      </if>
      <if test="caseInstanceIdWithChildren != null">
        and exists(select ELINK.ID_ from ${prefix}ACT_RU_ENTITYLINK ELINK where ELINK.LINK_TYPE_ = 'child' and
            ELINK.SCOPE_ID_ = #{caseInstanceIdWithChildren} AND ELINK.SCOPE_TYPE_ = 'cmmn' and
            ELINK.REF_SCOPE_ID_ = RES.ID_ and ELINK.REF_SCOPE_TYPE_ = 'task')
      </if>
      <if test="createTime != null">
        and RES.CREATE_TIME_ = #{createTime}
      </if>
      <if test="createTimeBefore != null">
        and RES.CREATE_TIME_ &lt; #{createTimeBefore}
      </if>
      <if test="createTimeAfter != null">
        and RES.CREATE_TIME_ &gt; #{createTimeAfter}
      </if>
      <if test="key != null">
        and RES.TASK_DEF_KEY_ = #{key}
      </if>
      <if test="keyLike != null">
        and RES.TASK_DEF_KEY_ like #{keyLike}
      </if>
      <if test="keys != null and !keys.isEmpty()">
          and RES.TASK_DEF_KEY_ in
          <foreach item="item" index="index" collection="keys" open="(" separator="," close=")">
              #{item}
          </foreach>
      </if>
      <if test="processDefinitionId != null">
        and RES.PROC_DEF_ID_ = #{processDefinitionId}
      </if>
      <if test="taskDefinitionId != null">
        and RES.TASK_DEF_ID_ = #{taskDefinitionId}
      </if>
      <if test="processDefinitionKey != null || processDefinitionKeyLike != null ||  processDefinitionKeyLikeIgnoreCase != null || processDefinitionName != null || processDefinitionNameLike != null || (processCategoryInList != null &amp;&amp; processCategoryInList.size() &gt; 0) || (processCategoryNotInList != null &amp;&amp; processCategoryNotInList.size() &gt; 0) || (processDefinitionKeys != null &amp;&amp; processDefinitionKeys.size() &gt; 0) || deploymentId != null || (deploymentIds != null &amp;&amp; deploymentIds.size() &gt; 0)">
        and exists (
            select 1
            from ${prefix}ACT_RE_PROCDEF D
            <where>
                RES.PROC_DEF_ID_ = D.ID_
                <if test="processDefinitionKey != null">
                    and D.KEY_ = #{processDefinitionKey}
                </if>
                <if test="processDefinitionKeyLike != null">
                    and D.KEY_ like #{processDefinitionKeyLike}${wildcardEscapeClause}
                </if>
                <if test="processDefinitionKeyLikeIgnoreCase != null">
                    and lower(D.KEY_) like #{processDefinitionKeyLikeIgnoreCase}${wildcardEscapeClause}
                </if>
                <if test="processDefinitionKeys != null &amp;&amp; processDefinitionKeys.size() &gt; 0">
                    and D.KEY_ in
                    <foreach item="item" index="index" collection="processDefinitionKeys" open="(" separator="," close=")">
                        #{item}
                    </foreach>
                </if>
                <if test="processDefinitionName != null">
                    and D.NAME_ = #{processDefinitionName}
                </if>
                <if test="processDefinitionNameLike != null">
                    and D.NAME_ like #{processDefinitionNameLike}${wildcardEscapeClause}
                </if>
                <if test="processCategoryInList != null &amp;&amp; processCategoryInList.size() &gt; 0">
                    and D.CATEGORY_ IN
                    <foreach item="processCategory" index="index" collection="processCategoryInList"
                             open="(" separator="," close=")">
                        #{processCategory}
                    </foreach>
                </if>
                <if test="processCategoryNotInList != null &amp;&amp; processCategoryNotInList.size() &gt; 0">
                    and D.CATEGORY_ NOT IN
                    <foreach item="processCategory" index="index" collection="processCategoryNotInList"
                             open="(" separator="," close=")">
                        #{processCategory}
                    </foreach>
                </if>
                <if test="deploymentId != null">
                    and D.DEPLOYMENT_ID_ = #{deploymentId}
                </if>
                <if test="deploymentIds != null &amp;&amp; deploymentIds.size() &gt; 0">
                    and D.DEPLOYMENT_ID_ IN
                    <foreach item="deployment" index="index" collection="deploymentIds"
                             open="(" separator="," close=")">
                        #{deployment}
                    </foreach>
                </if>
            </where>
          )
      </if>
      <if test="caseDefinitionKey != null || caseDefinitionKeyLike != null ||  caseDefinitionKeyLikeIgnoreCase != null || (caseDefinitionKeys != null &amp;&amp; caseDefinitionKeys.size() &gt; 0) || cmmnDeploymentId != null || (cmmnDeploymentIds != null &amp;&amp; cmmnDeploymentIds.size() &gt; 0)">
          and exists (
            select 1
            from ${prefix}ACT_CMMN_CASEDEF CD
            <where>
                RES.SCOPE_DEFINITION_ID_ = CD.ID_
                <if test="caseDefinitionKey != null">
                    and CD.KEY_ = #{caseDefinitionKey}
                </if>
                <if test="caseDefinitionKeyLike != null">
                    and CD.KEY_ like #{caseDefinitionKeyLike}${wildcardEscapeClause}
                </if>
                <if test="caseDefinitionKeyLikeIgnoreCase != null">
                    and lower(CD.KEY_) like #{caseDefinitionKeyLikeIgnoreCase}${wildcardEscapeClause}
                </if>
                <if test="caseDefinitionKeys != null &amp;&amp; caseDefinitionKeys.size() &gt; 0">
                    and CD.KEY_ in
                    <foreach item="item" index="index" collection="caseDefinitionKeys" open="(" separator="," close=")">
                        #{item}
                    </foreach>
                </if>
                <if test="cmmnDeploymentId != null">
                    and CD.DEPLOYMENT_ID_ = #{cmmnDeploymentId}
                </if>
                <if test="cmmnDeploymentIds != null &amp;&amp; cmmnDeploymentIds.size() &gt; 0">
                    and CD.DEPLOYMENT_ID_ IN
                    <foreach item="deployment" index="index" collection="cmmnDeploymentIds"
                             open="(" separator="," close=")">
                        #{deployment}
                    </foreach>
                </if>
            </where>
          )
      </if>
      <if test="dueDate != null">
        and RES.DUE_DATE_ = #{dueDate}
      </if>
      <if test="dueBefore != null">
        and RES.DUE_DATE_ &lt; #{dueBefore}
      </if>
      <if test="dueAfter != null">
        and RES.DUE_DATE_ &gt; #{dueAfter}
      </if>
      <if test="withoutDueDate">
        and RES.DUE_DATE_ is null
      </if>
      <if test="dueDate != null || dueBefore != null || dueAfter != null">
        and RES.DUE_DATE_ is not null
      </if>
      <if test="category != null">
        and RES.CATEGORY_ = #{category}
      </if>
      <if test="withFormKey">
        and RES.FORM_KEY_ IS NOT NULL
      </if>
        <if test="formKey != null">
            and RES.FORM_KEY_ = #{formKey}
        </if>
      <if test="excludeSubtasks">
        and RES.PARENT_TASK_ID_ IS NULL
      </if>
      <if test="!bothCandidateAndAssigned &amp;&amp; (candidateUser != null || candidateGroups != null)">
        <if test="!ignoreAssigneeValue">
            and RES.ASSIGNEE_ is null
        </if>
        and exists(select LINK.ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where LINK.TYPE_ = 'candidate' and LINK.TASK_ID_ = RES.ID_
            and
            (
              <if test="candidateUser != null">
                LINK.USER_ID_ = #{candidateUser}
              </if>
              <if test="candidateUser != null &amp;&amp; candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0">
                or
              </if>
              <if test="candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0">
                LINK.GROUP_ID_ IN
                <foreach item="group" index="index" collection="candidateGroups"
                         open="(" separator="," close=")">
                  #{group}
                </foreach>
              </if>
            )
        )
      </if>
      <if test="involvedUser != null">
        and (
          exists(select LINK.ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where LINK.USER_ID_ = #{involvedUser} and LINK.TASK_ID_ = RES.ID_)
          or RES.ASSIGNEE_ = #{involvedUser}
          or RES.OWNER_ = #{involvedUser}
          )
      </if>
      <if test="involvedGroups != null">
        and EXISTS(
          select ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where LINK.TASK_ID_ = RES.ID_ and LINK.GROUP_ID_ in
          <foreach item="involvedGroup" index="index" collection="involvedGroups" open="(" separator="," close=")">
              #{involvedGroup}
          </foreach>
        )
      </if>
      <foreach item="var" collection="queryVariableValues" index="index">
        <choose>
            <when test="var.operator.equals('EXISTS')">
              and EXISTS (
                select ID_ from ${prefix}ACT_RU_VARIABLE where NAME_ = #{var.name}
                <if test="!var.local">
                    and RES.PROC_INST_ID_ = PROC_INST_ID_ and TASK_ID_ is null
                </if>
                <if test="var.local">
                    and RES.ID_ = TASK_ID_
                </if>
              )
            </when>
            <when test="var.operator.equals('NOT_EXISTS')">
              and NOT EXISTS (
                select ID_ from ${prefix}ACT_RU_VARIABLE where NAME_ = #{var.name}
                <if test="!var.local">
                    and RES.PROC_INST_ID_ = PROC_INST_ID_ and TASK_ID_ is null
                </if>
                <if test="var.local">
                    and RES.ID_ = TASK_ID_
                </if>
              )
            </when>
            <otherwise>
                and exists (
                    select 1
                    from ${prefix}ACT_RU_VARIABLE V
                    <where>
                        <if test="!var.local">
                            and RES.PROC_INST_ID_ = V.PROC_INST_ID_ and V.TASK_ID_ is null
                        </if>
                        <if test="var.local">
                            and RES.ID_ = V.TASK_ID_
                        </if>
                        <if test="var.name != null">
                            <!-- Match-all variable-names when name is null -->
                            and V.NAME_= #{var.name}
                        </if>
                        <if test="var.name == null">
                            and V.NAME_ is not null
                        </if>
                        <if test="var.needsTypeCheck()">
                            and V.TYPE_ = #{var.type}
                        </if>

                        <!-- Variable value -->
                        <if test="var.textValue != null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null">
                            <choose>
                                <when test="var.operator.equals('EQUALS_IGNORE_CASE') || var.operator.equals('NOT_EQUALS_IGNORE_CASE') || var.operator.equals('LIKE_IGNORE_CASE')">
                                    and (lower(V.TEXT_)
                                </when>
                                <otherwise>
                                    and (V.TEXT_
                                </otherwise>
                            </choose>
                            <choose>
                                <when test="var.operator.equals('LIKE') || var.operator.equals('LIKE_IGNORE_CASE')">LIKE</when>
                                <otherwise><include refid="executionVariableOperator" /></otherwise>
                            </choose>
                            #{var.textValue}
                            <choose>
                                <when test="var.operator.equals('LIKE') || var.operator.equals('LIKE_IGNORE_CASE')">${wildcardEscapeClause}</when>
                            </choose>
                            <if test="var.operator.equals('NOT_EQUALS') || var.operator.equals('NOT_EQUALS_IGNORE_CASE')">
                                or V.TEXT_ is null
                            </if>
                            )
                        </if>
                        <if test="var.textValue2 != null">
                            and V.TEXT2_
                            <choose>
                                <when test="var.operator.equals('LIKE')">LIKE</when>
                                <otherwise><include refid="executionVariableOperator" /></otherwise>
                            </choose>
                            #{var.textValue2}
                            <choose>
                                <when test="var.operator.equals('LIKE')">${wildcardEscapeClause}</when>
                            </choose>
                        </if>
                        <if test="var.longValue != null">
                            and (V.LONG_
                            <include refid="executionVariableOperator" />
                            #{var.longValue}
                            <if test="var.operator.equals('NOT_EQUALS') || var.operator.equals('NOT_EQUALS_IGNORE_CASE')">
                                or V.LONG_ is null
                            </if>
                            )
                        </if>
                        <if test="var.doubleValue != null">
                            and (V.DOUBLE_
                            <include refid="executionVariableOperator" />
                            #{var.doubleValue}
                            <if test="var.operator.equals('NOT_EQUALS') || var.operator.equals('NOT_EQUALS_IGNORE_CASE')">
                                or V.DOUBLE_ is null
                            </if>
                            )
                        </if>
                        <!-- Null variable type -->
                        <if test="var.textValue == null &amp;&amp; var.textValue2 == null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null">
                            <choose>
                                <when test="var.operator.equals('NOT_EQUALS')">
                                    and (V.TEXT_ is not null or V.TEXT2_ is not null or V.LONG_ is not null or V.DOUBLE_ is not null or V.BYTEARRAY_ID_ is not null)
                                </when>
                                <otherwise>
                                    and V.TEXT_ is null and V.TEXT2_ is null and V.LONG_ is null and V.DOUBLE_ is null and V.BYTEARRAY_ID_ is null
                                </otherwise>
                            </choose>
                        </if>
                    </where>
                )
            </otherwise>
        </choose>
      </foreach>
      <if test="suspensionState != null">
        <if test="suspensionState.stateCode == 1">
            and RES.SUSPENSION_STATE_ = 1
        </if>
        <if test="suspensionState.stateCode == 2">
            and RES.SUSPENSION_STATE_ = 2
        </if>
      </if>
      <if test="tenantId != null">
        and RES.TENANT_ID_ = #{tenantId}
      </if>
      <if test="tenantIdLike != null">
        and RES.TENANT_ID_ like #{tenantIdLike}${wildcardEscapeClause}
      </if>
      <if test="withoutTenantId">
        and (RES.TENANT_ID_ = '' or RES.TENANT_ID_ is null)
      </if>
      <choose>
        <when test="bothCandidateAndAssigned">
          <!-- if dbIdentityUsed set true in process engine configuration -->
          <if test="userIdForCandidateAndAssignee != null">
            <if test="candidateGroups == null">
              and (RES.ASSIGNEE_ = #{userIdForCandidateAndAssignee}
                or (
                <if test="!ignoreAssigneeValue">
                    RES.ASSIGNEE_ is null and
                </if>
                exists(select LINK.ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where LINK.TASK_ID_ = RES.ID_
                and (LINK.USER_ID_ = #{userIdForCandidateAndAssignee}
                or LINK.GROUP_ID_ IN (select g.GROUP_ID_ from ${prefix}ACT_ID_MEMBERSHIP g where g.USER_ID_ = #{userIdForCandidateAndAssignee} )))))
            </if>
          </if>
          <!-- if dbIdentityUsed set false in process engine configuration of using custom session factory of GroupIdentityManager -->
          <if test="candidateGroups != null">
            and (RES.ASSIGNEE_ = #{userIdForCandidateAndAssignee}
              or (
              <if test="!ignoreAssigneeValue">
                RES.ASSIGNEE_ is null and
              </if>
                exists(select LINK.ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where LINK.TASK_ID_ = RES.ID_
                and LINK.TYPE_ = 'candidate' and (LINK.USER_ID_ = #{userIdForCandidateAndAssignee}
                <if test="candidateGroups.size() &gt; 0">
                    or LINK.GROUP_ID_ IN
                    <foreach item="group" index="index" collection="candidateGroups" open="(" separator="," close=")">
                        #{group}
                    </foreach>
                </if>
                ))))
          </if>
        </when>
      </choose>
      <foreach item="orQueryObject" index="orIndex" collection="orQueryObjects">
        and
        <trim prefix="(" prefixOverrides="OR" suffix=")">
            <if test="orQueryObject.taskId != null">
              RES.ID_ = #{orQueryObject.taskId}
            </if>
            <if test="orQueryObject.name != null">
              or RES.NAME_ = #{orQueryObject.name}
            </if>
            <if test="orQueryObject.nameLike != null">
              or RES.NAME_ like #{orQueryObject.nameLike}${wildcardEscapeClause}
            </if>
            <if test="orQueryObject.nameLikeIgnoreCase != null">
              or lower(RES.NAME_) like #{orQueryObject.nameLikeIgnoreCase}${wildcardEscapeClause}
            </if>
            <if test="orQueryObject.nameList != null &amp;&amp; orQueryObject.nameList.size() &gt; 0">
              or RES.NAME_ IN
              <foreach item="name" index="index" collection="orQueryObject.nameList"
                      open="(" separator="," close=")">
                #{name}
              </foreach>
            </if>
            <if test="orQueryObject.nameListIgnoreCase != null &amp;&amp; orQueryObject.nameListIgnoreCase.size() &gt; 0">
              or lower(RES.NAME_) IN
              <foreach item="name" index="index" collection="orQueryObject.nameListIgnoreCase"
                       open="(" separator="," close=")">
                #{name}
              </foreach>
            </if>
            <if test="orQueryObject.description != null">
              or RES.DESCRIPTION_ = #{orQueryObject.description}
            </if>
            <if test="orQueryObject.descriptionLike != null">
              or RES.DESCRIPTION_ like #{orQueryObject.descriptionLike}${wildcardEscapeClause}
            </if>
             <if test="orQueryObject.descriptionLikeIgnoreCase != null">
              or lower(RES.DESCRIPTION_) like #{orQueryObject.descriptionLikeIgnoreCase}${wildcardEscapeClause}
            </if>
            <if test="orQueryObject.priority != null">
              or RES.PRIORITY_ = #{orQueryObject.priority}
            </if>
            <if test="orQueryObject.minPriority != null">
              or RES.PRIORITY_ &gt;= #{orQueryObject.minPriority}
            </if>
            <if test="orQueryObject.maxPriority != null">
              or RES.PRIORITY_ &lt;= #{orQueryObject.maxPriority}
            </if>
            <if test="orQueryObject.assignee != null">
              or RES.ASSIGNEE_ = #{orQueryObject.assignee}
            </if>
            <if test="orQueryObject.assigneeLike != null">
              or RES.ASSIGNEE_ like #{orQueryObject.assigneeLike}${wildcardEscapeClause}
            </if>
            <if test="orQueryObject.assigneeLikeIgnoreCase != null">
              or lower(RES.ASSIGNEE_) like #{orQueryObject.assigneeLikeIgnoreCase}${wildcardEscapeClause}
            </if>
            <if test="orQueryObject.assigneeIds != null &amp;&amp; orQueryObject.assigneeIds.size() &gt; 0">
		      or RES.ASSIGNEE_ IN
		      <foreach item="assigneeId" index="index" collection="orQueryObject.assigneeIds"
		               open="(" separator="," close=")">
		        #{assigneeId}
		      </foreach>
		    </if>
            <if test="orQueryObject.owner != null">
              or RES.OWNER_ = #{orQueryObject.owner}
            </if>
            <if test="orQueryObject.ownerLike != null">
              or RES.OWNER_ like #{orQueryObject.ownerLike}${wildcardEscapeClause}
            </if>
            <if test="orQueryObject.ownerLikeIgnoreCase != null">
              or RES.OWNER_ like #{orQueryObject.ownerLikeIgnoreCase}${wildcardEscapeClause}
            </if>
            <if test="orQueryObject.unassigned">
              or RES.ASSIGNEE_ IS NULL
            </if>
            <if test="orQueryObject.withAssignee">
              or RES.ASSIGNEE_ IS NOT NULL
      		</if>
            <if test="orQueryObject.noDelegationState">
              or RES.DELEGATION_ IS NULL
            </if>
            <if test="orQueryObject.delegationState != null">
              or RES.DELEGATION_ = #{orQueryObject.delegationStateString}
            </if>
            <if test="orQueryObject.processInstanceId != null">
              or RES.PROC_INST_ID_ = #{orQueryObject.processInstanceId}
            </if>
            <if test="orQueryObject.processInstanceIds != null &amp;&amp; orQueryObject.processInstanceIds.size() &gt; 0">
              or RES.PROC_INST_ID_ IN
              <foreach item="processInstance" index="index" collection="orQueryObject.processInstanceIds"
                       open="(" separator="," close=")">
                #{processInstance}
              </foreach>
            </if>
            <if test="orQueryObject.processInstanceBusinessKey != null || orQueryObject.processInstanceBusinessKeyLike != null || orQueryObject.processInstanceBusinessKeyLikeIgnoreCase != null">
                or exists (
                    select 1
                    from ${prefix}ACT_RU_EXECUTION E
                    where RES.PROC_INST_ID_ = E.ID_ and
                    <trim prefix="(" prefixOverrides="OR" suffix=")">
                        <if test="orQueryObject.processInstanceBusinessKey != null">
                            or E.BUSINESS_KEY_ = #{orQueryObject.processInstanceBusinessKey}
                        </if>
                        <if test="orQueryObject.processInstanceBusinessKeyLike != null">
                            or E.BUSINESS_KEY_ like #{orQueryObject.processInstanceBusinessKeyLike}${wildcardEscapeClause}
                        </if>
                        <if test="orQueryObject.processInstanceBusinessKeyLikeIgnoreCase != null">
                            or lower(E.BUSINESS_KEY_) like #{orQueryObject.processInstanceBusinessKeyLikeIgnoreCase}${wildcardEscapeClause}
                        </if>
                    </trim>
                )
            </if>
            <if test="orQueryObject.executionId != null">
              or RES.EXECUTION_ID_ = #{orQueryObject.executionId}
            </if>
            <if test="orQueryObject.scopeId != null">
              or RES.SCOPE_ID_ = #{orQueryObject.scopeId}
            </if>
            <if test="orQueryObject.subScopeId != null">
              or RES.SUB_SCOPE_ID_ = #{orQueryObject.subScopeId}
            </if>
            <if test="orQueryObject.scopeType != null">
              or RES.SCOPE_TYPE_ = #{orQueryObject.scopeType}
            </if>
            <if test="orQueryObject.scopeDefinitionId != null">
              or RES.SCOPE_DEFINITION_ID_ = #{orQueryObject.scopeDefinitionId}
            </if>
            <if test="orQueryObject.propagatedStageInstanceId != null">
              or RES.PROPAGATED_STAGE_INST_ID_ = #{orQueryObject.propagatedStageInstanceId}
            </if>
            <if test="orQueryObject.processInstanceIdWithChildren != null">
              or exists(select ELINK.ID_ from ${prefix}ACT_RU_ENTITYLINK ELINK where ELINK.LINK_TYPE_ = 'child' and
                ELINK.SCOPE_ID_ = #{processInstanceIdWithChildren} AND ELINK.SCOPE_TYPE_ = 'bpmn' and
                ELINK.REF_SCOPE_ID_ = RES.ID_ and ELINK.REF_SCOPE_TYPE_ = 'task')
            </if>
            <if test="orQueryObject.caseInstanceIdWithChildren != null">
              or exists(select ELINK.ID_ from ${prefix}ACT_RU_ENTITYLINK ELINK where ELINK.LINK_TYPE_ = 'child' and
                ELINK.SCOPE_ID_ = #{caseInstanceIdWithChildren} AND ELINK.SCOPE_TYPE_ = 'cmmn' and
                ELINK.REF_SCOPE_ID_ = RES.ID_ and ELINK.REF_SCOPE_TYPE_ = 'task')
            </if>
            <if test="orQueryObject.createTime != null">
              or RES.CREATE_TIME_ = #{orQueryObject.createTime}
            </if>
            <if test="orQueryObject.createTimeBefore != null">
              or RES.CREATE_TIME_ &lt; #{orQueryObject.createTimeBefore}
            </if>
            <if test="orQueryObject.createTimeAfter != null">
              or RES.CREATE_TIME_ &gt; #{orQueryObject.createTimeAfter}
            </if>
            <if test="orQueryObject.key != null">
              or RES.TASK_DEF_KEY_ = #{orQueryObject.key}
            </if>
            <if test="orQueryObject.keyLike != null">
              or RES.TASK_DEF_KEY_ like #{orQueryObject.keyLike}${wildcardEscapeClause}
            </if>
            <if test="orQueryObject.keys != null and !orQueryObject.keys.isEmpty()">
                or RES.TASK_DEF_KEY_ in
                <foreach item="item" index="index" collection="orQueryObject.keys" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="orQueryObject.processDefinitionId != null">
              or RES.PROC_DEF_ID_ = #{orQueryObject.processDefinitionId}
            </if>
            <if test="orQueryObject.taskDefinitionId != null">
              or RES.TASK_DEF_ID_ = #{orQueryObject.taskDefinitionId}
            </if>
            <if test="orQueryObject.processDefinitionKey != null || orQueryObject.processDefinitionKeyLike != null || orQueryObject.processDefinitionKeyLikeIgnoreCase != null || orQueryObject.processDefinitionName != null || orQueryObject.processDefinitionNameLike != null || (orQueryObject.processCategoryInList != null &amp;&amp; orQueryObject.processCategoryInList.size() &gt; 0) || (orQueryObject.processCategoryNotInList != null &amp;&amp; orQueryObject.processCategoryNotInList.size() &gt; 0) || (orQueryObject.processDefinitionKeys != null &amp;&amp; orQueryObject.processDefinitionKeys.size() &gt; 0) || orQueryObject.deploymentId != null || (orQueryObject.deploymentIds != null &amp;&amp; orQueryObject.deploymentIds.size() &gt; 0)">
                or exists (
                    select 1
                    from ${prefix}ACT_RE_PROCDEF D
                    where RES.PROC_DEF_ID_ = D.ID_ and
                    <trim prefix="(" prefixOverrides="OR" suffix=")">
                        <if test="orQueryObject.processDefinitionKey != null">
                            or D.KEY_ = #{orQueryObject.processDefinitionKey}
                        </if>
                        <if test="orQueryObject.processDefinitionKeyLike != null">
                            or D.KEY_ like #{orQueryObject.processDefinitionKeyLike}${wildcardEscapeClause}
                        </if>
                        <if test="orQueryObject.processDefinitionKeyLikeIgnoreCase != null">
                            or lower(D.KEY_) like #{orQueryObject.processDefinitionKeyLikeIgnoreCase}${wildcardEscapeClause}
                        </if>
                        <if test="orQueryObject.processDefinitionKeys != null &amp;&amp; orQueryObject.processDefinitionKeys.size() &gt; 0">
                            or D.KEY_ in
                            <foreach item="item" index="index" collection="orQueryObject.processDefinitionKeys" open="(" separator="," close=")">
                                #{item}
                            </foreach>
                        </if>
                        <if test="orQueryObject.processDefinitionName != null">
                            or D.NAME_ = #{orQueryObject.processDefinitionName}
                        </if>
                        <if test="orQueryObject.processDefinitionNameLike != null">
                            or D.NAME_ like #{orQueryObject.processDefinitionNameLike}${wildcardEscapeClause}
                        </if>
                        <if test="orQueryObject.processCategoryInList != null &amp;&amp; orQueryObject.processCategoryInList.size() &gt; 0">
                            or D.CATEGORY_ IN
                            <foreach item="processCategory" index="index" collection="orQueryObject.processCategoryInList"
                                     open="(" separator="," close=")">
                                #{processCategory}
                            </foreach>
                        </if>
                        <if test="orQueryObject.processCategoryNotInList != null &amp;&amp; orQueryObject.processCategoryNotInList.size() &gt; 0">
                            or D.CATEGORY_ NOT IN
                            <foreach item="processCategory" index="index" collection="orQueryObject.processCategoryNotInList"
                                     open="(" separator="," close=")">
                                #{processCategory}
                            </foreach>
                        </if>
                        <if test="orQueryObject.deploymentId != null">
                            or D.DEPLOYMENT_ID_ = #{orQueryObject.deploymentId}
                        </if>
                        <if test="orQueryObject.deploymentIds != null &amp;&amp; orQueryObject.deploymentIds.size() &gt; 0">
                            or D.DEPLOYMENT_ID_ IN
                            <foreach item="deployment" index="index" collection="orQueryObject.deploymentIds"
                                     open="(" separator="," close=")">
                                #{deployment}
                            </foreach>
                        </if>
                    </trim>
                )
            </if>
            <if test="orQueryObject.caseDefinitionKey != null || orQueryObject.caseDefinitionKeyLike != null || orQueryObject.caseDefinitionKeyLikeIgnoreCase != null || (orQueryObject.caseDefinitionKeys != null &amp;&amp; orQueryObject.caseDefinitionKeys.size() &gt; 0) || orQueryObject.cmmnDeploymentId != null || (orQueryObject.cmmnDeploymentIds != null &amp;&amp; orQueryObject.cmmnDeploymentIds.size() &gt; 0)">
                or exists (
                    select 1
                    from ${prefix}ACT_CMMN_CASEDEF CD
                    where RES.SCOPE_DEFINITION_ID_ = CD.ID_ and
                    <trim prefix="(" prefixOverrides="OR" suffix=")">
                        <if test="orQueryObject.caseDefinitionKey != null">
                            or CD.KEY_ = #{orQueryObject.caseDefinitionKey}
                        </if>
                        <if test="orQueryObject.caseDefinitionKeyLike != null">
                            or CD.KEY_ like #{orQueryObject.caseDefinitionKeyLike}${wildcardEscapeClause}
                        </if>
                        <if test="orQueryObject.caseDefinitionKeyLikeIgnoreCase != null">
                            or lower(CD.KEY_) like #{orQueryObject.caseDefinitionKeyLikeIgnoreCase}${wildcardEscapeClause}
                        </if>
                        <if test="orQueryObject.caseDefinitionKeys != null &amp;&amp; orQueryObject.caseDefinitionKeys.size() &gt; 0">
                            or CD.KEY_ in
                            <foreach item="item" index="index" collection="orQueryObject.caseDefinitionKeys" open="(" separator="," close=")">
                                #{item}
                            </foreach>
                        </if>
                        <if test="orQueryObject.cmmnDeploymentId != null">
                            or CD.DEPLOYMENT_ID_ = #{orQueryObject.cmmnDeploymentId}
                        </if>
                        <if test="orQueryObject.cmmnDeploymentIds != null &amp;&amp; orQueryObject.cmmnDeploymentIds.size() &gt; 0">
                            or CD.DEPLOYMENT_ID_ IN
                            <foreach item="deployment" index="index" collection="orQueryObject.cmmnDeploymentIds"
                                     open="(" separator="," close=")">
                                #{deployment}
                            </foreach>
                        </if>
                    </trim>
                )
            </if>
            <if test="orQueryObject.dueDate != null">
              or RES.DUE_DATE_ = #{orQueryObject.dueDate}
            </if>
            <if test="orQueryObject.dueBefore != null">
              or (RES.DUE_DATE_ &lt; #{orQueryObject.dueBefore} and RES.DUE_DATE_ is not null)
            </if>
            <if test="orQueryObject.dueAfter != null">
              or (RES.DUE_DATE_ &gt; #{orQueryObject.dueAfter} and RES.DUE_DATE_ is not null)
            </if>
            <if test="orQueryObject.withoutDueDate">
              or RES.DUE_DATE_ is null
            </if>
            <if test="orQueryObject.category != null">
              or RES.CATEGORY_ = #{orQueryObject.category}
            </if>
            <if test="orQueryObject.withFormKey">
              or RES.FORM_KEY_ IS NOT NULL
            </if>
            <if test="orQueryObject.formKey != null">
                or RES.FORM_KEY_ = #{orQueryObject.formKey}
            </if>
            <if test="orQueryObject.excludeSubtasks">
              or RES.PARENT_TASK_ID_ IS NULL
            </if>

            <if test="!orQueryObject.bothCandidateAndAssigned &amp;&amp; (orQueryObject.candidateUser != null || orQueryObject.candidateGroups != null)">
              or (
                <if test="!orQueryObject.ignoreAssigneeValue">
                    RES.ASSIGNEE_ is null and
                </if>
                exists(select LINK.ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where LINK.TYPE_ = 'candidate' and LINK.TASK_ID_ = RES.ID_
                    and
                    (
                    <if test="orQueryObject.candidateUser != null">
                      LINK.USER_ID_ = #{orQueryObject.candidateUser}
                    </if>
                    <if test="orQueryObject.candidateUser != null &amp;&amp; orQueryObject.candidateGroups != null &amp;&amp; orQueryObject.candidateGroups.size() &gt; 0">
                      or
                    </if>
                    <if test="orQueryObject.candidateGroups != null &amp;&amp; orQueryObject.candidateGroups.size() &gt; 0">
                      LINK.GROUP_ID_ IN
                      <foreach item="group" index="index" collection="orQueryObject.candidateGroups"
                               open="(" separator="," close=")">
                        #{group}
                      </foreach>
                    </if>
                    )
                )
              )
            </if>
            <if test="orQueryObject.involvedUser != null">
              or (
                exists(select LINK.ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where LINK.USER_ID_ = #{orQueryObject.involvedUser} and LINK.TASK_ID_ = RES.ID_)
                or RES.ASSIGNEE_ = #{orQueryObject.involvedUser}
                or RES.OWNER_ = #{orQueryObject.involvedUser}
                )
            </if>
            <if test="orQueryObject.involvedGroups != null">
              or (
                EXISTS(select LINK.ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where LINK.TASK_ID_ = RES.ID_ and LINK.GROUP_ID_ in
                <foreach item="involvedGroup" index="index" collection="orQueryObject.involvedGroups" open="(" separator="," close=")">
                    #{involvedGroup}
                </foreach>
                )
              )
            </if>
            <foreach item="var" collection="orQueryObject.queryVariableValues" index="index">
              or
              <trim prefix="(" prefixOverrides="AND" suffix=")">
                <choose>
                    <when test="var.operator.equals('EXISTS')">
                        and EXISTS (
                            select ID_ from ${prefix}ACT_RU_VARIABLE where NAME_ = #{var.name}
                        <if test="!var.local">
                            and RES.PROC_INST_ID_ = PROC_INST_ID_ and TASK_ID_ is null
                        </if>
                        <if test="var.local">
                            and RES.ID_ = TASK_ID_
                        </if>
                        )
                    </when>
                    <when test="var.operator.equals('NOT_EXISTS')">
                        and NOT EXISTS (
                            select ID_ from ${prefix}ACT_RU_VARIABLE where NAME_ = #{var.name}
                        <if test="!var.local">
                            and RES.PROC_INST_ID_ = PROC_INST_ID_ and TASK_ID_ is null
                        </if>
                        <if test="var.local">
                            and RES.ID_ = TASK_ID_
                        </if>
                        )
                    </when>
                    <otherwise>
                        and exists (
                            select 1
                            from ${prefix}ACT_RU_VARIABLE V
                            <where>
                                <if test="!var.local">
                                    and RES.PROC_INST_ID_ = V.PROC_INST_ID_ and V.TASK_ID_ is null
                                </if>
                                <if test="var.local">
                                    and RES.ID_ = V.TASK_ID_
                                </if>
                                <if test="var.name != null">
                                    <!-- Match-all variable-names when name is null -->
                                    and V.NAME_= #{var.name}
                                </if>
                                <if test="var.name == null">
                                    and V.NAME_ is not null
                                </if>
                                <if test="var.needsTypeCheck()">
                                    and V.TYPE_ = #{var.type}
                                </if>
                                <!-- Variable value -->
                                <if test="var.textValue != null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null">
                                    <choose>
                                        <when test="var.operator.equals('EQUALS_IGNORE_CASE') || var.operator.equals('NOT_EQUALS_IGNORE_CASE') || var.operator.equals('LIKE_IGNORE_CASE')">
                                            and (lower(V.TEXT_)
                                        </when>
                                        <otherwise>
                                            and (V.TEXT_
                                        </otherwise>
                                    </choose>
                                    <choose>
                                        <when test="var.operator.equals('LIKE') || var.operator.equals('LIKE_IGNORE_CASE')">LIKE</when>
                                        <otherwise><include refid="executionVariableOperator" /></otherwise>
                                    </choose>
                                    #{var.textValue}
                                    <choose>
                                        <when test="var.operator.equals('LIKE') || var.operator.equals('LIKE_IGNORE_CASE')">${wildcardEscapeClause}</when>
                                    </choose>
                                    <if test="var.operator.equals('NOT_EQUALS') || var.operator.equals('NOT_EQUALS_IGNORE_CASE')">
                                        or V.TEXT_ is null
                                    </if>
                                    )
                                </if>
                                <if test="var.textValue2 != null">
                                    and V.TEXT2_
                                    <choose>
                                        <when test="var.operator.equals('LIKE')">LIKE</when>
                                        <otherwise><include refid="executionVariableOperator" /></otherwise>
                                    </choose>
                                    #{var.textValue2}
                                    <choose>
                                        <when test="var.operator.equals('LIKE')">${wildcardEscapeClause}</when>
                                    </choose>
                                </if>
                                <if test="var.longValue != null">
                                    and (V.LONG_
                                    <include refid="executionVariableOperator" />
                                    #{var.longValue}
                                    <if test="var.operator.equals('NOT_EQUALS') || var.operator.equals('NOT_EQUALS_IGNORE_CASE')">
                                        or V.LONG_ is null
                                    </if>
                                    )
                                </if>
                                <if test="var.doubleValue != null">
                                    and (V}.DOUBLE_
                                    <include refid="executionVariableOperator" />
                                    #{var.doubleValue}
                                    <if test="var.operator.equals('NOT_EQUALS') || var.operator.equals('NOT_EQUALS_IGNORE_CASE')">
                                        or V.DOUBLE_ is null
                                    </if>
                                    )
                                </if>
                                <!-- Null variable type -->
                                <if test="var.textValue == null &amp;&amp; var.textValue2 == null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null">
                                    <choose>
                                        <when test="var.operator.equals('NOT_EQUALS')">
                                            and (V.TEXT_ is not null or V.TEXT2_ is not null or V.LONG_ is not null or V.DOUBLE_ is not null or V.BYTEARRAY_ID_ is not null)
                                        </when>
                                        <otherwise>
                                            and V.TEXT_ is null and V.TEXT2_ is null and V.LONG_ is null and V.DOUBLE_ is null and V.BYTEARRAY_ID_ is null
                                        </otherwise>
                                    </choose>
                                </if>
                            </where>
                        )
                    </otherwise>
                </choose>
              </trim>
            </foreach>
            <if test="orQueryObject.suspensionState != null">
              <if test="orQueryObject.suspensionState.stateCode == 1">
                  or RES.SUSPENSION_STATE_ = 1
              </if>
              <if test="orQueryObject.suspensionState.stateCode == 2">
                  or RES.SUSPENSION_STATE_ = 2
              </if>
            </if>
            <if test="orQueryObject.tenantId != null">
              or RES.TENANT_ID_ = #{orQueryObject.tenantId}
            </if>
            <if test="orQueryObject.tenantIdLike != null">
              or RES.TENANT_ID_ like #{orQueryObject.tenantIdLike}${wildcardEscapeClause}
            </if>
            <if test="orQueryObject.withoutTenantId">
              or (RES.TENANT_ID_ = '' or RES.TENANT_ID_ is null)
            </if>
            <choose>
              <when test="orQueryObject.bothCandidateAndAssigned">
                <!-- if dbIdentityUsed set true in process engine configuration -->
                <if test="orQueryObject.userIdForCandidateAndAssignee != null">
                  <if test="orQueryObject.candidateGroups == null">
                    or (RES.ASSIGNEE_ = #{orQueryObject.userIdForCandidateAndAssignee}
                        or (
                        <if test="!orQueryObject.ignoreAssigneeValue">
                            RES.ASSIGNEE_ is null and
                        </if>
                        exists(select LINK.ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where LINK.TASK_ID_ = RES.ID_
                        and (LINK.USER_ID_ = #{orQueryObject.userIdForCandidateAndAssignee}
                        or LINK.GROUP_ID_ IN (select g.GROUP_ID_ from ${prefix}ACT_ID_MEMBERSHIP g where g.USER_ID_ = #{orQueryObject.userIdForCandidateAndAssignee} )))))
                  </if>
                </if>
                <!-- if dbIdentityUsed set false in process engine configuration of using custom session factory of GroupIdentityManager -->
                <if test="orQueryObject.candidateGroups != null">
                  or (RES.ASSIGNEE_ = #{orQueryObject.userIdForCandidateAndAssignee}
                  or (
                    <if test="!orQueryObject.ignoreAssigneeValue">
                        RES.ASSIGNEE_ is null and
                    </if>
                    exists(select LINK.ID_ from ${prefix}ACT_RU_IDENTITYLINK LINK where LINK.TASK_ID_ = RES.ID_
                    and LINK.TYPE_ = 'candidate' and (LINK.USER_ID_ = #{orQueryObject.userIdForCandidateAndAssignee}
                    <if test="orQueryObject.candidateGroups.size() &gt; 0">
                        or LINK.GROUP_ID_ IN
                        <foreach item="group" index="index" collection="orQueryObject.candidateGroups" open="(" separator="," close=")">
                            #{group}
                        </foreach>
                    </if>
                  ))))
                </if>
              </when>
            </choose>
          </trim>
        </foreach>
     </where>
  </sql>

  <sql id="executionVariableOperator">
    <choose>
      <when test="var.operator.equals('EQUALS')">=</when>
      <when test="var.operator.equals('EQUALS_IGNORE_CASE')">=</when>
      <when test="var.operator.equals('NOT_EQUALS')">&lt;&gt;</when>
      <when test="var.operator.equals('NOT_EQUALS_IGNORE_CASE')">&lt;&gt;</when>
      <when test="var.operator.equals('GREATER_THAN')">&gt;</when>
      <when test="var.operator.equals('GREATER_THAN_OR_EQUAL')">&gt;=</when>
      <when test="var.operator.equals('LESS_THAN')">&lt;</when>
      <when test="var.operator.equals('LESS_THAN_OR_EQUAL')">&lt;=</when>
   </choose>
  </sql>

  <select id="selectTaskByNativeQuery" parameterType="java.util.Map" resultMap="taskResultMap">
  	<include refid="org.flowable.common.engine.db.selectByNativeQuery"/>
  </select>

  <select id="selectTaskCountByNativeQuery" parameterType="java.util.Map" resultType="long">
     ${sql}
  </select>

</mapper>
