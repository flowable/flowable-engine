<?xml version="1.0" encoding="UTF-8" ?>

<!--
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.flowable.task.service.impl.persistence.entity.HistoricTaskInstanceEntityImpl">

  <!-- HISTORIC TASK INSTANCE INSERT -->

  <insert id="insertHistoricTaskInstance" parameterType="org.flowable.task.service.impl.persistence.entity.HistoricTaskInstanceEntityImpl">
      insert into ${prefix}ACT_HI_TASKINST (
        ID_,
        REV_,
        TASK_DEF_ID_,
        PROC_DEF_ID_,
        PROC_INST_ID_,
        EXECUTION_ID_,
        SCOPE_ID_,
        SUB_SCOPE_ID_,
        SCOPE_TYPE_,
        SCOPE_DEFINITION_ID_,
        PROPAGATED_STAGE_INST_ID_,
        NAME_,
        PARENT_TASK_ID_,
        DESCRIPTION_,
        OWNER_,
        ASSIGNEE_,
        START_TIME_,
        CLAIM_TIME_,
        END_TIME_,
        DURATION_,
        DELETE_REASON_,
        TASK_DEF_KEY_,
        FORM_KEY_,
        PRIORITY_,
        DUE_DATE_,
        CATEGORY_,
        TENANT_ID_,
        LAST_UPDATED_TIME_
      ) values (
        #{id ,jdbcType=VARCHAR},
        1, #{taskDefinitionId, jdbcType=VARCHAR},
        #{processDefinitionId, jdbcType=VARCHAR},
        #{processInstanceId, jdbcType=VARCHAR},
        #{executionId, jdbcType=VARCHAR},
        #{scopeId, jdbcType=VARCHAR},
        #{subScopeId, jdbcType=VARCHAR},
        #{scopeType, jdbcType=VARCHAR},
        #{scopeDefinitionId, jdbcType=VARCHAR},
        #{propagatedStageInstanceId, jdbcType=VARCHAR},
        #{name ,jdbcType=VARCHAR},
        #{parentTaskId ,jdbcType=VARCHAR},
        #{description ,jdbcType=VARCHAR},
        #{owner ,jdbcType=VARCHAR},
        #{assignee ,jdbcType=VARCHAR},
        #{createTime, jdbcType=TIMESTAMP},
        #{claimTime, jdbcType=TIMESTAMP},
        #{endTime, jdbcType=TIMESTAMP},
        #{durationInMillis ,jdbcType=BIGINT},
        #{deleteReason ,jdbcType=VARCHAR},
        #{taskDefinitionKey ,jdbcType=VARCHAR},
        #{formKey ,jdbcType=VARCHAR},
        #{priority, jdbcType=INTEGER},
        #{dueDate, jdbcType=TIMESTAMP},
        #{category, jdbcType=VARCHAR},
        #{tenantId, jdbcType=VARCHAR},
        #{lastUpdateTime, jdbcType=TIMESTAMP}
      )
  </insert>

  <insert id="bulkInsertHistoricTaskInstance" parameterType="java.util.List">
      insert into ${prefix}ACT_HI_TASKINST (
        ID_,
        REV_,
        TASK_DEF_ID_,
        PROC_DEF_ID_,
        PROC_INST_ID_,
        EXECUTION_ID_,
        SCOPE_ID_,
        SUB_SCOPE_ID_,
        SCOPE_TYPE_,
        SCOPE_DEFINITION_ID_,
        PROPAGATED_STAGE_INST_ID_,
        NAME_,
        PARENT_TASK_ID_,
        DESCRIPTION_,
        OWNER_,
        ASSIGNEE_,
        START_TIME_,
        CLAIM_TIME_,
        END_TIME_,
        DURATION_,
        DELETE_REASON_,
        TASK_DEF_KEY_,
        FORM_KEY_,
        PRIORITY_,
        DUE_DATE_,
        CATEGORY_,
        TENANT_ID_,
        LAST_UPDATED_TIME_
      ) values
        <foreach collection="list" item="historicTask" index="index" separator=",">
          (#{historicTask.id ,jdbcType=VARCHAR},
           1, #{historicTask.taskDefinitionId, jdbcType=VARCHAR},
           #{historicTask.processDefinitionId, jdbcType=VARCHAR},
           #{historicTask.processInstanceId, jdbcType=VARCHAR},
           #{historicTask.executionId, jdbcType=VARCHAR},
           #{historicTask.scopeId, jdbcType=VARCHAR},
           #{historicTask.subScopeId, jdbcType=VARCHAR},
           #{historicTask.scopeType, jdbcType=VARCHAR},
           #{historicTask.scopeDefinitionId, jdbcType=VARCHAR},
           #{historicTask.propagatedStageInstanceId, jdbcType=VARCHAR},
           #{historicTask.name ,jdbcType=VARCHAR},
           #{historicTask.parentTaskId ,jdbcType=VARCHAR},
           #{historicTask.description ,jdbcType=VARCHAR},
           #{historicTask.owner ,jdbcType=VARCHAR},
           #{historicTask.assignee ,jdbcType=VARCHAR},
           #{historicTask.createTime, jdbcType=TIMESTAMP},
           #{historicTask.claimTime, jdbcType=TIMESTAMP},
           #{historicTask.endTime, jdbcType=TIMESTAMP},
           #{historicTask.durationInMillis ,jdbcType=BIGINT},
           #{historicTask.deleteReason ,jdbcType=VARCHAR},
           #{historicTask.taskDefinitionKey ,jdbcType=VARCHAR},
           #{historicTask.formKey ,jdbcType=VARCHAR},
           #{historicTask.priority, jdbcType=INTEGER},
           #{historicTask.dueDate, jdbcType=TIMESTAMP},
           #{historicTask.category, jdbcType=VARCHAR},
           #{historicTask.tenantId, jdbcType=VARCHAR},
           #{historicTask.lastUpdateTime, jdbcType=TIMESTAMP})
        </foreach>
  </insert>

  <insert id="bulkInsertHistoricTaskInstance" databaseId="oracle" parameterType="java.util.List">
      INSERT ALL
        <foreach collection="list" item="historicTask" index="index">
          INTO ${prefix}ACT_HI_TASKINST (
            ID_,
            REV_,
            TASK_DEF_ID_,
            PROC_DEF_ID_,
            PROC_INST_ID_,
            EXECUTION_ID_,
            SCOPE_ID_,
            SUB_SCOPE_ID_,
            SCOPE_TYPE_,
            SCOPE_DEFINITION_ID_,
            PROPAGATED_STAGE_INST_ID_,
            NAME_,
            PARENT_TASK_ID_,
            DESCRIPTION_,
            OWNER_,
            ASSIGNEE_,
            START_TIME_,
            CLAIM_TIME_,
            END_TIME_,
            DURATION_,
            DELETE_REASON_,
            TASK_DEF_KEY_,
            FORM_KEY_,
            PRIORITY_,
            DUE_DATE_,
            CATEGORY_,
            TENANT_ID_,
            LAST_UPDATED_TIME_
          ) VALUES
            (#{historicTask.id ,jdbcType=VARCHAR},
             1, #{historicTask.taskDefinitionId, jdbcType=VARCHAR},
             #{historicTask.processDefinitionId, jdbcType=VARCHAR},
             #{historicTask.processInstanceId, jdbcType=VARCHAR},
             #{historicTask.executionId, jdbcType=VARCHAR},
             #{historicTask.scopeId, jdbcType=VARCHAR},
             #{historicTask.subScopeId, jdbcType=VARCHAR},
             #{historicTask.scopeType, jdbcType=VARCHAR},
             #{historicTask.scopeDefinitionId, jdbcType=VARCHAR},
             #{historicTask.propagatedStageInstanceId, jdbcType=VARCHAR},
             #{historicTask.name ,jdbcType=VARCHAR},
             #{historicTask.parentTaskId ,jdbcType=VARCHAR},
             #{historicTask.description ,jdbcType=VARCHAR},
             #{historicTask.owner ,jdbcType=VARCHAR},
             #{historicTask.assignee ,jdbcType=VARCHAR},
             #{historicTask.createTime, jdbcType=TIMESTAMP},
             #{historicTask.claimTime, jdbcType=TIMESTAMP},
             #{historicTask.endTime, jdbcType=TIMESTAMP},
             #{historicTask.durationInMillis ,jdbcType=BIGINT},
             #{historicTask.deleteReason ,jdbcType=VARCHAR},
             #{historicTask.taskDefinitionKey ,jdbcType=VARCHAR},
             #{historicTask.formKey ,jdbcType=VARCHAR},
             #{historicTask.priority, jdbcType=INTEGER},
             #{historicTask.dueDate, jdbcType=TIMESTAMP},
             #{historicTask.category, jdbcType=VARCHAR},
             #{historicTask.tenantId, jdbcType=VARCHAR},
             #{historicTask.lastUpdateTime, jdbcType=TIMESTAMP})
        </foreach>
    SELECT * FROM dual
  </insert>

  <!-- HISTORIC TASK INSTANCE UPDATE -->

  <update id="updateHistoricTaskInstance" parameterType="org.flowable.task.service.impl.persistence.entity.HistoricTaskInstanceEntityImpl">
    update ${prefix}ACT_HI_TASKINST
      <set>
      	  REV_ = #{revisionNext, jdbcType=INTEGER},
	      <if test="originalPersistentState.taskDefinitionId != taskDefinitionId">
	      	TASK_DEF_ID_ = #{taskDefinitionId, jdbcType=VARCHAR},
	      </if>
	      <if test="originalPersistentState.processDefinitionId != processDefinitionId">
	      	PROC_DEF_ID_ = #{processDefinitionId, jdbcType=VARCHAR},
	      </if>
	      <if test="originalPersistentState.executionId != executionId">
	      	EXECUTION_ID_ = #{executionId, jdbcType=VARCHAR},
	      </if>
          <if test="originalPersistentState.scopeId != scopeId">
            SCOPE_ID_ = #{scopeId, jdbcType=VARCHAR},
          </if>
          <if test="originalPersistentState.subScopeId != subScopeId">
            SUB_SCOPE_ID_ = #{subScopeId, jdbcType=VARCHAR},
          </if>
          <if test="originalPersistentState.scopeType != scopeType">
            SCOPE_TYPE_ = #{scopeType, jdbcType=VARCHAR},
          </if>
          <if test="originalPersistentState.scopeDefinitionId != scopeDefinitionId">
            SCOPE_DEFINITION_ID_ = #{scopeDefinitionId, jdbcType=VARCHAR},
          </if>
          <if test="originalPersistentState.propagatedStageInstanceId != propagatedStageInstanceId">
            PROPAGATED_STAGE_INST_ID_ = #{propagatedStageInstanceId, jdbcType=VARCHAR},
          </if>
	      <if test="originalPersistentState.name != name">
	      	NAME_ = #{name, jdbcType=VARCHAR},
	      </if>
	      <if test="originalPersistentState.parentTaskId != parentTaskId">
	      	PARENT_TASK_ID_ = #{parentTaskId, jdbcType=VARCHAR},
	      </if>
	      <if test="originalPersistentState.description != description">
	      	DESCRIPTION_ = #{description, jdbcType=VARCHAR},
	      </if>
	      <if test="originalPersistentState.owner != owner">
	        OWNER_ = #{owner, jdbcType=VARCHAR},
	      </if>
	      <if test="originalPersistentState.assignee != assignee">
	      	ASSIGNEE_ = #{assignee, jdbcType=VARCHAR},
	      </if>
	      <if test="originalPersistentState.claimTime != claimTime">
	      	CLAIM_TIME_ = #{claimTime, jdbcType=TIMESTAMP},
	      </if>
	      <if test="originalPersistentState.endTime != endTime">
	      	END_TIME_ = #{endTime, jdbcType=TIMESTAMP},
	      </if>
	      <if test="originalPersistentState.durationInMillis != durationInMillis">
	      	DURATION_ = #{durationInMillis ,jdbcType=BIGINT},
	      </if>
	      <if test="originalPersistentState.deleteReason != deleteReason">
	      	DELETE_REASON_ = #{deleteReason ,jdbcType=VARCHAR},
	      </if>
	      <if test="originalPersistentState.taskDefinitionKey != taskDefinitionKey">
	      	TASK_DEF_KEY_ = #{taskDefinitionKey ,jdbcType=VARCHAR},
	      </if>
	      <if test="originalPersistentState.formKey != formKey">
	      	FORM_KEY_ = #{formKey ,jdbcType=VARCHAR},
	      </if>
	      <if test="originalPersistentState.priority != priority">
	      	PRIORITY_ = #{priority, jdbcType=INTEGER},
	      </if>
	      <if test="originalPersistentState.dueDate != dueDate">
	      	DUE_DATE_ = #{dueDate, jdbcType=TIMESTAMP},
	      </if>
	      <if test="originalPersistentState.category != category">
	      	CATEGORY_ = #{category, jdbcType=VARCHAR},
	  	  </if>
	  	  <if test="originalPersistentState.lastUpdateTime != lastUpdateTime">
	      	LAST_UPDATED_TIME_ = #{lastUpdateTime, jdbcType=TIMESTAMP},
	      </if>
  	  </set>
    where ID_ = #{id}
    and REV_ = #{revision, jdbcType=INTEGER}
  </update>

  <!-- HISTORIC TASK INSTANCE DELETE -->

  <delete id="deleteHistoricTaskInstance" parameterType="org.flowable.task.service.impl.persistence.entity.HistoricTaskInstanceEntityImpl">
    delete from ${prefix}ACT_HI_TASKINST where ID_ = #{id}
  </delete>

  <delete id="bulkDeleteHistoricTaskInstance" parameterType="java.util.Collection">
    delete from ${prefix}ACT_HI_TASKINST where
    <foreach item="task" collection="list" index="index" separator=" or ">
        ID_ = #{task.id, jdbcType=VARCHAR}
    </foreach>
  </delete>
  
  <delete id="bulkDeleteHistoricTaskInstancesForNonExistingProcessInstances" parameterType="java.util.Map">
    delete <if test="_databaseId != 'postgres' and _databaseId != 'cockroachdb' and _databaseId != 'db2'"> TASK </if> from ${prefix}ACT_HI_TASKINST TASK where TASK.PROC_INST_ID_ is not null and TASK.PROC_INST_ID_ != '' and
    NOT EXISTS (select PROCINST.ID_ from ${prefix}ACT_HI_PROCINST PROCINST where TASK.PROC_INST_ID_ = PROCINST.ID_)
  </delete>
  
  <delete id="bulkDeleteHistoricTaskInstancesForNonExistingProcessInstances" parameterType="java.util.Map" databaseId="oracle">
    delete from ${prefix}ACT_HI_TASKINST TASK where TASK.PROC_INST_ID_ is not null and
    NOT EXISTS (select PROCINST.ID_ from ${prefix}ACT_HI_PROCINST PROCINST where TASK.PROC_INST_ID_ = PROCINST.ID_)
  </delete>

  <delete id="bulkDeleteHistoricTaskInstancesForNonExistingProcessInstances" databaseId="h2" parameterType="java.util.Map">
    delete from ${prefix}ACT_HI_TASKINST where PROC_INST_ID_ is not null and PROC_INST_ID_ != '' and 
    PROC_INST_ID_ NOT IN (select PROCINST.ID_ from ${prefix}ACT_HI_PROCINST PROCINST)
  </delete>
  
  <delete id="bulkDeleteHistoricTaskInstancesForNonExistingCaseInstances" parameterType="java.util.Map">
    delete <if test="_databaseId != 'postgres' and _databaseId != 'cockroachdb' and _databaseId != 'db2'"> TASK </if> from ${prefix}ACT_HI_TASKINST TASK where TASK.SCOPE_ID_ is not null and TASK.SCOPE_ID_ != '' and TASK.SCOPE_TYPE_ = 'cmmn' and
    NOT EXISTS (select CASEINST.ID_ from ${prefix}ACT_CMMN_HI_CASE_INST CASEINST where TASK.SCOPE_ID_ = CASEINST.ID_)
  </delete>
  
  <delete id="bulkDeleteHistoricTaskInstancesForNonExistingCaseInstances" parameterType="java.util.Map" databaseId="oracle">
    delete from ${prefix}ACT_HI_TASKINST TASK where TASK.SCOPE_ID_ is not null and TASK.SCOPE_TYPE_ = 'cmmn' and
    NOT EXISTS (select CASEINST.ID_ from ${prefix}ACT_CMMN_HI_CASE_INST CASEINST where TASK.SCOPE_ID_ = CASEINST.ID_)
  </delete>

  <delete id="bulkDeleteHistoricTaskInstancesForNonExistingCaseInstances" databaseId="h2" parameterType="java.util.Map">
    delete from ${prefix}ACT_HI_TASKINST where SCOPE_ID_ is not null and SCOPE_ID_ != '' and SCOPE_TYPE_ = 'cmmn' and
    SCOPE_ID_ NOT IN (select CASEINST.ID_ from ${prefix}ACT_CMMN_HI_CASE_INST CASEINST)
  </delete>

  <!-- HISTORIC TASK INSTANCE RESULT MAP -->

  <resultMap id="historicTaskInstanceResultMap" type="org.flowable.task.service.impl.persistence.entity.HistoricTaskInstanceEntityImpl">
    <id property="id" column="ID_" jdbcType="VARCHAR" />
    <result property="revision" column="REV_" jdbcType="INTEGER"/>
    <result property="taskDefinitionId" column="TASK_DEF_ID_" jdbcType="VARCHAR" />
    <result property="processDefinitionId" column="PROC_DEF_ID_" jdbcType="VARCHAR" />
    <result property="processInstanceId" column="PROC_INST_ID_" jdbcType="VARCHAR" />
    <result property="executionId" column="EXECUTION_ID_" jdbcType="VARCHAR" />
    <result property="scopeId" column="SCOPE_ID_" jdbcType="VARCHAR"/>
    <result property="subScopeId" column="SUB_SCOPE_ID_" jdbcType="VARCHAR"/>
    <result property="scopeType" column="SCOPE_TYPE_" jdbcType="VARCHAR"/>
    <result property="scopeDefinitionId" column="SCOPE_DEFINITION_ID_" jdbcType="VARCHAR"/>
    <result property="propagatedStageInstanceId" column="PROPAGATED_STAGE_INST_ID_" jdbcType="VARCHAR"/>
    <result property="name" column="NAME_" jdbcType="VARCHAR" />
    <result property="parentTaskId" column="PARENT_TASK_ID_" jdbcType="VARCHAR" />
    <result property="description" column="DESCRIPTION_" jdbcType="VARCHAR" />
    <result property="owner" column="OWNER_" jdbcType="VARCHAR" />
    <result property="assignee" column="ASSIGNEE_" jdbcType="VARCHAR" />
    <result property="createTime" column="START_TIME_" jdbcType="TIMESTAMP" />
    <result property="claimTime" column="CLAIM_TIME_" jdbcType="TIMESTAMP" />
    <result property="endTime" column="END_TIME_" jdbcType="TIMESTAMP" />
    <result property="durationInMillis" column="DURATION_" jdbcType="BIGINT" />
    <result property="deleteReason" column="DELETE_REASON_" jdbcType="VARCHAR" />
    <result property="taskDefinitionKey" column="TASK_DEF_KEY_" jdbcType="VARCHAR" />
    <result property="formKey" column="FORM_KEY_" jdbcType="VARCHAR" />
    <result property="priority" column="PRIORITY_" jdbcType="INTEGER" />
    <result property="dueDate" column="DUE_DATE_" jdbcType="TIMESTAMP" />
    <result property="category" column="CATEGORY_" jdbcType="VARCHAR" />
    <result property="tenantId" column="TENANT_ID_" jdbcType="VARCHAR" />
    <result property="lastUpdateTime" column="LAST_UPDATED_TIME_" jdbcType="TIMESTAMP" />
  </resultMap>

  <resultMap id="historicTaskAndRelatedEntitiesResultMap" type="org.flowable.task.service.impl.persistence.entity.HistoricTaskInstanceEntityImpl">
    <id property="id" column="ID_" jdbcType="VARCHAR" />
    <result property="revision" column="REV_" jdbcType="INTEGER"/>
    <result property="taskDefinitionId" column="TASK_DEF_ID_" jdbcType="VARCHAR" />
    <result property="processDefinitionId" column="PROC_DEF_ID_" jdbcType="VARCHAR" />
    <result property="processInstanceId" column="PROC_INST_ID_" jdbcType="VARCHAR" />
    <result property="executionId" column="EXECUTION_ID_" jdbcType="VARCHAR" />
    <result property="scopeId" column="SCOPE_ID_" jdbcType="VARCHAR"/>
    <result property="subScopeId" column="SUB_SCOPE_ID_" jdbcType="VARCHAR"/>
    <result property="scopeType" column="SCOPE_TYPE_" jdbcType="VARCHAR"/>
    <result property="scopeDefinitionId" column="SCOPE_DEFINITION_ID_" jdbcType="VARCHAR"/>
    <result property="propagatedStageInstanceId" column="PROPAGATED_STAGE_INST_ID_" jdbcType="VARCHAR"/>
    <result property="name" column="NAME_" jdbcType="VARCHAR" />
    <result property="parentTaskId" column="PARENT_TASK_ID_" jdbcType="VARCHAR" />
    <result property="description" column="DESCRIPTION_" jdbcType="VARCHAR" />
    <result property="owner" column="OWNER_" jdbcType="VARCHAR" />
    <result property="assignee" column="ASSIGNEE_" jdbcType="VARCHAR" />
    <result property="createTime" column="START_TIME_" jdbcType="TIMESTAMP" />
    <result property="claimTime" column="CLAIM_TIME_" jdbcType="TIMESTAMP" />
    <result property="endTime" column="END_TIME_" jdbcType="TIMESTAMP" />
    <result property="durationInMillis" column="DURATION_" jdbcType="BIGINT" />
    <result property="deleteReason" column="DELETE_REASON_" jdbcType="VARCHAR" />
    <result property="taskDefinitionKey" column="TASK_DEF_KEY_" jdbcType="VARCHAR" />
    <result property="formKey" column="FORM_KEY_" jdbcType="VARCHAR" />
    <result property="priority" column="PRIORITY_" jdbcType="INTEGER" />
    <result property="dueDate" column="DUE_DATE_" jdbcType="TIMESTAMP" />
    <result property="category" column="CATEGORY_" jdbcType="VARCHAR" />
    <result property="tenantId" column="TENANT_ID_" jdbcType="VARCHAR" />
    <result property="lastUpdateTime" column="LAST_UPDATED_TIME_" jdbcType="TIMESTAMP" />
    <collection property="queryVariables" column="TASK_ID_" javaType="ArrayList" ofType="org.flowable.variable.service.impl.persistence.entity.HistoricVariableInstanceEntityImpl">
      <id property="id" column="VAR_ID_"/>
      <result property="name" column="VAR_NAME_" javaType="String" jdbcType="VARCHAR" />
      <result property="variableType" column="VAR_TYPE_" javaType="org.flowable.variable.api.types.VariableType" jdbcType="VARCHAR" />
      <result property="revision" column="VAR_REV_" jdbcType="INTEGER" />
      <result property="processInstanceId" column="VAR_PROC_INST_ID_" jdbcType="VARCHAR" />
      <result property="executionId" column="VAR_EXECUTION_ID_" jdbcType="VARCHAR" />
      <result property="taskId" column="VAR_TASK_ID_" jdbcType="VARCHAR" />
      <result property="byteArrayRef" column="VAR_BYTEARRAY_ID_" typeHandler="VariableByteArrayRefTypeHandler"/>
      <result property="doubleValue" column="VAR_DOUBLE_" jdbcType="DOUBLE" />
      <result property="textValue" column="VAR_TEXT_" jdbcType="VARCHAR" />
      <result property="textValue2" column="VAR_TEXT2_" jdbcType="VARCHAR" />
      <result property="longValue" column="VAR_LONG_" jdbcType="BIGINT" />
    </collection>
    <collection property="queryIdentityLinks" column="TASK_ID_" javaType="ArrayList" ofType="org.flowable.identitylink.service.impl.persistence.entity.HistoricIdentityLinkEntityImpl">
      <id property="id" column="ILINK_ID_"/>
      <result property="type" column="ILINK_TYPE_" jdbcType="VARCHAR" />
      <result property="userId" column="ILINK_USER_ID_" jdbcType="VARCHAR" />
      <result property="groupId" column="ILINK_GROUP_ID_" jdbcType="VARCHAR" />
      <result property="taskId" column="ILINK_TASK_ID_" jdbcType="VARCHAR" />
      <result property="processInstanceId" column="ILINK_PROC_INST_ID_" jdbcType="VARCHAR" />
      <result property="createTime" column="ILINK_CREATE_TIME_" jdbcType="TIMESTAMP" />
    </collection>
  </resultMap>

  <!-- HISTORIC TASK INSTANCE SELECT -->

  <select id="selectHistoricTaskInstance" resultMap="historicTaskInstanceResultMap">
    select * from ${prefix}ACT_HI_TASKINST where ID_ = #{historicTaskInstanceId, jdbcType=VARCHAR}
  </select>

  <select id="selectHistoricTasksByParentTaskId" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject" resultMap="historicTaskInstanceResultMap">
    select * from ${prefix}ACT_HI_TASKINST where PARENT_TASK_ID_ = #{parameter}
  </select>

  <select id="selectHistoricTaskInstancesByProcessInstanceId" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject" resultMap="historicTaskInstanceResultMap" >
    select *
    from ${prefix}ACT_HI_TASKINST
    where PROC_INST_ID_ = #{parameter}
  </select>

  <select id="selectHistoricTaskInstancesByQueryCriteria" parameterType="org.flowable.task.service.impl.HistoricTaskInstanceQueryImpl" resultMap="historicTaskInstanceResultMap">
    <if test="needsPaging">${limitBefore}</if>
    SELECT RES.* <if test="needsPaging">${limitBetween}</if>
    <include refid="selectHistoricTaskInstancesByQueryCriteriaSql"/>
    ${orderBy}
    <if test="needsPaging">${limitAfter}</if>
  </select>

  <select id="selectHistoricTaskInstanceCountByQueryCriteria" parameterType="org.flowable.task.service.impl.HistoricTaskInstanceQueryImpl" resultType="long">
    select count(distinct RES.ID_)
    <include refid="selectHistoricTaskInstancesByQueryCriteriaSql"/>
  </select>

  <sql id="selectHistoricTaskInstancesByQueryCriteriaSql">
    from ${prefix}ACT_HI_TASKINST RES
    <include refid="commonSelectHistoricTaskInstancesByQueryCriteriaSql"/>
  </sql>

  <select id="selectHistoricTaskInstancesWithRelatedEntitiesByQueryCriteria" parameterType="org.flowable.task.service.impl.HistoricTaskInstanceQueryImpl" resultMap="historicTaskAndRelatedEntitiesResultMap">
    select RES.*,
    <if test="includeTaskLocalVariables or includeProcessVariables">
      VAR.ID_ as VAR_ID_, VAR.NAME_ as VAR_NAME_, VAR.VAR_TYPE_ as VAR_TYPE_, VAR.REV_ as VAR_REV_,
      VAR.PROC_INST_ID_ as VAR_PROC_INST_ID_, VAR.EXECUTION_ID_ as VAR_EXECUTION_ID_, VAR.TASK_ID_ as VAR_TASK_ID_,
      VAR.BYTEARRAY_ID_ as VAR_BYTEARRAY_ID_, VAR.DOUBLE_ as VAR_DOUBLE_,
      VAR.TEXT_ as VAR_TEXT_, VAR.TEXT2_ as VAR_TEXT2_, VAR.LAST_UPDATED_TIME_ as VAR_LAST_UPDATED_TIME_, VAR.LONG_ as VAR_LONG_
    </if>
    <if test="(includeTaskLocalVariables or includeProcessVariables) and includeIdentityLinks">
      ,
    </if>
    <if test="includeIdentityLinks">
      ILINK.ID_ as ILINK_ID_, ILINK.TYPE_ as ILINK_TYPE_, ILINK.USER_ID_ as ILINK_USER_ID_,
      ILINK.GROUP_ID_ as ILINK_GROUP_ID_, ILINK.TASK_ID_ as ILINK_TASK_ID_,
      ILINK.PROC_INST_ID_ as ILINK_PROC_INST_ID_, ILINK.CREATE_TIME_ as ILINK_CREATE_TIME_
    </if>
    from (
      <if test="needsPaging">${limitBefore}</if>
      <!-- top 100 percent is only needed when doing order by in a subselect -->
      SELECT <if test="_databaseId == 'mssql'">top 100 percent</if> RES.* <if test="needsPaging">${limitBetween}</if>
      <include refid="selectHistoricTaskInstancesByQueryCriteriaSql"/>
      ${orderBy}
      <if test="needsPaging">${limitAfter}</if>
    ) RES
    <choose>
      <when test="includeTaskLocalVariables &amp;&amp; includeProcessVariables">
        left outer join ${prefix}ACT_HI_VARINST VAR ON RES.ID_ = VAR.TASK_ID_ or (RES.PROC_INST_ID_ = VAR.EXECUTION_ID_)
      </when>
      <otherwise>
        <if test="includeTaskLocalVariables">
          left outer join ${prefix}ACT_HI_VARINST VAR ON RES.ID_ = VAR.TASK_ID_
        </if>
        <if test="includeProcessVariables">
          left outer join ${prefix}ACT_HI_VARINST VAR ON RES.PROC_INST_ID_ = VAR.EXECUTION_ID_
        </if>
      </otherwise>
    </choose>
    <if test="includeIdentityLinks">
      left outer join ${prefix}ACT_HI_IDENTITYLINK ILINK on RES.ID_ = ILINK.TASK_ID_
    </if>
    ${outerJoinOrderBy}
  </select>

  <delete id="bulkDeleteHistoricTaskInstances">
    delete from ${prefix}ACT_HI_TASKINST
    <where>
      <include refid="commonTaskInstanceQuerySql">
        <property name="queryTablePrefix" value=""/>
      </include>
      <foreach item="orQueryObject" index="orIndex" collection="orQueryObjects">
        and
        <trim prefix="(" prefixOverrides="OR" suffix=")">
          <include refid="commonTaskInstanceOrQuerySql">
            <property name="queryTablePrefix" value=""/>
          </include>
        </trim>
      </foreach>
    </where>
  </delete>

  <sql id="commonSelectHistoricTaskInstancesByQueryCriteriaSql">
    <where>
      <include refid="commonTaskInstanceQuerySql">
        <property name="queryTablePrefix" value="RES."/>
      </include>
      <if test="processDefinitionKey != null || processDefinitionKeyLike != null || processDefinitionKeyLikeIgnoreCase != null || processDefinitionName != null || processDefinitionNameLike != null || (processCategoryInList != null &amp;&amp; processCategoryInList.size() &gt; 0) || (processCategoryNotInList != null &amp;&amp; processCategoryNotInList.size() &gt; 0) || (processDefinitionKeys != null &amp;&amp; processDefinitionKeys.size() &gt; 0) || deploymentId != null || (deploymentIds != null &amp;&amp; deploymentIds.size() &gt; 0)">
        and exists (
            select 1
            from ${prefix}ACT_RE_PROCDEF D
            <where>
              RES.PROC_DEF_ID_ = D.ID_
              <if test="processDefinitionKey != null">
                and D.KEY_ = #{processDefinitionKey}
              </if>
              <if test="processDefinitionKeyLike != null">
                and D.KEY_ like #{processDefinitionKeyLike}${wildcardEscapeClause}
              </if>
              <if test="processDefinitionKeyLikeIgnoreCase != null">
                and lower(D.KEY_) like #{processDefinitionKeyLikeIgnoreCase}${wildcardEscapeClause}
              </if>
              <if test="processDefinitionKeys != null &amp;&amp; processDefinitionKeys.size() &gt; 0">
                and D.KEY_ in
                <foreach item="item" index="index" collection="processDefinitionKeys" open="(" separator="," close=")">
                  #{item}
                </foreach>
              </if>
              <if test="processDefinitionName != null">
                and D.NAME_ = #{processDefinitionName}
              </if>
              <if test="processDefinitionNameLike != null">
                and D.NAME_ like #{processDefinitionNameLike}${wildcardEscapeClause}
              </if>
              <if test="processCategoryInList != null &amp;&amp; processCategoryInList.size() &gt; 0">
                and D.CATEGORY_ IN
                <foreach item="processCategory" index="index" collection="processCategoryInList"
                         open="(" separator="," close=")">
                  #{processCategory}
                </foreach>
              </if>
              <if test="processCategoryNotInList != null &amp;&amp; processCategoryNotInList.size() &gt; 0">
                and D.CATEGORY_ NOT IN
                <foreach item="processCategory" index="index" collection="processCategoryNotInList"
                         open="(" separator="," close=")">
                  #{processCategory}
                </foreach>
              </if>
              <if test="deploymentId != null">
                and D.DEPLOYMENT_ID_ = #{deploymentId}
              </if>
              <if test="deploymentIds != null &amp;&amp; deploymentIds.size() &gt; 0">
                and D.DEPLOYMENT_ID_ IN
                <foreach item="deployment" index="index" collection="deploymentIds"
                         open="(" separator="," close=")">
                  #{deployment}
                </foreach>
              </if>
            </where>
        )
      </if>
      <if test="caseDefinitionKey != null || caseDefinitionKeyLike != null ||  caseDefinitionKeyLikeIgnoreCase != null || (caseDefinitionKeys != null &amp;&amp; caseDefinitionKeys.size() &gt; 0) || cmmnDeploymentId != null || (cmmnDeploymentIds != null &amp;&amp; cmmnDeploymentIds.size() &gt; 0)">
        and exists (
            select 1
            from ${prefix}ACT_CMMN_CASEDEF CD
            <where>
                RES.SCOPE_DEFINITION_ID_ = CD.ID_
              <if test="cmmnDeploymentId != null">
                and CD.DEPLOYMENT_ID_ = #{cmmnDeploymentId}
              </if>
              <if test="cmmnDeploymentIds != null &amp;&amp; cmmnDeploymentIds.size() &gt; 0">
                and CD.DEPLOYMENT_ID_ IN
                <foreach item="deployment" index="index" collection="cmmnDeploymentIds"
                         open="(" separator="," close=")">
                  #{deployment}
                </foreach>
              </if>
              <if test="caseDefinitionKey != null">
                and CD.KEY_ = #{caseDefinitionKey}
              </if>
              <if test="caseDefinitionKeyLike != null">
                and CD.KEY_ like #{caseDefinitionKeyLike}${wildcardEscapeClause}
              </if>
              <if test="caseDefinitionKeyLikeIgnoreCase != null">
                and lower(CD.KEY_) like #{caseDefinitionKeyLikeIgnoreCase}${wildcardEscapeClause}
              </if>
              <if test="caseDefinitionKeys != null &amp;&amp; caseDefinitionKeys.size() &gt; 0">
                and CD.KEY_ in
                <foreach item="item" index="index" collection="caseDefinitionKeys" open="(" separator="," close=")">
                  #{item}
                </foreach>
              </if>
            </where>
        )
      </if>
      <if test="processFinished || processUnfinished || processInstanceBusinessKey != null || processInstanceBusinessKeyLike != null || processInstanceBusinessKeyLikeIgnoreCase != null">
        and exists (
            select 1
            from ${prefix}ACT_HI_PROCINST HPI
            <where>
              RES.PROC_INST_ID_ = HPI.ID_
              <if test="processFinished">
                and HPI.END_TIME_ is not null
              </if>
              <if test="processUnfinished">
                and HPI.END_TIME_ is null
              </if>
              <if test="processInstanceBusinessKey != null">
                and HPI.BUSINESS_KEY_ = #{processInstanceBusinessKey}
              </if>
              <if test="processInstanceBusinessKeyLike != null">
                and HPI.BUSINESS_KEY_ like #{processInstanceBusinessKeyLike}${wildcardEscapeClause}
              </if>
              <if test="processInstanceBusinessKeyLikeIgnoreCase != null">
                and lower(HPI.BUSINESS_KEY_) like #{processInstanceBusinessKeyLikeIgnoreCase}${wildcardEscapeClause}
              </if>
            </where>
        )
      </if>
      <foreach item="queryVar" collection="queryVariableValues" index="index">
        <choose>
            <when test="queryVar.operator.equals('EXISTS')">
              and EXISTS (
                select ID_ from ${prefix}ACT_HI_VARINST where NAME_ = #{queryVar.name}
                <if test="!queryVar.local">
                    and RES.PROC_INST_ID_ = PROC_INST_ID_ and TASK_ID_ is null
                </if>
                <if test="queryVar.local">
                    and RES.ID_ = TASK_ID_
                </if>
              )
            </when>
            <when test="queryVar.operator.equals('NOT_EXISTS')">
              and NOT EXISTS (
                select ID_ from ${prefix}ACT_HI_VARINST where NAME_ = #{queryVar.name}
                <if test="!queryVar.local">
                    and RES.PROC_INST_ID_ = PROC_INST_ID_ and TASK_ID_ is null
                </if>
                <if test="queryVar.local">
                    and RES.ID_ = TASK_ID_
                </if>
              )
            </when>
            <otherwise>
              and exists (
                select 1
                from ${prefix}ACT_HI_VARINST V
                <where>
                  <if test="!queryVar.local">
                    and RES.PROC_INST_ID_ = PROC_INST_ID_ and TASK_ID_ is null
                  </if>
                  <if test="queryVar.local">
                    and RES.ID_ = TASK_ID_
                  </if>
                  <if test="queryVar.name != null">
                    <!-- Match-all variable-names when name is null -->
                    and V.NAME_= #{queryVar.name}
                  </if>
                  <if test="queryVar.needsTypeCheck()">
                    and V.VAR_TYPE_ = #{queryVar.type}
                  </if>
                  <!-- Variable value -->
                  <if test="queryVar.textValue != null &amp;&amp; queryVar.longValue == null &amp;&amp; queryVar.doubleValue == null">
                    <choose>
                      <when test="queryVar.operator.equals('EQUALS_IGNORE_CASE') || queryVar.operator.equals('NOT_EQUALS_IGNORE_CASE') || queryVar.operator.equals('LIKE_IGNORE_CASE')">
                        and (lower(V.TEXT_)
                      </when>
                      <otherwise>
                        and (V.TEXT_
                      </otherwise>
                    </choose>
                    <choose>
                      <when test="queryVar.operator.equals('LIKE') || queryVar.operator.equals('LIKE_IGNORE_CASE')">LIKE</when>
                      <otherwise><include refid="executionVariableOperator" /></otherwise>
                    </choose>
                    #{queryVar.textValue}
                    <choose>
                      <when test="queryVar.operator.equals('LIKE') || queryVar.operator.equals('LIKE_IGNORE_CASE')">${wildcardEscapeClause}</when>
                    </choose>
                    <if test="queryVar.operator.equals('NOT_EQUALS') || queryVar.operator.equals('NOT_EQUALS_IGNORE_CASE')">
                      or V.TEXT_ is null
                    </if>
                    )
                  </if>
                  <if test="queryVar.textValue2 != null">
                    and V.TEXT2_
                    <choose>
                      <when test="queryVar.operator.equals('LIKE')">LIKE</when>
                      <otherwise><include refid="executionVariableOperator" /></otherwise>
                    </choose>
                    #{queryVar.textValue2}
                    <choose>
                      <when test="queryVar.operator.equals('LIKE')">${wildcardEscapeClause}</when>
                    </choose>
                  </if>
                  <if test="queryVar.longValue != null">
                    and (V.LONG_
                    <include refid="executionVariableOperator" />
                    #{queryVar.longValue}
                    <if test="queryVar.operator.equals('NOT_EQUALS') || queryVar.operator.equals('NOT_EQUALS_IGNORE_CASE')">
                      or V.LONG_ is null
                    </if>
                    )
                  </if>
                  <if test="queryVar.doubleValue != null">
                    and (V.DOUBLE_
                    <include refid="executionVariableOperator" />
                    #{queryVar.doubleValue}
                    <if test="queryVar.operator.equals('NOT_EQUALS') || queryVar.operator.equals('NOT_EQUALS_IGNORE_CASE')">
                      or V.DOUBLE_ is null
                    </if>
                    )
                  </if>
                  <!-- Null variable type -->
                  <if test="queryVar.textValue == null &amp;&amp; queryVar.textValue2 == null &amp;&amp; queryVar.longValue == null &amp;&amp; queryVar.doubleValue == null">
                    <choose>
                      <when test="queryVar.operator.equals('NOT_EQUALS')">
                        and (V.TEXT_ is not null or V.TEXT2_ is not null or V.LONG_ is not null or V.DOUBLE_ is not null or V.BYTEARRAY_ID_ is not null)
                      </when>
                      <otherwise>
                        and V.TEXT_ is null and V.TEXT2_ is null and V.LONG_ is null and V.DOUBLE_ is null and V.BYTEARRAY_ID_ is null
                      </otherwise>
                    </choose>
                  </if>
                </where>
              )
            </otherwise>
        </choose>
      </foreach>
      <foreach item="orQueryObject" index="orIndex" collection="orQueryObjects">
        and
        <trim prefix="(" prefixOverrides="OR" suffix=")">
          <include refid="commonTaskInstanceOrQuerySql">
            <property name="queryTablePrefix" value="RES."/>
          </include>
          <if test="orQueryObject.processDefinitionKey != null || orQueryObject.processDefinitionKeyLike != null || orQueryObject.processDefinitionKeyLikeIgnoreCase != null || orQueryObject.processDefinitionName != null || orQueryObject.processDefinitionNameLike != null || (orQueryObject.processCategoryInList != null &amp;&amp; orQueryObject.processCategoryInList.size() &gt; 0) || (orQueryObject.processCategoryNotInList != null &amp;&amp; orQueryObject.processCategoryNotInList.size() &gt; 0) || (orQueryObject.processDefinitionKeys != null &amp;&amp; orQueryObject.processDefinitionKeys.size() &gt; 0) || orQueryObject.deploymentId != null || (orQueryObject.deploymentIds != null &amp;&amp; orQueryObject.deploymentIds.size() &gt; 0)">
            or exists (
                select 1
                from ${prefix}ACT_RE_PROCDEF D
                where RES.PROC_DEF_ID_ = D.ID_ and
                <trim prefix="(" prefixOverrides="OR" suffix=")">
                  <if test="orQueryObject.processDefinitionKey != null">
                    or D.KEY_ = #{orQueryObject.processDefinitionKey}
                  </if>
                  <if test="orQueryObject.processDefinitionKeyLike != null">
                    or D.KEY_ like #{orQueryObject.processDefinitionKeyLike}${wildcardEscapeClause}
                  </if>
                  <if test="orQueryObject.processDefinitionKeyLikeIgnoreCase != null">
                    or lower(D.KEY_) like #{orQueryObject.processDefinitionKeyLikeIgnoreCase}${wildcardEscapeClause}
                  </if>
                  <if test="orQueryObject.processDefinitionKeys != null &amp;&amp; orQueryObject.processDefinitionKeys.size() &gt; 0">
                    or D.KEY_ in
                    <foreach item="item" index="index" collection="orQueryObject.processDefinitionKeys" open="(" separator="," close=")">
                      #{item}
                    </foreach>
                  </if>
                  <if test="orQueryObject.processDefinitionName != null">
                    or D.NAME_ = #{orQueryObject.processDefinitionName}
                  </if>
                  <if test="orQueryObject.processDefinitionNameLike != null">
                    or D.NAME_ like #{orQueryObject.processDefinitionNameLike}${wildcardEscapeClause}
                  </if>
                  <if test="orQueryObject.processCategoryInList != null &amp;&amp; orQueryObject.processCategoryInList.size() &gt; 0">
                    or D.CATEGORY_ IN
                    <foreach item="processCategory" index="index" collection="orQueryObject.processCategoryInList"
                             open="(" separator="," close=")">
                      #{processCategory}
                    </foreach>
                  </if>
                  <if test="orQueryObject.processCategoryNotInList != null &amp;&amp; orQueryObject.processCategoryNotInList.size() &gt; 0">
                    or D.CATEGORY_ NOT IN
                    <foreach item="processCategory" index="index" collection="orQueryObject.processCategoryNotInList"
                             open="(" separator="," close=")">
                      #{processCategory}
                    </foreach>
                  </if>
                  <if test="orQueryObject.deploymentId != null">
                    or D.DEPLOYMENT_ID_ = #{orQueryObject.deploymentId}
                  </if>
                  <if test="orQueryObject.deploymentIds != null &amp;&amp; orQueryObject.deploymentIds.size() &gt; 0">
                    or D.DEPLOYMENT_ID_ IN
                    <foreach item="deployment" index="index" collection="orQueryObject.deploymentIds"
                             open="(" separator="," close=")">
                      #{deployment}
                    </foreach>
                  </if>
                </trim>
            )
          </if>
          <if test="orQueryObject.caseDefinitionKey != null || orQueryObject.caseDefinitionKeyLike != null || orQueryObject.caseDefinitionKeyLikeIgnoreCase != null || (orQueryObject.caseDefinitionKeys != null &amp;&amp; orQueryObject.caseDefinitionKeys.size() &gt; 0) || orQueryObject.cmmnDeploymentId != null || (orQueryObject.cmmnDeploymentIds != null &amp;&amp; orQueryObject.cmmnDeploymentIds.size() &gt; 0)">
            and exists (
                select 1
                from ${prefix}ACT_CMMN_CASEDEF CD
                where RES.SCOPE_DEFINITION_ID_ = CD.ID_ and
                <trim prefix="(" prefixOverrides="OR" suffix=")">
                  <if test="orQueryObject.cmmnDeploymentId != null">
                    or CD.DEPLOYMENT_ID_ = #{orQueryObject.cmmnDeploymentId}
                  </if>
                  <if test="orQueryObject.cmmnDeploymentIds != null &amp;&amp; orQueryObject.cmmnDeploymentIds.size() &gt; 0">
                    or CD.DEPLOYMENT_ID_ IN
                    <foreach item="deployment" index="index" collection="orQueryObject.cmmnDeploymentIds"
                             open="(" separator="," close=")">
                      #{deployment}
                    </foreach>
                  </if>
                  <if test="orQueryObject.caseDefinitionKey != null">
                    or CD.KEY_ = #{orQueryObject.caseDefinitionKey}
                  </if>
                  <if test="orQueryObject.caseDefinitionKeyLike != null">
                    or CD.KEY_ like #{orQueryObject.caseDefinitionKeyLike}${wildcardEscapeClause}
                  </if>
                  <if test="orQueryObject.caseDefinitionKeyLikeIgnoreCase != null">
                    or lower(CD.KEY_) like #{orQueryObject.caseDefinitionKeyLikeIgnoreCase}${wildcardEscapeClause}
                  </if>
                  <if test="orQueryObject.caseDefinitionKeys != null &amp;&amp; orQueryObject.caseDefinitionKeys.size() &gt; 0">
                    or CD.KEY_ in
                    <foreach item="item" index="index" collection="orQueryObject.caseDefinitionKeys" open="(" separator="," close=")">
                      #{item}
                    </foreach>
                  </if>
                </trim>
            )
          </if>
          <if test="orQueryObject.processFinished || orQueryObject.processUnfinished || orQueryObject.processInstanceBusinessKey != null || orQueryObject.processInstanceBusinessKeyLike != null || orQueryObject.processInstanceBusinessKeyLikeIgnoreCase != null">
            or exists (
                select 1
                from ${prefix}ACT_HI_PROCINST HPI
                where RES.PROC_INST_ID_ = HPI.ID_ and
                <trim prefix="(" prefixOverrides="OR" suffix=")">
                  <if test="orQueryObject.processInstanceBusinessKey != null">
                    or HPI.BUSINESS_KEY_ = #{orQueryObject.processInstanceBusinessKey}
                  </if>
                  <if test="orQueryObject.processInstanceBusinessKeyLike != null">
                    or HPI.BUSINESS_KEY_ like #{orQueryObject.processInstanceBusinessKeyLike}${wildcardEscapeClause}
                  </if>
                  <if test="orQueryObject.processInstanceBusinessKeyLikeIgnoreCase != null">
                    or lower(HPI.BUSINESS_KEY_) like #{orQueryObject.processInstanceBusinessKeyLikeIgnoreCase}${wildcardEscapeClause}
                  </if>
                  <if test="orQueryObject.processFinished">
                    or HPI.END_TIME_ is not null
                  </if>
                  <if test="orQueryObject.processUnfinished">
                    or HPI.END_TIME_ is null
                  </if>
                </trim>
            )
          </if>
          <foreach item="queryVar" collection="orQueryObject.queryVariableValues" index="index">
            or
            <trim prefix="(" prefixOverrides="AND" suffix=")">
              <choose>
                <when test="queryVar.operator.equals('EXISTS')">
                    and EXISTS (
                        select ID_ from ${prefix}ACT_HI_VARINST where NAME_ = #{queryVar.name}
                    <if test="!queryVar.local">
                        and RES.PROC_INST_ID_ = PROC_INST_ID_ and TASK_ID_ is null
                    </if>
                    <if test="queryVar.local">
                        and RES.ID_ = TASK_ID_
                    </if>
                    )
                </when>
                <when test="queryVar.operator.equals('NOT_EXISTS')">
                    and NOT EXISTS (
                        select ID_ from ${prefix}ACT_HI_VARINST where NAME_ = #{queryVar.name}
                    <if test="!queryVar.local">
                        and RES.PROC_INST_ID_ = PROC_INST_ID_ and TASK_ID_ is null
                    </if>
                    <if test="queryVar.local">
                        and RES.ID_ = TASK_ID_
                    </if>
                    )
                </when>
                <otherwise>
                and exists (
                    select 1
                    from ${prefix}ACT_HI_VARINST V
                    <where>
                      <if test="!queryVar.local">
                        and RES.PROC_INST_ID_ = PROC_INST_ID_ and TASK_ID_ is null
                      </if>
                      <if test="queryVar.local">
                        and RES.ID_ = TASK_ID_
                      </if>
                      <if test="queryVar.name != null">
                        <!-- Match-all variable-names when name is null -->
                        and V.NAME_= #{queryVar.name}
                      </if>
                      <if test="queryVar.needsTypeCheck()">
                        and V.VAR_TYPE_ = #{queryVar.type}
                      </if>
                      <!-- Variable value -->
                      <if test="queryVar.textValue != null &amp;&amp; queryVar.longValue == null &amp;&amp; queryVar.doubleValue == null">
                        <choose>
                          <when test="queryVar.operator.equals('EQUALS_IGNORE_CASE') || queryVar.operator.equals('NOT_EQUALS_IGNORE_CASE') || queryVar.operator.equals('LIKE_IGNORE_CASE')">
                            and (lower(V.TEXT_)
                          </when>
                          <otherwise>
                            and (V.TEXT_
                          </otherwise>
                        </choose>
                        <choose>
                          <when test="queryVar.operator.equals('LIKE') || queryVar.operator.equals('LIKE_IGNORE_CASE')">LIKE</when>
                          <otherwise><include refid="executionVariableOperator" /></otherwise>
                        </choose>
                        #{queryVar.textValue}
                        <choose>
                          <when test="queryVar.operator.equals('LIKE') || queryVar.operator.equals('LIKE_IGNORE_CASE')">${wildcardEscapeClause}</when>
                        </choose>
                        <if test="queryVar.operator.equals('NOT_EQUALS') || queryVar.operator.equals('NOT_EQUALS_IGNORE_CASE')">
                          or V.TEXT_ is null
                        </if>
                        )
                      </if>
                      <if test="queryVar.textValue2 != null">
                        and V.TEXT2_
                        <choose>
                          <when test="queryVar.operator.equals('LIKE')">LIKE</when>
                          <otherwise><include refid="executionVariableOperator" /></otherwise>
                        </choose>
                        #{queryVar.textValue2}
                        <choose>
                          <when test="queryVar.operator.equals('LIKE')">${wildcardEscapeClause}</when>
                        </choose>
                      </if>
                      <if test="queryVar.longValue != null">
                        and (V.LONG_
                        <include refid="executionVariableOperator" />
                        #{queryVar.longValue}
                        <if test="queryVar.operator.equals('NOT_EQUALS') || queryVar.operator.equals('NOT_EQUALS_IGNORE_CASE')">
                          or V.LONG_ is null
                        </if>
                        )
                      </if>
                      <if test="queryVar.doubleValue != null">
                        and (V.DOUBLE_
                        <include refid="executionVariableOperator" />
                        #{queryVar.doubleValue}
                        <if test="queryVar.operator.equals('NOT_EQUALS') || queryVar.operator.equals('NOT_EQUALS_IGNORE_CASE')">
                          or V.DOUBLE_ is null
                        </if>
                        )
                      </if>
                      <!-- Null variable type -->
                      <if test="queryVar.textValue == null &amp;&amp; queryVar.textValue2 == null &amp;&amp; queryVar.longValue == null &amp;&amp; queryVar.doubleValue == null">
                        <choose>
                          <when test="queryVar.operator.equals('NOT_EQUALS')">
                            and (V.TEXT_ is not null or V.TEXT2_ is not null or V.LONG_ is not null or V.DOUBLE_ is not null or V.BYTEARRAY_ID_ is not null)
                          </when>
                          <otherwise>
                            and V.TEXT_ is null and V.TEXT2_ is null and V.LONG_ is null and V.DOUBLE_ is null and V.BYTEARRAY_ID_ is null
                          </otherwise>
                        </choose>
                      </if>
                    </where>
                  )
              </otherwise>
             </choose>
            </trim>
          </foreach>
        </trim>
      </foreach>
    </where>
  </sql>
  
  <sql id="commonTaskInstanceQuerySql">
      <if test="taskId != null">
        ${queryTablePrefix}ID_ = #{taskId}
      </if>
      <if test="taskDefinitionId != null">
        and ${queryTablePrefix}TASK_DEF_ID_ = #{taskDefinitionId}
      </if>
      <if test="processDefinitionId != null">
        and ${queryTablePrefix}PROC_DEF_ID_ = #{processDefinitionId}
      </if>
      <if test="processInstanceId != null">
        and ${queryTablePrefix}PROC_INST_ID_ = #{processInstanceId}
      </if>
      <if test="processInstanceIds != null &amp;&amp; processInstanceIds.size() &gt; 0">
        and ${queryTablePrefix}PROC_INST_ID_ IN
        <foreach item="processInstance" index="index" collection="processInstanceIds"
                 open="(" separator="," close=")">
          #{processInstance}
        </foreach>
      </if>
      <if test="taskDefinitionKey != null">
        and ${queryTablePrefix}TASK_DEF_KEY_ = #{taskDefinitionKey}
      </if>
      <if test="taskDefinitionKeyLike != null">
        and ${queryTablePrefix}TASK_DEF_KEY_ like #{taskDefinitionKeyLike}${wildcardEscapeClause}
      </if>
      <if test="taskDefinitionKeys != null and !taskDefinitionKeys.isEmpty()">
        and ${queryTablePrefix}TASK_DEF_KEY_ in
        <foreach item="item" index="index" collection="taskDefinitionKeys" open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>
      <if test="executionId != null">
        and ${queryTablePrefix}EXECUTION_ID_ = #{executionId}
      </if>
      <if test="scopeId != null">
        and ${queryTablePrefix}SCOPE_ID_ = #{scopeId}
      </if>
      <if test="subScopeId != null">
        and ${queryTablePrefix}SUB_SCOPE_ID_ = #{subScopeId}
      </if>
      <if test="scopeType != null">
        and ${queryTablePrefix}SCOPE_TYPE_ = #{scopeType}
      </if>
      <if test="scopeDefinitionId != null">
        and ${queryTablePrefix}SCOPE_DEFINITION_ID_ = #{scopeDefinitionId}
      </if>
      <if test="propagatedStageInstanceId != null">
        and ${queryTablePrefix}PROPAGATED_STAGE_INST_ID_ = #{propagatedStageInstanceId}
      </if>
      <if test="processInstanceIdWithChildren != null">
        and exists(select ELINK.ID_ from ${prefix}ACT_HI_ENTITYLINK ELINK where ELINK.LINK_TYPE_ = 'child' and
            ELINK.SCOPE_ID_ = #{processInstanceIdWithChildren} AND ELINK.SCOPE_TYPE_ = 'bpmn' and
            ELINK.REF_SCOPE_ID_ = ${queryTablePrefix}ID_ and ELINK.REF_SCOPE_TYPE_ = 'task')
      </if>
      <if test="caseInstanceIdWithChildren != null">
        and exists(select ELINK.ID_ from ${prefix}ACT_HI_ENTITYLINK ELINK where ELINK.LINK_TYPE_ = 'child' and
            ELINK.SCOPE_ID_ = #{caseInstanceIdWithChildren} AND ELINK.SCOPE_TYPE_ = 'cmmn' and
            ELINK.REF_SCOPE_ID_ = ${queryTablePrefix}ID_ and ELINK.REF_SCOPE_TYPE_ = 'task')
      </if>
      <if test="taskName != null">
        and ${queryTablePrefix}NAME_ = #{taskName}
      </if>
      <if test="taskNameLike != null">
        and ${queryTablePrefix}NAME_ like #{taskNameLike}${wildcardEscapeClause}
      </if>
      <if test="taskNameLikeIgnoreCase != null">
        and lower(${queryTablePrefix}NAME_) like #{taskNameLikeIgnoreCase}${wildcardEscapeClause}
      </if>
      <if test="taskNameList != null &amp;&amp; taskNameList.size() &gt; 0">
        and ${queryTablePrefix}NAME_ IN
        <foreach item="taskName" index="index" collection="taskNameList"
                 open="(" separator="," close=")">
          #{taskName}
        </foreach>
      </if>
      <if test="taskNameListIgnoreCase != null &amp;&amp; taskNameListIgnoreCase.size() &gt; 0">
        and lower(${queryTablePrefix}NAME_) IN
        <foreach item="taskName" index="index" collection="taskNameListIgnoreCase"
                 open="(" separator="," close=")">
          #{taskName}
        </foreach>
      </if>
      <if test="taskParentTaskId != null">
        and ${queryTablePrefix}PARENT_TASK_ID_ = #{taskParentTaskId}
      </if>
      <if test="taskDescription != null">
        and ${queryTablePrefix}DESCRIPTION_ = #{taskDescription}
      </if>
      <if test="taskDescriptionLike != null">
        and ${queryTablePrefix}DESCRIPTION_ like #{taskDescriptionLike}${wildcardEscapeClause}
      </if>
      <if test="taskDescriptionLikeIgnoreCase != null">
        and lower(${queryTablePrefix}DESCRIPTION_) like #{taskDescriptionLikeIgnoreCase}${wildcardEscapeClause}
      </if>
      <if test="taskDeleteReason != null">
        and ${queryTablePrefix}DELETE_REASON_ = #{taskDeleteReason}
      </if>
      <if test="taskDeleteReasonLike != null">
        and ${queryTablePrefix}DELETE_REASON_ like #{taskDeleteReasonLike}${wildcardEscapeClause}
      </if>
      <if test="taskOwner != null">
        and ${queryTablePrefix}OWNER_ = #{taskOwner}
      </if>
      <if test="taskOwnerLike != null">
        and ${queryTablePrefix}OWNER_ like #{taskOwnerLike}${wildcardEscapeClause}
      </if>
      <if test="taskOwnerLikeIgnoreCase != null">
        and lower(${queryTablePrefix}OWNER_) like #{taskOwnerLikeIgnoreCase}${wildcardEscapeClause}
      </if>
      <if test="taskAssignee != null">
        and ${queryTablePrefix}ASSIGNEE_ = #{taskAssignee}
      </if>
      <if test="taskAssigneeLike != null">
        and ${queryTablePrefix}ASSIGNEE_ like #{taskAssigneeLike}${wildcardEscapeClause}
      </if>
      <if test="taskAssigneeLikeIgnoreCase != null">
        and lower(${queryTablePrefix}ASSIGNEE_) like #{taskAssigneeLikeIgnoreCase}${wildcardEscapeClause}
      </if>
      <if test="taskAssigneeIds != null &amp;&amp; taskAssigneeIds.size() &gt; 0">
        and ${queryTablePrefix}ASSIGNEE_ IN
        <foreach item="assigneeId" index="index" collection="taskAssigneeIds"
                 open="(" separator="," close=")">
          #{assigneeId}
        </foreach>
      </if>
      <if test="withAssignee">
        and ${queryTablePrefix}ASSIGNEE_ IS NOT NULL
      </if>
      <if test="withoutAssignee">
        and ${queryTablePrefix}ASSIGNEE_ IS NULL
      </if>
      <if test="taskPriority != null">
        and ${queryTablePrefix}PRIORITY_ = #{taskPriority}
      </if>
      <if test="taskMinPriority != null">
        and ${queryTablePrefix}PRIORITY_ &gt;= #{taskMinPriority}
      </if>
      <if test="taskMaxPriority != null">
        and ${queryTablePrefix}PRIORITY_ &lt;= #{taskMaxPriority}
      </if>
      <if test="unfinished">
        and ${queryTablePrefix}END_TIME_ is null
      </if>
      <if test="finished">
        and ${queryTablePrefix}END_TIME_ is not null
      </if>
      
      <if test="dueDate != null">
        and ${queryTablePrefix}DUE_DATE_ = #{dueDate}
      </if>
      <if test="dueBefore != null">
        and ${queryTablePrefix}DUE_DATE_ &lt; #{dueBefore}
      </if>
      <if test="dueAfter != null">
        and ${queryTablePrefix}DUE_DATE_ &gt; #{dueAfter}
      </if>
      <if test="withoutDueDate">
        and ${queryTablePrefix}DUE_DATE_ is null
      </if>
      <if test="creationDate != null">
        and ${queryTablePrefix}START_TIME_ = #{creationDate}
      </if>
      <if test="creationBeforeDate != null">
        and ${queryTablePrefix}START_TIME_ &lt; #{creationBeforeDate}
      </if>
      <if test="creationAfterDate != null">
        and ${queryTablePrefix}START_TIME_ &gt; #{creationAfterDate}
      </if>
      <if test="completedDate != null">
        and ${queryTablePrefix}END_TIME_ = #{completedDate}
      </if>
      <if test="completedBeforeDate != null">
        and ${queryTablePrefix}END_TIME_ &lt; #{completedBeforeDate}
      </if>
      <if test="completedAfterDate != null">
        and ${queryTablePrefix}END_TIME_ &gt; #{completedAfterDate}
      </if>
      <if test="category != null">
        and ${queryTablePrefix}CATEGORY_ = #{category}
      </if>
      <if test="withFormKey">
        and ${queryTablePrefix}FORM_KEY_ IS NOT NULL
      </if>
      <if test="formKey != null">
        and ${queryTablePrefix}FORM_KEY_ = #{formKey}
      </if>
      <if test="tenantId != null">
        and ${queryTablePrefix}TENANT_ID_ = #{tenantId}
      </if>
      <if test="tenantIdLike != null">
        and ${queryTablePrefix}TENANT_ID_ like #{tenantIdLike}${wildcardEscapeClause}
      </if>
      <if test="withoutTenantId">
        and (${queryTablePrefix}TENANT_ID_ = '' or ${queryTablePrefix}TENANT_ID_ is null)
      </if>
      <if test="withoutDeleteReason">
        and (${queryTablePrefix}DELETE_REASON_ = '' or ${queryTablePrefix}DELETE_REASON_ is null)
      </if>
      <if test="candidateUser != null || candidateGroups != null">
        <if test="!ignoreAssigneeValue">
            and ${queryTablePrefix}ASSIGNEE_ is null
        </if>
        and EXISTS(select LINK.ID_ from ${prefix}ACT_HI_IDENTITYLINK LINK where LINK.TYPE_ = 'candidate' and LINK.TASK_ID_ = ${queryTablePrefix}ID_
            and
            (
              <if test="candidateUser != null">
                LINK.USER_ID_ = #{candidateUser}
              </if>
              <if test="candidateUser != null &amp;&amp; candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0">
                or
              </if>
              <if test="candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0">
                LINK.GROUP_ID_ IN
                <foreach item="group" index="index" collection="candidateGroups"
                         open="(" separator="," close=")">
                  #{group}
                </foreach>
              </if>
            )
        )
      </if>
      <if test="involvedUser != null">
        and (
          EXISTS(select LINK.ID_ from ${prefix}ACT_HI_IDENTITYLINK LINK where LINK.USER_ID_ = #{involvedUser} and LINK.TASK_ID_ = ${queryTablePrefix}ID_)
          or ${queryTablePrefix}ASSIGNEE_ = #{involvedUser}
          or ${queryTablePrefix}OWNER_ = #{involvedUser}
          )
      </if>
      <if test="involvedGroups != null">
        and EXISTS(select LINK.ID_ from ${prefix}ACT_HI_IDENTITYLINK LINK where LINK.TASK_ID_ = ${queryTablePrefix}ID_ and LINK.GROUP_ID_ in
        <foreach item="involvedGroup" index="index" collection="involvedGroups" open="(" separator="," close=")">
          #{involvedGroup}
        </foreach>
        )
      </if>
  </sql>
  
  <sql id="commonTaskInstanceOrQuerySql">
      <if test="orQueryObject.taskId != null">
        ${queryTablePrefix}ID_ = #{orQueryObject.taskId}
      </if>
      <if test="orQueryObject.taskDefinitionId != null">
        or ${queryTablePrefix}TASK_DEF_ID_ = #{orQueryObject.taskDefinitionId}
      </if>
      <if test="orQueryObject.processDefinitionId != null">
        or ${queryTablePrefix}PROC_DEF_ID_ = #{orQueryObject.processDefinitionId}
      </if>
      <if test="orQueryObject.processInstanceId != null">
        or ${queryTablePrefix}PROC_INST_ID_ = #{orQueryObject.processInstanceId}
      </if>
      <if test="orQueryObject.processInstanceIds != null &amp;&amp; orQueryObject.processInstanceIds.size() &gt; 0">
        or ${queryTablePrefix}PROC_INST_ID_ IN
        <foreach item="processInstance" index="index" collection="orQueryObject.processInstanceIds"
                 open="(" separator="," close=")">
          #{processInstance}
        </foreach>
      </if>
      <if test="orQueryObject.taskDefinitionKey != null">
        or ${queryTablePrefix}TASK_DEF_KEY_ = #{orQueryObject.taskDefinitionKey}
      </if>
      <if test="orQueryObject.taskDefinitionKeyLike != null">
        or ${queryTablePrefix}TASK_DEF_KEY_ like #{orQueryObject.taskDefinitionKeyLike}${wildcardEscapeClause}
      </if>
      <if test="orQueryObject.taskDefinitionKeys != null and !orQueryObject.taskDefinitionKeys.isEmpty()">
        or ${queryTablePrefix}TASK_DEF_KEY_ in
        <foreach item="item" index="index" collection="orQueryObject.taskDefinitionKeys" open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>
      <if test="orQueryObject.executionId != null">
        or ${queryTablePrefix}EXECUTION_ID_ = #{orQueryObject.executionId}
      </if>
      <if test="orQueryObject.scopeId != null">
        or ${queryTablePrefix}SCOPE_ID_ = #{orQueryObject.scopeId}
      </if>
      <if test="orQueryObject.subScopeId != null">
        or ${queryTablePrefix}SUB_SCOPE_ID_ = #{orQueryObject.subScopeId}
      </if>
      <if test="orQueryObject.scopeType != null">
        or ${queryTablePrefix}SCOPE_TYPE_ = #{orQueryObject.scopeType}
      </if>
      <if test="orQueryObject.scopeDefinitionId != null">
        or ${queryTablePrefix}SCOPE_DEFINITION_ID_ = #{orQueryObject.scopeDefinitionId}
      </if>
      <if test="orQueryObject.propagatedStageInstanceId != null">
        or ${queryTablePrefix}PROPAGATED_STAGE_INST_ID_ = #{orQueryObject.propagatedStageInstanceId}
      </if>
      <if test="orQueryObject.processInstanceIdWithChildren != null">
        or exists(select ELINK.ID_ from ${prefix}ACT_HI_ENTITYLINK ELINK where ELINK.LINK_TYPE_ = 'child' and
            ELINK.SCOPE_ID_ = #{orQueryObject.processInstanceIdWithChildren} AND ELINK.SCOPE_TYPE_ = 'bpmn' and
            ELINK.REF_SCOPE_ID_ = ${queryTablePrefix}ID_ and ELINK.REF_SCOPE_TYPE_ = 'task')
      </if>
      <if test="orQueryObject.caseInstanceIdWithChildren != null">
        or exists(select ELINK.ID_ from ${prefix}ACT_HI_ENTITYLINK ELINK where ELINK.LINK_TYPE_ = 'child' and
            ELINK.SCOPE_ID_ = #{orQueryObject.caseInstanceIdWithChildren} AND ELINK.SCOPE_TYPE_ = 'cmmn' and
            ELINK.REF_SCOPE_ID_ = ${queryTablePrefix}ID_ and ELINK.REF_SCOPE_TYPE_ = 'task')
      </if>
      <if test="orQueryObject.taskName != null">
        or ${queryTablePrefix}NAME_ = #{orQueryObject.taskName}
      </if>
      <if test="orQueryObject.taskNameLike != null">
        or ${queryTablePrefix}NAME_ like #{orQueryObject.taskNameLike}${wildcardEscapeClause}
      </if>
       <if test="orQueryObject.taskNameLikeIgnoreCase != null">
        or lower(${queryTablePrefix}NAME_) like #{orQueryObject.taskNameLikeIgnoreCase}${wildcardEscapeClause}
      </if>
      <if test="orQueryObject.taskNameList != null &amp;&amp; orQueryObject.taskNameList.size() &gt; 0">
        or ${queryTablePrefix}NAME_ IN
        <foreach item="taskName" index="index" collection="orQueryObject.taskNameList"
                 open="(" separator="," close=")">
          #{taskName}
        </foreach>
      </if>
      <if test="orQueryObject.taskNameListIgnoreCase != null &amp;&amp; orQueryObject.taskNameListIgnoreCase.size() &gt; 0">
        or lower(${queryTablePrefix}NAME_) IN
        <foreach item="taskName" index="index" collection="orQueryObject.taskNameListIgnoreCase"
                 open="(" separator="," close=")">
          #{taskName}
        </foreach>
      </if>
      <if test="orQueryObject.taskParentTaskId != null">
        or ${queryTablePrefix}PARENT_TASK_ID_ = #{orQueryObject.taskParentTaskId}
      </if>
      <if test="orQueryObject.taskDescription != null">
        or ${queryTablePrefix}DESCRIPTION_ = #{orQueryObject.taskDescription}
      </if>
      <if test="orQueryObject.taskDescriptionLike != null">
        or ${queryTablePrefix}DESCRIPTION_ like #{orQueryObject.taskDescriptionLike}${wildcardEscapeClause}
      </if>
       <if test="orQueryObject.taskDescriptionLikeIgnoreCase != null">
        or lower(${queryTablePrefix}DESCRIPTION_) like #{orQueryObject.taskDescriptionLikeIgnoreCase}${wildcardEscapeClause}
      </if>
      <if test="orQueryObject.taskDeleteReason != null">
        or ${queryTablePrefix}DELETE_REASON_ = #{orQueryObject.taskDeleteReason}
      </if>
      <if test="orQueryObject.taskDeleteReasonLike != null">
        or ${queryTablePrefix}DELETE_REASON_ like #{orQueryObject.taskDeleteReasonLike}${wildcardEscapeClause}
      </if>
      <if test="orQueryObject.taskOwner != null">
        or ${queryTablePrefix}OWNER_ = #{orQueryObject.taskOwner}
      </if>
      <if test="orQueryObject.taskOwnerLike != null">
        or ${queryTablePrefix}OWNER_ like #{orQueryObject.taskOwnerLike}${wildcardEscapeClause}
      </if>
      <if test="orQueryObject.taskOwnerLikeIgnoreCase != null">
        or lower(${queryTablePrefix}OWNER_) like #{orQueryObject.taskOwnerLikeIgnoreCase}${wildcardEscapeClause}
      </if>
      <if test="orQueryObject.taskAssignee != null">
        or ${queryTablePrefix}ASSIGNEE_ = #{orQueryObject.taskAssignee}
      </if>
      <if test="orQueryObject.taskAssigneeLike != null">
        or ${queryTablePrefix}ASSIGNEE_ like #{orQueryObject.taskAssigneeLike}${wildcardEscapeClause}
      </if>
       <if test="orQueryObject.taskAssigneeLikeIgnoreCase != null">
        or ${queryTablePrefix}ASSIGNEE_ like #{orQueryObject.taskAssigneeLikeIgnoreCase}${wildcardEscapeClause}
      </if>
      <if test="orQueryObject.withAssignee">
        or ${queryTablePrefix}ASSIGNEE_ IS NOT NULL
      </if>
      <if test="orQueryObject.withoutAssignee">
        or ${queryTablePrefix}ASSIGNEE_ IS NULL
      </if>
      <if test="orQueryObject.taskAssigneeIds != null &amp;&amp; orQueryObject.taskAssigneeIds.size() &gt; 0">
        or ${queryTablePrefix}ASSIGNEE_ IN
        <foreach item="assigneeId" index="index" collection="orQueryObject.taskAssigneeIds"
                 open="(" separator="," close=")">
          #{assigneeId}
        </foreach>
      </if>
      <if test="orQueryObject.taskPriority != null">
        or ${queryTablePrefix}PRIORITY_ = #{orQueryObject.taskPriority}
      </if>
      <if test="orQueryObject.taskMinPriority != null">
        or ${queryTablePrefix}PRIORITY_ &gt;= #{orQueryObject.taskMinPriority}
      </if>
      <if test="orQueryObject.taskMaxPriority != null">
        or ${queryTablePrefix}PRIORITY_ &lt;= #{orQueryObject.taskMaxPriority}
      </if>
      <if test="orQueryObject.unfinished">
        or ${queryTablePrefix}END_TIME_ is null
      </if>
      <if test="orQueryObject.finished">
        or ${queryTablePrefix}END_TIME_ is not null
      </if>
      <if test="orQueryObject.dueDate != null">
        or ${queryTablePrefix}DUE_DATE_ = #{orQueryObject.dueDate}
      </if>
      <if test="orQueryObject.dueBefore != null">
        or ${queryTablePrefix}DUE_DATE_ &lt; #{orQueryObject.dueBefore}
      </if>
      <if test="orQueryObject.dueAfter != null">
        or ${queryTablePrefix}DUE_DATE_ &gt; #{orQueryObject.dueAfter}
      </if>
      <if test="orQueryObject.withoutDueDate">
        or ${queryTablePrefix}DUE_DATE_ is null
      </if>
      <if test="orQueryObject.creationDate != null">
        or ${queryTablePrefix}START_TIME_ = #{orQueryObject.creationDate}
      </if>
      <if test="orQueryObject.creationBeforeDate != null">
        or ${queryTablePrefix}START_TIME_ &lt; #{orQueryObject.creationBeforeDate}
      </if>
      <if test="orQueryObject.creationAfterDate != null">
        or ${queryTablePrefix}START_TIME_ &gt; #{orQueryObject.creationAfterDate}
      </if>
      <if test="orQueryObject.completedDate != null">
        or ${queryTablePrefix}END_TIME_ = #{orQueryObject.completedDate}
      </if>
      <if test="orQueryObject.completedBeforeDate != null">
        or ${queryTablePrefix}END_TIME_ &lt; #{orQueryObject.completedBeforeDate}
      </if>
      <if test="orQueryObject.completedAfterDate != null">
        or ${queryTablePrefix}END_TIME_ &gt; #{orQueryObject.completedAfterDate}
      </if>
      <if test="orQueryObject.category != null">
        or ${queryTablePrefix}CATEGORY_ = #{orQueryObject.category}
      </if>
      <if test="orQueryObject.withFormKey">
        or ${queryTablePrefix}FORM_KEY_ IS NOT NULL
      </if>
      <if test="orQueryObject.formKey != null">
        or ${queryTablePrefix}FORM_KEY_ = #{orQueryObject.formKey}
      </if>
      <if test="orQueryObject.tenantId != null">
        or ${queryTablePrefix}TENANT_ID_ = #{orQueryObject.tenantId}
      </if>
      <if test="orQueryObject.tenantIdLike != null">
        or ${queryTablePrefix}TENANT_ID_ like #{orQueryObject.tenantIdLike}${wildcardEscapeClause}
      </if>
      <if test="orQueryObject.withoutTenantId">
        or (${queryTablePrefix}TENANT_ID_ = '' or ${queryTablePrefix}TENANT_ID_ is null)
      </if>
      <if test="orQueryObject.withoutDeleteReason">
        or (${queryTablePrefix}DELETE_REASON_ = '' or ${queryTablePrefix}DELETE_REASON_ is null)
      </if>
      <if test="orQueryObject.candidateUser != null || orQueryObject.candidateGroups != null">
        or (EXISTS(select LINK.ID_ from ${prefix}ACT_HI_IDENTITYLINK LINK where LINK.TYPE_ = 'candidate' and LINK.TASK_ID_ = ${queryTablePrefix}ID_
            and
            (
              <if test="orQueryObject.candidateUser != null">
                LINK.USER_ID_ = #{orQueryObject.candidateUser}
              </if>
              <if test="orQueryObject.candidateUser != null &amp;&amp; orQueryObject.candidateGroups != null &amp;&amp; orQueryObject.candidateGroups.size() &gt; 0">
                or
              </if>
              <if test="orQueryObject.candidateGroups != null &amp;&amp; orQueryObject.candidateGroups.size() &gt; 0">
                LINK.GROUP_ID_ IN
                <foreach item="group" index="index" collection="orQueryObject.candidateGroups"
                         open="(" separator="," close=")">
                  #{group}
                </foreach>
              </if>
            )
          )
        <if test="!orQueryObject.ignoreAssigneeValue">
            and ${queryTablePrefix}ASSIGNEE_ is null
        </if>
        )
      </if>
      <if test="orQueryObject.involvedUser != null">
        or (
          EXISTS(select LINK.ID_ from ${prefix}ACT_HI_IDENTITYLINK LINK where LINK.USER_ID_ = #{orQueryObject.involvedUser} and LINK.TASK_ID_ = ${queryTablePrefix}ID_)
          or ${queryTablePrefix}ASSIGNEE_ = #{orQueryObject.involvedUser}
          or ${queryTablePrefix}OWNER_ = #{orQueryObject.involvedUser}
          )
      </if>
      <if test="orQueryObject.involvedGroups != null">
        or
          EXISTS(select ID_ from ${prefix}ACT_HI_IDENTITYLINK LINK where LINK.TASK_ID_ = ${queryTablePrefix}ID_ and LINK.GROUP_ID_ in
          <foreach item="involvedGroup" index="index" collection="orQueryObject.involvedGroups" open="(" separator="," close=")">
            #{involvedGroup}
          </foreach>
          )
      </if>
  </sql>

  <sql id="executionVariableOperator">
    <choose>
      <when test="queryVar.operator.equals('EQUALS')">=</when>
      <when test="queryVar.operator.equals('EQUALS_IGNORE_CASE')">=</when>
      <when test="queryVar.operator.equals('NOT_EQUALS')">&lt;&gt;</when>
      <when test="queryVar.operator.equals('NOT_EQUALS_IGNORE_CASE')">&lt;&gt;</when>
      <when test="queryVar.operator.equals('GREATER_THAN')">&gt;</when>
      <when test="queryVar.operator.equals('GREATER_THAN_OR_EQUAL')">&gt;=</when>
      <when test="queryVar.operator.equals('LESS_THAN')">&lt;</when>
      <when test="queryVar.operator.equals('LESS_THAN_OR_EQUAL')">&lt;=</when>
   </choose>
  </sql>

  <select id="selectHistoricTaskInstanceByNativeQuery" parameterType="java.util.Map" resultMap="historicTaskInstanceResultMap">
    <include refid="org.flowable.common.engine.db.selectByNativeQuery"/>
  </select>

  <select id="selectHistoricTaskInstanceCountByNativeQuery" parameterType="java.util.Map" resultType="long">
    ${sql}
  </select>
</mapper>
