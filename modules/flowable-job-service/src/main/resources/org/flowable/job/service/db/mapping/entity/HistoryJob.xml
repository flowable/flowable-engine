<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.flowable.job.service.impl.persistence.entity.HistoryJobEntityImpl">

    <!-- JOB RESULTMAP -->

    <resultMap id="historyJobResultMap" type="org.flowable.job.service.impl.persistence.entity.HistoryJobEntityImpl">
        <id property="id" column="ID_" jdbcType="NVARCHAR" />
        <result property="revision" column="REV_" jdbcType="INTEGER" />
        <result property="lockOwner" column="LOCK_OWNER_" jdbcType="NVARCHAR" />
        <result property="lockExpirationTime" column="LOCK_EXP_TIME_" jdbcType="TIMESTAMP" />
        <result property="retries" column="RETRIES_" jdbcType="INTEGER" />
        <result property="exceptionByteArrayRef" column="EXCEPTION_STACK_ID_" typeHandler="JobByteArrayRefTypeHandler" />
        <result property="exceptionMessage" column="EXCEPTION_MSG_" jdbcType="NVARCHAR" />
        <result property="jobHandlerType" column="HANDLER_TYPE_" jdbcType="NVARCHAR" />
        <result property="jobHandlerConfiguration" column="HANDLER_CFG_" jdbcType="NVARCHAR" />
        <result property="customValuesByteArrayRef" column="CUSTOM_VALUES_ID_" typeHandler="JobByteArrayRefTypeHandler" />
        <result property="advancedJobHandlerConfigurationByteArrayRef" column="ADV_HANDLER_CFG_ID_" typeHandler="JobByteArrayRefTypeHandler" />
        <result property="createTime" column="CREATE_TIME_" jdbcType="TIMESTAMP" />
        <result property="scopeType" column="SCOPE_TYPE_" jdbcType="NVARCHAR" />
        <result property="tenantId" column="TENANT_ID_" jdbcType="NVARCHAR" />
    </resultMap>

    <!-- HISTORY JOB SELECT -->

    <select id="selectHistoryJob" parameterType="string" resultMap="historyJobResultMap">
        select * from ${prefix}ACT_RU_HISTORY_JOB where ID_ = #{id, jdbcType=NVARCHAR}
    </select>

    <select id="selectHistoryJobsToExecute" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject" resultMap="historyJobResultMap">
        <if test="needsPaging">${limitBefore}</if>
        SELECT RES.* <if test="needsPaging">${limitBetween}</if>
        from ${prefix}ACT_RU_HISTORY_JOB RES
        <where> 
            <if test="parameter == null">
                SCOPE_TYPE_ is null and LOCK_EXP_TIME_ is null
            </if>
            <if test="parameter != null and parameter != 'all'">
                SCOPE_TYPE_ = #{parameter, jdbcType=NVARCHAR} and LOCK_EXP_TIME_ is null
            </if>
            <if test="parameter != null and parameter == 'all'">
                LOCK_EXP_TIME_ is null
            </if>
        </where>
        ${orderBy}
        <if test="needsPaging">${limitAfter}</if>
    </select>

    <select id="selectExpiredHistoryJobs" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject" resultMap="historyJobResultMap">
        <if test="needsPaging">${limitBefore}</if>
        SELECT RES.* <if test="needsPaging">${limitBetween}</if>
        from ${prefix}ACT_RU_HISTORY_JOB RES
        <where> 
            <if test="parameter.jobExecutionScope == null">
                SCOPE_TYPE_ is null
            </if>
            <if test="parameter.jobExecutionScope != null and parameter.jobExecutionScope != 'all'">
                SCOPE_TYPE_ = #{parameter.jobExecutionScope, jdbcType=NVARCHAR}
            </if>
            and (LOCK_EXP_TIME_ is not null and LOCK_EXP_TIME_ &lt; #{parameter.now, jdbcType=TIMESTAMP})
        </where>
        ${orderBy}
        <if test="needsPaging">${limitAfter}</if>
    </select>

    <select id="selectHistoryJobsByConfiguration" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject" resultMap="historyJobResultMap">
        select * from ${prefix}ACT_RU_HISTORY_JOB
        where HANDLER_TYPE_ = #{parameter.handlerType, jdbcType=NVARCHAR}
        and HANDLER_CFG_ like #{parameter.handlerConfiguration, jdbcType=NVARCHAR}${wildcardEscapeClause}
    </select>

    <select id="selectHistoryJobByQueryCriteria" parameterType="org.flowable.job.service.impl.HistoryJobQueryImpl" resultMap="historyJobResultMap">
        <if test="needsPaging">${limitBefore}</if>
        SELECT RES.* <if test="needsPaging">${limitBetween}</if>
        <include refid="selectHistoryJobByQueryCriteriaSql" />
        ${orderBy}
        <if test="needsPaging">${limitAfter}</if>
    </select>

    <select id="selectHistoryJobCountByQueryCriteria" parameterType="org.flowable.job.service.impl.HistoryJobQueryImpl" resultType="long">
        select count(RES.ID_)
        <include refid="selectHistoryJobByQueryCriteriaSql" />
    </select>

    <sql id="selectHistoryJobByQueryCriteriaSql">
        from ${prefix}ACT_RU_HISTORY_JOB RES
        <where>
            <if test="id != null">
                RES.ID_ = #{id, jdbcType=NVARCHAR}
            </if>
            <if test="handlerType != null">
                and RES.HANDLER_TYPE_ = #{handlerType, jdbcType=NVARCHAR}
            </if>
            <if test="handlerTypes != null">
                and RES.HANDLER_TYPE_ in
                <foreach item="handlerType" index="index" collection="handlerTypes" open="(" separator="," close=")">
                    #{handlerType, jdbcType=NVARCHAR}
                </foreach>
            </if>
            <if test="withException">
                and (RES.EXCEPTION_MSG_ is not null or RES.EXCEPTION_STACK_ID_ is not null)
            </if>
            <if test="exceptionMessage">
                and RES.EXCEPTION_MSG_ = #{exceptionMessage, jdbcType=NVARCHAR}
            </if>
            <if test="scopeType != null">
                and RES.SCOPE_TYPE_ = #{scopeType, jdbcType=NVARCHAR}
            </if>
            <if test="lockOwner != null">
                and RES.LOCK_OWNER_ = #{lockOwner, jdbcType=NVARCHAR}
            </if>
            <if test="onlyLocked">
                and RES.LOCK_EXP_TIME_ is not null
            </if>
            <if test="onlyUnlocked">
                and RES.LOCK_EXP_TIME_ is null
            </if>
            <if test="tenantId != null">
                and RES.TENANT_ID_ = #{tenantId, jdbcType=NVARCHAR}
            </if>
            <if test="tenantIdLike != null">
                and RES.TENANT_ID_ like #{tenantIdLike, jdbcType=NVARCHAR}${wildcardEscapeClause}
            </if>
            <if test="withoutTenantId">
                and (RES.TENANT_ID_ = '' or RES.TENANT_ID_ is null)
            </if>
            <if test="withoutScopeType">
                and (RES.SCOPE_TYPE_ = '' or RES.SCOPE_TYPE_ is null)
            </if>
        </where>
    </sql>

    <!-- JOB DELETE STATEMENTS -->

    <delete id="deleteHistoryJob" parameterType="org.flowable.job.service.impl.persistence.entity.HistoryJobEntityImpl">
        delete from ${prefix}ACT_RU_HISTORY_JOB where ID_ = #{id, jdbcType=NVARCHAR} and REV_ = #{revision, jdbcType=INTEGER}
    </delete>

    <delete id="bulkDeleteHistoryJob" parameterType="java.util.Collection">
        delete from ${prefix}ACT_RU_HISTORY_JOB where
        <foreach item="job" collection="list" index="index" separator=" or ">
            ID_ = #{job.id, jdbcType=NVARCHAR}
        </foreach>
    </delete>

    <!-- HISTORY JOB INSERT -->

    <insert id="insertHistoryJob" parameterType="org.flowable.job.service.impl.persistence.entity.HistoryJobEntityImpl">
        insert into ${prefix}ACT_RU_HISTORY_JOB (
        ID_,
        REV_,
        LOCK_OWNER_,
        LOCK_EXP_TIME_,
        RETRIES_,
        EXCEPTION_STACK_ID_,
        EXCEPTION_MSG_,
        HANDLER_TYPE_,
        HANDLER_CFG_,
        CUSTOM_VALUES_ID_,
        ADV_HANDLER_CFG_ID_,
        CREATE_TIME_,
        SCOPE_TYPE_,
        TENANT_ID_)
        values (#{id, jdbcType=NVARCHAR},
        #{revision, jdbcType=INTEGER},
        #{lockOwner, jdbcType=NVARCHAR},
        #{lockExpirationTime, jdbcType=TIMESTAMP},
        #{retries, jdbcType=INTEGER},
        #{exceptionByteArrayRef, typeHandler=JobByteArrayRefTypeHandler},
        #{exceptionMessage, jdbcType=NVARCHAR},
        #{jobHandlerType, jdbcType=NVARCHAR},
        #{jobHandlerConfiguration, jdbcType=NVARCHAR},
        #{customValuesByteArrayRef, typeHandler=JobByteArrayRefTypeHandler},
        #{advancedJobHandlerConfigurationByteArrayRef, typeHandler=JobByteArrayRefTypeHandler},
        #{createTime, jdbcType=TIMESTAMP},
        #{scopeType, jdbcType=NVARCHAR},
        #{tenantId, jdbcType=NVARCHAR}
        )
    </insert>

    <insert id="bulkInsertHistoryJob" parameterType="java.util.List">
        INSERT INTO ${prefix}ACT_RU_HISTORY_JOB (
        ID_,
        REV_,
        LOCK_OWNER_,
        LOCK_EXP_TIME_,
        RETRIES_,
        EXCEPTION_STACK_ID_,
        EXCEPTION_MSG_,
        HANDLER_TYPE_,
        HANDLER_CFG_,
        CUSTOM_VALUES_ID_,
        ADV_HANDLER_CFG_ID_,
        CREATE_TIME_,
        SCOPE_TYPE_,
        TENANT_ID_
        ) VALUES
        <foreach collection="list" item="historyJob" index="index" separator=",">
            (#{historyJob.id, jdbcType=NVARCHAR},
            #{historyJob.revision, jdbcType=INTEGER},
            #{historyJob.lockOwner, jdbcType=NVARCHAR},
            #{historyJob.lockExpirationTime, jdbcType=TIMESTAMP},
            #{historyJob.retries, jdbcType=INTEGER},
            #{historyJob.exceptionByteArrayRef, typeHandler=JobByteArrayRefTypeHandler},
            #{historyJob.exceptionMessage, jdbcType=NVARCHAR},
            #{historyJob.jobHandlerType, jdbcType=NVARCHAR},
            #{historyJob.jobHandlerConfiguration, jdbcType=NVARCHAR},
            #{historyJob.customValuesByteArrayRef, typeHandler=JobByteArrayRefTypeHandler},
            #{historyJob.advancedJobHandlerConfigurationByteArrayRef, typeHandler=JobByteArrayRefTypeHandler},
            #{historyJob.createTime, jdbcType=TIMESTAMP},
            #{historyJob.scopeType, jdbcType=NVARCHAR},
            #{historyJob.tenantId, jdbcType=NVARCHAR}
            )
        </foreach>
    </insert>

    <insert id="bulkInsertHistoryJob" databaseId="oracle" parameterType="java.util.List">
        INSERT ALL
        <foreach collection="list" item="historyJob" index="index">
            INTO ${prefix}ACT_RU_HISTORY_JOB (
            ID_,
            REV_,
            LOCK_OWNER_,
            LOCK_EXP_TIME_,
            RETRIES_,
            EXCEPTION_STACK_ID_,
            EXCEPTION_MSG_,
            HANDLER_TYPE_,
            HANDLER_CFG_,
            CUSTOM_VALUES_ID_,
            ADV_HANDLER_CFG_ID_,
            CREATE_TIME_,
            SCOPE_TYPE_,
            TENANT_ID_) VALUES
            (#{historyJob.id, jdbcType=NVARCHAR},
            #{historyJob.revision, jdbcType=INTEGER},
            #{historyJob.lockOwner, jdbcType=NVARCHAR},
            #{historyJob.lockExpirationTime, jdbcType=TIMESTAMP},
            #{historyJob.retries, jdbcType=INTEGER},
            #{historyJob.exceptionByteArrayRef, typeHandler=JobByteArrayRefTypeHandler},
            #{historyJob.exceptionMessage, jdbcType=NVARCHAR},
            #{historyJob.jobHandlerType, jdbcType=NVARCHAR},
            #{historyJob.jobHandlerConfiguration, jdbcType=NVARCHAR},
            #{historyJob.customValuesByteArrayRef, typeHandler=JobByteArrayRefTypeHandler},
            #{historyJob.advancedJobHandlerConfigurationByteArrayRef, typeHandler=JobByteArrayRefTypeHandler},
            #{historyJob.createTime, jdbcType=TIMESTAMP},
            #{historyJob.scopeType, jdbcType=NVARCHAR},
            #{historyJob.tenantId, jdbcType=NVARCHAR})
        </foreach>
        SELECT * FROM dual
    </insert>

    <!-- HISTORY JOB UPDATE -->

    <update id="updateHistoryJob" parameterType="org.flowable.job.service.impl.persistence.entity.HistoryJobEntityImpl">
        update ${prefix}ACT_RU_HISTORY_JOB
        <set>
            REV_ = #{revisionNext, jdbcType=INTEGER},
            <if test="originalPersistentState.lockExpirationTime != lockExpirationTime">
                LOCK_EXP_TIME_ = #{lockExpirationTime, jdbcType=TIMESTAMP},
            </if>
            <if test="originalPersistentState.lockOwner != lockOwner">
                LOCK_OWNER_ = #{lockOwner, jdbcType=NVARCHAR},
            </if>
            <if test="originalPersistentState.jobHandlerType != jobHandlerType">
                HANDLER_TYPE_ = #{jobHandlerType, jdbcType=NVARCHAR},
            </if>
            <if test="originalPersistentState.retries != retries">
                RETRIES_ = #{retries, jdbcType=INTEGER},
            </if>
            <if test="(originalPersistentState.exceptionByteArrayRef != null and exceptionByteArrayRef == null) or (exceptionByteArrayRef == null and originalPersistentState.exceptionByteArrayRef != null) or (originalPersistentState.exceptionByteArrayRef != exceptionByteArrayRef)">
                EXCEPTION_STACK_ID_ = #{exceptionByteArrayRef, typeHandler=JobByteArrayRefTypeHandler},
            </if>
            <if test="originalPersistentState.exceptionMessage != exceptionMessage">
                EXCEPTION_MSG_ = #{exceptionMessage, jdbcType=NVARCHAR},
            </if>
            <if test="originalPersistentState.scopeType != scopeType">
                SCOPE_TYPE_ = #{scopeType, jdbcType=NVARCHAR},
            </if>
        </set>
        where ID_= #{id, jdbcType=NVARCHAR}
        and REV_ = #{revision, jdbcType=INTEGER}
    </update>

    <update id="resetExpiredHistoryJob" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject">
        update ${prefix}ACT_RU_HISTORY_JOB
        set LOCK_OWNER_ = null, LOCK_EXP_TIME_ = null
        where ID_ = #{id, jdbcType=NVARCHAR}
    </update>

    <update id="updateHistoryJobLocks" parameterType="java.util.Map">
        update ${prefix}ACT_RU_HISTORY_JOB set LOCK_OWNER_ = #{lockOwner, jdbcType=NVARCHAR}, LOCK_EXP_TIME_ = #{lockExpirationTime, jdbcType=TIMESTAMP}
        where ID_ in
        <foreach item="job" index="index" collection="historyJobs" open="(" separator="," close=")">
            #{job.id, jdbcType=NVARCHAR}
        </foreach>
    </update>

</mapper>
