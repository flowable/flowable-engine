<?xml version="1.0" encoding="UTF-8" ?> 

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.flowable.variable.service.impl.persistence.entity.VariableInstanceEntityImpl">

    <!-- VARIABLE INSTANCE INSERT -->

    <insert id="insertVariableInstance" parameterType="org.flowable.variable.service.impl.persistence.entity.VariableInstanceEntityImpl">
        insert into ${prefix}ACT_RU_VARIABLE (ID_, REV_, TYPE_, NAME_, PROC_INST_ID_, EXECUTION_ID_, TASK_ID_, SCOPE_ID_, SUB_SCOPE_ID_, SCOPE_TYPE_, 
            BYTEARRAY_ID_, DOUBLE_, LONG_ , TEXT_, TEXT2_)
        values (
            #{id, jdbcType=VARCHAR},
            1,
            #{type, jdbcType=VARCHAR},
            #{name, jdbcType=VARCHAR},
            #{processInstanceId, jdbcType=VARCHAR},
            #{executionId, jdbcType=VARCHAR},
            #{taskId, jdbcType=VARCHAR},
            #{scopeId, jdbcType=VARCHAR},
            #{subScopeId, jdbcType=VARCHAR},
            #{scopeType, jdbcType=VARCHAR},
            #{byteArrayRef, typeHandler=VariableByteArrayRefTypeHandler},
            #{doubleValue, jdbcType=DOUBLE},
            #{longValue, jdbcType=BIGINT},
            #{textValue, jdbcType=VARCHAR},
            #{textValue2, jdbcType=VARCHAR}
        )
    </insert>

    <insert id="bulkInsertVariableInstance" parameterType="java.util.List">
        INSERT INTO ${prefix}ACT_RU_VARIABLE (ID_, REV_, TYPE_, NAME_, PROC_INST_ID_, EXECUTION_ID_, TASK_ID_, SCOPE_ID_, SUB_SCOPE_ID_, SCOPE_TYPE_, 
            BYTEARRAY_ID_, DOUBLE_, LONG_ , TEXT_, TEXT2_) VALUES
        <foreach collection="list" item="variable" index="index" separator=",">
            (
                #{variable.id, jdbcType=VARCHAR},
                1,
                #{variable.typeName, jdbcType=VARCHAR },
                #{variable.name, jdbcType=VARCHAR},
                #{variable.processInstanceId, jdbcType=VARCHAR},
                #{variable.executionId, jdbcType=VARCHAR},
                #{variable.taskId, jdbcType=VARCHAR},
                #{variable.scopeId, jdbcType=VARCHAR},
                #{variable.subScopeId, jdbcType=VARCHAR},
                #{variable.scopeType, jdbcType=VARCHAR},
                #{variable.byteArrayRef, typeHandler=VariableByteArrayRefTypeHandler},
                #{variable.doubleValue, jdbcType=DOUBLE},
                #{variable.longValue, jdbcType=BIGINT},
                #{variable.textValue, jdbcType=VARCHAR},
                #{variable.textValue2, jdbcType=VARCHAR}
            )
        </foreach>
    </insert>

    <insert id="bulkInsertVariableInstance" databaseId="oracle" parameterType="java.util.List">
        INSERT ALL
        <foreach collection="list" item="variable" index="index">
            INTO ${prefix}ACT_RU_VARIABLE (ID_, REV_, TYPE_, NAME_, PROC_INST_ID_, EXECUTION_ID_, TASK_ID_, SCOPE_ID_, SUB_SCOPE_ID_, SCOPE_TYPE_, 
                BYTEARRAY_ID_, DOUBLE_, LONG_ , TEXT_, TEXT2_) VALUES
            (
                #{variable.id, jdbcType=VARCHAR},
                1,
                #{variable.typeName, jdbcType=VARCHAR },
                #{variable.name, jdbcType=VARCHAR},
                #{variable.processInstanceId, jdbcType=VARCHAR},
                #{variable.executionId, jdbcType=VARCHAR},
                #{variable.taskId, jdbcType=VARCHAR},
                #{variable.scopeId, jdbcType=VARCHAR},
                #{variable.subScopeId, jdbcType=VARCHAR},
                #{variable.scopeType, jdbcType=VARCHAR},
                #{variable.byteArrayRef, typeHandler=VariableByteArrayRefTypeHandler},
                #{variable.doubleValue, jdbcType=DOUBLE},
                #{variable.longValue, jdbcType=BIGINT},
                #{variable.textValue, jdbcType=VARCHAR},
                #{variable.textValue2, jdbcType=VARCHAR}
            )
        </foreach>
        SELECT * FROM dual
    </insert>

    <!-- VARIABLE INSTANCE UPDATE -->

    <update id="updateVariableInstance" parameterType="org.flowable.variable.service.impl.persistence.entity.VariableInstanceEntityImpl">
        update ${prefix}ACT_RU_VARIABLE
        <set>
            REV_ = #{revisionNext, jdbcType=INTEGER},
            <if test="originalPersistentState.name != name">
                NAME_ = #{name, jdbcType=VARCHAR}
            </if>
            <if test="originalPersistentState.executionId != executionId">
                EXECUTION_ID_ = #{executionId, jdbcType=VARCHAR},
            </if>
            <if test="originalPersistentState.scopeId != scopeId">
                SCOPE_ID_ = #{scopeId, jdbcType=VARCHAR},
            </if>
            <if test="originalPersistentState.subScopeId != subScopeId">
                SCOPE_ID_ = #{subScopeId, jdbcType=VARCHAR},
            </if>
            <if test="originalPersistentState.scopeType != scopeType">
                SCOPE_TYPE_ = #{scopeType, jdbcType=VARCHAR},
            </if>
            <if test="(byteArrayRef != null and originalPersistentState.byteArrayRef == null) or (byteArrayRef == null and originalPersistentState.byteArrayRef != null) or (originalPersistentState.byteArrayRef != byteArrayRef.id)">
                BYTEARRAY_ID_ = #{byteArrayRef, typeHandler=VariableByteArrayRefTypeHandler},
            </if>
            <if test="(originalPersistentState.typeName == null and type != null) or (originalPersistentState.typeName != null and type == null) or (originalPersistentState.typeName != type.typeName)">
                TYPE_ = #{type, jdbcType=VARCHAR},
            </if>
            <if test="originalPersistentState.doubleValue != doubleValue">
                DOUBLE_ = #{doubleValue, jdbcType=DOUBLE},
            </if>
            <if test="originalPersistentState.longValue != longValue">
                LONG_ = #{longValue, jdbcType=BIGINT},
            </if>
            <if test="originalPersistentState.textValue != textValue">
                TEXT_ = #{textValue, jdbcType=VARCHAR},
            </if>
            <if test="originalPersistentState.textValue2 != textValue2">
                TEXT2_ = #{textValue2, jdbcType=VARCHAR}
            </if>
        </set>
        where ID_ = #{id, jdbcType=VARCHAR}
        and REV_ = #{revision, jdbcType=INTEGER}
    </update>

    <!-- VARIABLE INSTANCE DELETE -->

    <delete id="deleteVariableInstance" parameterType="org.flowable.variable.service.impl.persistence.entity.VariableInstanceEntityImpl">
        delete from ${prefix}ACT_RU_VARIABLE where ID_ = #{id, jdbcType=VARCHAR} and REV_ = #{revision}
    </delete>
    
    <delete id="deleteVariableInstancesByTaskId" parameterType="string">
        delete from ${prefix}ACT_RU_VARIABLE where TASK_ID_ = #{id, jdbcType=VARCHAR}
    </delete>
    
    <delete id="deleteVariableInstancesByExecutionId" parameterType="string">
        delete from ${prefix}ACT_RU_VARIABLE where EXECUTION_ID_ = #{id, jdbcType=VARCHAR}
    </delete>

    <delete id="deleteVariablesByScopeIdAndScopeType" parameterType="java.util.Map">
        delete from ${prefix}ACT_RU_VARIABLE where SCOPE_ID_ = #{scopeId, jdbcType=VARCHAR} and SCOPE_TYPE_ = #{scopeType, jdbcType=VARCHAR}
    </delete>

    <!-- VARIABLE INSTANCE RESULTMAP -->
    <resultMap id="variableInstanceResultMap" type="org.flowable.variable.service.impl.persistence.entity.VariableInstanceEntityImpl">
        <id property="id" column="ID_" jdbcType="VARCHAR" />
        <result property="revision" column="REV_" jdbcType="INTEGER" />
        <result property="type" column="TYPE_" javaType="org.flowable.variable.api.types.VariableType" jdbcType="VARCHAR" />
        <result property="name" column="NAME_" javaType="String" jdbcType="VARCHAR" />
        <result property="processInstanceId" column="PROC_INST_ID_" jdbcType="VARCHAR" />
        <result property="executionId" column="EXECUTION_ID_" jdbcType="VARCHAR" />
        <result property="taskId" column="TASK_ID_" jdbcType="VARCHAR" />
        <result property="scopeId" column="SCOPE_ID_" jdbcType="VARCHAR" />
        <result property="subScopeId" column="SUB_SCOPE_ID_" jdbcType="VARCHAR" />
        <result property="scopeType" column="SCOPE_TYPE_" jdbcType="VARCHAR" />
        <result property="byteArrayRef" column="BYTEARRAY_ID_" typeHandler="VariableByteArrayRefTypeHandler" />
        <result property="doubleValue" column="DOUBLE_" jdbcType="DOUBLE" />
        <result property="textValue" column="TEXT_" jdbcType="VARCHAR" />
        <result property="textValue2" column="TEXT2_" jdbcType="VARCHAR" />
        <result property="longValue" column="LONG_" jdbcType="BIGINT" />
    </resultMap>

    <!-- VARIABLE INSTANCE SELECT -->

    <select id="selectVariableInstance" parameterType="string" resultMap="variableInstanceResultMap">
        select * from ${prefix}ACT_RU_VARIABLE where ID_ = #{id, jdbcType=VARCHAR}
    </select>

    <select id="selectVariablesByExecutionId" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject" resultMap="variableInstanceResultMap">
        select * from ${prefix}ACT_RU_VARIABLE
        where EXECUTION_ID_ = #{parameter, jdbcType=VARCHAR}
        and TASK_ID_ is null
    </select>

    <select id="selectVariablesByExecutionIds" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject" resultMap="variableInstanceResultMap">
        select * from ${prefix}ACT_RU_VARIABLE
        where TASK_ID_ is null
        and EXECUTION_ID_ in
        <foreach item="item" index="index" collection="parameter" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <select id="selectVariableInstanceByExecutionAndName" parameterType="java.util.Map" resultMap="variableInstanceResultMap">
        select * from ${prefix}ACT_RU_VARIABLE
        where EXECUTION_ID_ = #{executionId, jdbcType=VARCHAR} and NAME_= #{name, jdbcType=VARCHAR} and TASK_ID_ is null
    </select>

    <select id="selectVariableInstancesByExecutionAndNames" parameterType="java.util.Map" resultMap="variableInstanceResultMap">
        select * from ${prefix}ACT_RU_VARIABLE
        where EXECUTION_ID_ = #{parameter.executionId, jdbcType=VARCHAR} and TASK_ID_ is null
        <if test="parameter.names != null and parameter.names.size > 0">
            and (
            <foreach collection="parameter.names" index="index" item="name" separator=" or ">
                NAME_= #{name, jdbcType=VARCHAR}
            </foreach>
            )
        </if>
    </select>

    <select id="selectVariablesByTaskId" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject" resultMap="variableInstanceResultMap">
        select * from ${prefix}ACT_RU_VARIABLE where
        TASK_ID_ = #{parameter, jdbcType=VARCHAR}
    </select>

    <select id="selectVariablesByTaskIds" parameterType="org.flowable.common.engine.impl.db.ListQueryParameterObject" resultMap="variableInstanceResultMap">
        select * from ${prefix}ACT_RU_VARIABLE
        where TASK_ID_ in
        <foreach item="item" index="index" collection="parameter" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <select id="selectVariableInstanceByTaskAndName" parameterType="java.util.Map" resultMap="variableInstanceResultMap">
        select * from ${prefix}ACT_RU_VARIABLE
        where TASK_ID_ = #{taskId, jdbcType=VARCHAR} and NAME_= #{name, jdbcType=VARCHAR}
    </select>

    <select id="selectVariableInstancesByTaskAndNames" parameterType="java.util.Map" resultMap="variableInstanceResultMap">
        select * from ${prefix}ACT_RU_VARIABLE
        where TASK_ID_ = #{parameter.taskId, jdbcType=VARCHAR}
        <if test="parameter.names != null and parameter.names.size > 0">
            and (
            <foreach collection="parameter.names" index="index" item="name" separator=" or ">
                NAME_= #{name, jdbcType=VARCHAR}
            </foreach>
            )
        </if>
    </select>
    
    <select id="selectVariableInstancesByScopeIdAndScopeType" parameterType="java.util.Map" resultMap="variableInstanceResultMap">
        select * from ${prefix}ACT_RU_VARIABLE
        where SCOPE_ID_ = #{parameter.scopeId, jdbcType=VARCHAR} and SUB_SCOPE_ID_ is null and SCOPE_TYPE_ =  #{parameter.scopeType, jdbcType=VARCHAR}
    </select> 
    
    <select id="selectVariableInstanceByScopeIdAndScopeTypeAndName" parameterType="java.util.Map" resultMap="variableInstanceResultMap">
        select * from ${prefix}ACT_RU_VARIABLE
        where SCOPE_ID_ = #{scopeId, jdbcType=VARCHAR} 
        and SUB_SCOPE_ID_ is null
        and SCOPE_TYPE_ =  #{scopeType, jdbcType=VARCHAR}
        and NAME_ = #{variableName, jdbcType=VARCHAR}
    </select> 
    
    <select id="selectVariableInstanceByScopeIdAndScopeTypeAndNames"  parameterType="java.util.Map" resultMap="variableInstanceResultMap">
        select * from ${prefix}ACT_RU_VARIABLE
        where SCOPE_ID_ = #{parameter.scopeId, jdbcType=VARCHAR} 
        and SUB_SCOPE_ID_ is null
        and SCOPE_TYPE_ =  #{parameter.scopeType, jdbcType=VARCHAR}
        <if test="parameter.variableNames != null and parameter.variableNames.size > 0">
            and (
            <foreach collection="parameter.variableNames" index="index" item="name" separator=" or ">
                NAME_= #{name, jdbcType=VARCHAR}
            </foreach>
            )
        </if>
    </select>
    
     <select id="selectVariableInstancesBySubScopeIdAndScopeType" parameterType="java.util.Map" resultMap="variableInstanceResultMap">
        select * from ${prefix}ACT_RU_VARIABLE
        where SUB_SCOPE_ID_ = #{parameter.subScopeId, jdbcType=VARCHAR} and SCOPE_TYPE_ =  #{parameter.scopeType, jdbcType=VARCHAR}
    </select> 
    
    <select id="selectVariableInstanceBySubScopeIdAndScopeTypeAndName" parameterType="java.util.Map" resultMap="variableInstanceResultMap">
        select * from ${prefix}ACT_RU_VARIABLE
        where SUB_SCOPE_ID_ = #{subScopeId, jdbcType=VARCHAR} 
        and SCOPE_TYPE_ =  #{scopeType, jdbcType=VARCHAR}
        and NAME_ = #{variableName, jdbcType=VARCHAR}
    </select> 
    
    <select id="selectVariableInstanceBySubScopeIdAndScopeTypeAndNames"  parameterType="java.util.Map" resultMap="variableInstanceResultMap">
        select * from ${prefix}ACT_RU_VARIABLE
        where SUB_SCOPE_ID_ = #{parameter.subScopeId, jdbcType=VARCHAR} 
        and SCOPE_TYPE_ =  #{parameter.scopeType, jdbcType=VARCHAR}
        <if test="parameter.variableNames != null and parameter.variableNames.size > 0">
            and (
            <foreach collection="parameter.variableNames" index="index" item="name" separator=" or ">
                NAME_= #{name, jdbcType=VARCHAR}
            </foreach>
            )
        </if>
    </select>
    
</mapper>
